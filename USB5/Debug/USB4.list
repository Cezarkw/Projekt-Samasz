
USB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e95c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800ea70  0800ea70  0001ea70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0e0  0800f0e0  000203a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0e0  0800f0e0  000203a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0e0  0800f0e0  000203a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e0  0800f0e0  0001f0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a0  20000000  0800f0e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d64  200003a0  0800f488  000203a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000704  20001104  0800f488  00021104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130bb  00000000  00000000  000203c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000343c  00000000  00000000  00033484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000368c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00037988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0e7  00000000  00000000  00038910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015838  00000000  00000000  000539f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b6bc  00000000  00000000  0006922f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f48eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000587c  00000000  00000000  000f493c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200003a0 	.word	0x200003a0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ea54 	.word	0x0800ea54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200003a4 	.word	0x200003a4
 800014c:	0800ea54 	.word	0x0800ea54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 ff9e 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f890 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 f942 	bl	8000d1c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a98:	f009 fa66 	bl	8009f68 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000a9c:	f000 f8e4 	bl	8000c68 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 f910 	bl	8000cc4 <MX_USART1_UART_Init>
	//strcat(DataTx11,"fix");
	//strcat(DataTx11,"*");
	//strcat(DataTx22,"$");
	//strcat(DataTx22,"nofix");
	//strcat(DataTx22,"*");
	strcat(DataTx33,"$");	
 8000aa4:	4838      	ldr	r0, [pc, #224]	; (8000b88 <main+0x100>)
 8000aa6:	f7ff fb53 	bl	8000150 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <main+0x100>)
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4936      	ldr	r1, [pc, #216]	; (8000b8c <main+0x104>)
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	8013      	strh	r3, [r2, #0]
	strcat(DataTx33,"fault");
 8000abc:	4832      	ldr	r0, [pc, #200]	; (8000b88 <main+0x100>)
 8000abe:	f7ff fb47 	bl	8000150 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <main+0x100>)
 8000ac8:	4413      	add	r3, r2
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <main+0x108>)
 8000acc:	6810      	ldr	r0, [r2, #0]
 8000ace:	6018      	str	r0, [r3, #0]
 8000ad0:	8892      	ldrh	r2, [r2, #4]
 8000ad2:	809a      	strh	r2, [r3, #4]
	strcat(DataTx33,"*");
 8000ad4:	482c      	ldr	r0, [pc, #176]	; (8000b88 <main+0x100>)
 8000ad6:	f7ff fb3b 	bl	8000150 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <main+0x100>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	492c      	ldr	r1, [pc, #176]	; (8000b94 <main+0x10c>)
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	8013      	strh	r3, [r2, #0]
  while (1)
  {
	//uruchomienie / zatrzymanie pomiarow przyciskiem
	if (PA0==0)
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <main+0x110>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10e      	bne.n	8000b12 <main+0x8a>
		{
		start=start^1;
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <main+0x114>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f083 0301 	eor.w	r3, r3, #1
 8000afc:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <main+0x114>)
 8000afe:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 8000b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b04:	f000 ffc4 	bl	8001a90 <HAL_Delay>
		while (PA0==0);
 8000b08:	bf00      	nop
 8000b0a:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <main+0x110>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0fb      	beq.n	8000b0a <main+0x82>
		}
	//przelaczenie danych z pola przekroju na pomiar 1 czujnika - przyciskiem
	if (PA1==0)
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <main+0x118>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10e      	bne.n	8000b38 <main+0xb0>
		{
		czujnik=czujnik^1;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <main+0x11c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f083 0301 	eor.w	r3, r3, #1
 8000b22:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <main+0x11c>)
 8000b24:	6013      	str	r3, [r2, #0]
		HAL_Delay(500);
 8000b26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b2a:	f000 ffb1 	bl	8001a90 <HAL_Delay>
		while (PA1==1);
 8000b2e:	bf00      	nop
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <main+0x118>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d0fb      	beq.n	8000b30 <main+0xa8>
		}
	//pomiar z 7 czujnik�w i obliczenia
	obliczenia();	
 8000b38:	f000 fb3a 	bl	80011b0 <obliczenia>
	//jesli start i nie ma bledow pomiaru to ptzygotuj dane do wyslania
	if (scan_result!=-1 && start)
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <main+0x120>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d005      	beq.n	8000b52 <main+0xca>
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <main+0x114>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <main+0xca>
		dane();
 8000b4e:	f000 fadf 	bl	8001110 <dane>
	//komunikat o bledzie odczytu dowolnego czujnika
	if ((komunikat==0) && (scan_result==-1))
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <main+0x124>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10f      	bne.n	8000b7a <main+0xf2>
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <main+0x120>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b62:	d10a      	bne.n	8000b7a <main+0xf2>
					{
						komunikat=1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <main+0x124>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
						zeruj();
 8000b6a:	f000 fa15 	bl	8000f98 <zeruj>
						//dlugosc[0]=dlugosc[1];
						//szerokosc[0]=szerokosc[1];	
						scan_result=0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <main+0x120>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
						usb_tx3=1;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <main+0x128>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	601a      	str	r2, [r3, #0]
					}	
	//wyslanie danych po USB
	if (start)
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <main+0x114>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0b4      	beq.n	8000aec <main+0x64>
		USB_tx();
 8000b82:	f000 fa59 	bl	8001038 <USB_tx>
	if (PA0==0)
 8000b86:	e7b1      	b.n	8000aec <main+0x64>
 8000b88:	20000594 	.word	0x20000594
 8000b8c:	0800ea70 	.word	0x0800ea70
 8000b90:	0800ea74 	.word	0x0800ea74
 8000b94:	0800ea7c 	.word	0x0800ea7c
 8000b98:	42210100 	.word	0x42210100
 8000b9c:	20000614 	.word	0x20000614
 8000ba0:	42210104 	.word	0x42210104
 8000ba4:	200005fc 	.word	0x200005fc
 8000ba8:	20000618 	.word	0x20000618
 8000bac:	20000610 	.word	0x20000610
 8000bb0:	2000061c 	.word	0x2000061c

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bbe:	2228      	movs	r2, #40	; 0x28
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f009 fff0 	bl	800aba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be4:	2301      	movs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c00:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 ff82 	bl	8004b14 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c16:	f000 fcb7 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2102      	movs	r1, #2
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 f9ee 	bl	8005018 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c42:	f000 fca1 	bl	8001588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c46:	2310      	movs	r3, #16
 8000c48:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f004 fb79 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c5c:	f000 fc94 	bl	8001588 <Error_Handler>
  }
}
 8000c60:	bf00      	nop
 8000c62:	3750      	adds	r7, #80	; 0x50
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c6e:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <MX_I2C1_Init+0x54>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_I2C1_Init+0x58>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca6:	f001 fa71 	bl	800218c <HAL_I2C_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb0:	f000 fc6a 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200003bc 	.word	0x200003bc
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	00061a80 	.word	0x00061a80

08000cc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000cca:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <MX_USART1_UART_Init+0x54>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000cd0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART1_UART_Init+0x50>)
 8000d00:	f004 fbd8 	bl	80054b4 <HAL_MultiProcessor_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000d0a:	f000 fc3d 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000410 	.word	0x20000410
 8000d18:	40013800 	.word	0x40013800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a17      	ldr	r2, [pc, #92]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d4e:	f043 0308 	orr.w	r3, r3, #8
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0308 	and.w	r3, r3, #8
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a11      	ldr	r2, [pc, #68]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_GPIO_Init+0x90>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 51d8 	mov.w	r1, #6912	; 0x1b00
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_GPIO_Init+0x94>)
 8000d80:	f001 f9ec 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB12 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_9;
 8000d84:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <MX_GPIO_Init+0x94>)
 8000d9e:	f001 f859 	bl	8001e54 <HAL_GPIO_Init>

}
 8000da2:	bf00      	nop
 8000da4:	3720      	adds	r7, #32
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010c00 	.word	0x40010c00

08000db4 <calculate_CheckSum>:

/* USER CODE BEGIN 4 */


		int calculate_CheckSum(char * tab, int n)
		{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
			int checksum=tab[0];
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	60fb      	str	r3, [r7, #12]
			for(int i=1;i<n;i++)
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	e00a      	b.n	8000de0 <calculate_CheckSum+0x2c>
					{
					checksum=checksum^tab[i];
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4053      	eors	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
			for(int i=1;i<n;i++)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <calculate_CheckSum+0x16>
					}		
			return checksum;
 8000de8:	68fb      	ldr	r3, [r7, #12]
		}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <pomiar>:
		
	int pomiar(uint8_t adr)
			{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af04      	add	r7, sp, #16
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
				uint8_t value1=0x04;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	72fb      	strb	r3, [r7, #11]
				uint8_t value2;
				uint8_t low, high=0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	723b      	strb	r3, [r7, #8]

				uint16_t wynik;
				HAL_StatusTypeDef OK;
				//wyslanie komendy pomiaru
				OK=HAL_I2C_Mem_Write(&hi2c1, adr<<1, 0x00, I2C_MEMADD_SIZE_8BIT, &value1, 0x1, 100);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b299      	uxth	r1, r3
 8000e0e:	2364      	movs	r3, #100	; 0x64
 8000e10:	9302      	str	r3, [sp, #8]
 8000e12:	2301      	movs	r3, #1
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	f107 030b 	add.w	r3, r7, #11
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4833      	ldr	r0, [pc, #204]	; (8000ef0 <pomiar+0xfc>)
 8000e22:	f001 faf7 	bl	8002414 <HAL_I2C_Mem_Write>
 8000e26:	4603      	mov	r3, r0
 8000e28:	73fb      	strb	r3, [r7, #15]
				if (OK!=HAL_OK)
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d002      	beq.n	8000e36 <pomiar+0x42>
					{return -1;};	
 8000e30:	f04f 33ff 	mov.w	r3, #4294967295
 8000e34:	e057      	b.n	8000ee6 <pomiar+0xf2>
				do
					{
					//odcyztywanie flagi zakonczenie pomiaru
					OK=HAL_I2C_Mem_Read(&hi2c1, adr<<1, 0x01, I2C_MEMADD_SIZE_8BIT, &value2, 0x1, 100);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	b299      	uxth	r1, r3
 8000e3e:	2364      	movs	r3, #100	; 0x64
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2301      	movs	r3, #1
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	f107 030a 	add.w	r3, r7, #10
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4827      	ldr	r0, [pc, #156]	; (8000ef0 <pomiar+0xfc>)
 8000e52:	f001 fbd9 	bl	8002608 <HAL_I2C_Mem_Read>
 8000e56:	4603      	mov	r3, r0
 8000e58:	73fb      	strb	r3, [r7, #15]
					if (OK!=HAL_OK)
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <pomiar+0x72>
						{return -1;};
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	e03f      	b.n	8000ee6 <pomiar+0xf2>
					}
				while((value2 & 0x01)!=0x00);
 8000e66:	7abb      	ldrb	r3, [r7, #10]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1e2      	bne.n	8000e36 <pomiar+0x42>
				//odczytanie mlodszego bajtu wyniku
				OK=HAL_I2C_Mem_Read(&hi2c1, adr<<1, 0x10, I2C_MEMADD_SIZE_8BIT, &low, 0x1, 100);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	b299      	uxth	r1, r3
 8000e78:	2364      	movs	r3, #100	; 0x64
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f107 0309 	add.w	r3, r7, #9
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2301      	movs	r3, #1
 8000e88:	2210      	movs	r2, #16
 8000e8a:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <pomiar+0xfc>)
 8000e8c:	f001 fbbc 	bl	8002608 <HAL_I2C_Mem_Read>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
				if (OK!=HAL_OK)
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <pomiar+0xac>
					{return -1;};
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e022      	b.n	8000ee6 <pomiar+0xf2>
				//odczytanie starszego bajtu wyniku
				OK=HAL_I2C_Mem_Read(&hi2c1, adr<<1, 0x11, I2C_MEMADD_SIZE_8BIT, &high, 0x1, 100);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	b299      	uxth	r1, r3
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	9302      	str	r3, [sp, #8]
 8000eac:	2301      	movs	r3, #1
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	2211      	movs	r2, #17
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <pomiar+0xfc>)
 8000ebc:	f001 fba4 	bl	8002608 <HAL_I2C_Mem_Read>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	73fb      	strb	r3, [r7, #15]
				if (OK!=HAL_OK)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <pomiar+0xdc>
					{	return -1;};
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	e00a      	b.n	8000ee6 <pomiar+0xf2>
				wynik= (((uint16_t) high)<<8)+ (uint16_t) low+16;
 8000ed0:	7a3b      	ldrb	r3, [r7, #8]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	7a7b      	ldrb	r3, [r7, #9]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	3310      	adds	r3, #16
 8000ee2:	81bb      	strh	r3, [r7, #12]
				return wynik;
 8000ee4:	89bb      	ldrh	r3, [r7, #12]
			}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200003bc 	.word	0x200003bc

08000ef4 <scan>:
			
		int scan (void)
			{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
				int value;
				int index;
				int blad=0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
				uint8_t i=0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	72fb      	strb	r3, [r7, #11]
				for(i=0x63;i<0x6A;i++)
 8000f02:	2363      	movs	r3, #99	; 0x63
 8000f04:	72fb      	strb	r3, [r7, #11]
 8000f06:	e035      	b.n	8000f74 <scan+0x80>
					{
					//odczytanie pomiaru z czujnika
					value=pomiar(i);
 8000f08:	7afb      	ldrb	r3, [r7, #11]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff72 	bl	8000df4 <pomiar>
 8000f10:	6078      	str	r0, [r7, #4]
					index=i-0x63;
 8000f12:	7afb      	ldrb	r3, [r7, #11]
 8000f14:	3b63      	subs	r3, #99	; 0x63
 8000f16:	603b      	str	r3, [r7, #0]
					if (value==-1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1e:	d10c      	bne.n	8000f3a <scan+0x46>
						{
						blad=1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
						distance_array[index]=0;	
 8000f24:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <scan+0x9c>)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	18d1      	adds	r1, r2, r3
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	e9c1 2300 	strd	r2, r3, [r1]
 8000f38:	e019      	b.n	8000f6e <scan+0x7a>
						}
					else
						//dodatnie do pomiaru odleglosci czujnika od srodka okregu krzywizny glowicy
						distance_array[index]=(double)value+offset[index];
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fa62 	bl	8000404 <__aeabi_i2d>
 8000f40:	4604      	mov	r4, r0
 8000f42:	460d      	mov	r5, r1
 8000f44:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <scan+0xa0>)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fa59 	bl	8000404 <__aeabi_i2d>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff f907 	bl	800016c <__adddf3>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <scan+0x9c>)
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	00c9      	lsls	r1, r1, #3
 8000f68:	4401      	add	r1, r0
 8000f6a:	e9c1 2300 	strd	r2, r3, [r1]
				for(i=0x63;i<0x6A;i++)
 8000f6e:	7afb      	ldrb	r3, [r7, #11]
 8000f70:	3301      	adds	r3, #1
 8000f72:	72fb      	strb	r3, [r7, #11]
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	2b69      	cmp	r3, #105	; 0x69
 8000f78:	d9c6      	bls.n	8000f08 <scan+0x14>
					};
					if (blad==1)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <scan+0x92>
						return -1;
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	e000      	b.n	8000f88 <scan+0x94>
				else
						return 0;
 8000f86:	2300      	movs	r3, #0
			}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f90:	200004c0 	.word	0x200004c0
 8000f94:	20000038 	.word	0x20000038

08000f98 <zeruj>:
			
		void zeruj(void)
			{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
				Area_t=0;
 8000f9c:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <zeruj+0x28>)
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	e9c1 2300 	strd	r2, r3, [r1]
				Volume=0.0;
 8000faa:	4906      	ldr	r1, [pc, #24]	; (8000fc4 <zeruj+0x2c>)
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9c1 2300 	strd	r2, r3, [r1]
			}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	20000538 	.word	0x20000538
 8000fc4:	20000548 	.word	0x20000548

08000fc8 <zeruj2>:
			
		void zeruj2(char * tab, int n)
			{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
				for(int i=0;i<n;i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e007      	b.n	8000fe8 <zeruj2+0x20>
					tab[i]=0;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<n;i++)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dbf3      	blt.n	8000fd8 <zeruj2+0x10>
			}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <rozmiar>:
			
			
			
		int rozmiar(char * tab, int n)
		{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
			int i;
			for(i=0;i<n;i++)
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e00b      	b.n	8001024 <rozmiar+0x28>
				if (tab[i]=='*')
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b2a      	cmp	r3, #42	; 0x2a
 8001016:	d102      	bne.n	800101e <rozmiar+0x22>
					return (i+1);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	e007      	b.n	800102e <rozmiar+0x32>
			for(i=0;i<n;i++)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbef      	blt.n	800100c <rozmiar+0x10>
			return i;
 800102c:	68fb      	ldr	r3, [r7, #12]
		}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <USB_tx>:
		
			
		void USB_tx(void)
		{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
			volatile int R;
			PB9=PB9^1;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <USB_tx+0xc0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <USB_tx+0xc0>)
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	6013      	str	r3, [r2, #0]
				if (usb_tx3)
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <USB_tx+0xc4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d024      	beq.n	800109c <USB_tx+0x64>
					{
					R=rozmiar(DataTx33,50);
 8001052:	2132      	movs	r1, #50	; 0x32
 8001054:	482a      	ldr	r0, [pc, #168]	; (8001100 <USB_tx+0xc8>)
 8001056:	f7ff ffd1 	bl	8000ffc <rozmiar>
 800105a:	4603      	mov	r3, r0
 800105c:	607b      	str	r3, [r7, #4]
					if (R<50)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b31      	cmp	r3, #49	; 0x31
 8001062:	dc1b      	bgt.n	800109c <USB_tx+0x64>
						{
						checksum=calculate_CheckSum(DataTx33, R);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4619      	mov	r1, r3
 8001068:	4825      	ldr	r0, [pc, #148]	; (8001100 <USB_tx+0xc8>)
 800106a:	f7ff fea3 	bl	8000db4 <calculate_CheckSum>
 800106e:	4603      	mov	r3, r0
 8001070:	4a24      	ldr	r2, [pc, #144]	; (8001104 <USB_tx+0xcc>)
 8001072:	6013      	str	r3, [r2, #0]
						strcat(DataTx33,(char*) &checksum);
 8001074:	4923      	ldr	r1, [pc, #140]	; (8001104 <USB_tx+0xcc>)
 8001076:	4822      	ldr	r0, [pc, #136]	; (8001100 <USB_tx+0xc8>)
 8001078:	f00a fa32 	bl	800b4e0 <strcat>
						DataTx33[R+1]=0x0A;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3301      	adds	r3, #1
 8001080:	4a1f      	ldr	r2, [pc, #124]	; (8001100 <USB_tx+0xc8>)
 8001082:	210a      	movs	r1, #10
 8001084:	54d1      	strb	r1, [r2, r3]
						CDC_Transmit_FS((uint8_t*)DataTx33,R+2);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	b29b      	uxth	r3, r3
 800108a:	3302      	adds	r3, #2
 800108c:	b29b      	uxth	r3, r3
 800108e:	4619      	mov	r1, r3
 8001090:	481b      	ldr	r0, [pc, #108]	; (8001100 <USB_tx+0xc8>)
 8001092:	f009 f981 	bl	800a398 <CDC_Transmit_FS>
						usb_tx3=0;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <USB_tx+0xc4>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
						}
					}
				if (usb_tx4)
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <USB_tx+0xd0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d024      	beq.n	80010ee <USB_tx+0xb6>
					{
					R=rozmiar(DataTx44,50);
 80010a4:	2132      	movs	r1, #50	; 0x32
 80010a6:	4819      	ldr	r0, [pc, #100]	; (800110c <USB_tx+0xd4>)
 80010a8:	f7ff ffa8 	bl	8000ffc <rozmiar>
 80010ac:	4603      	mov	r3, r0
 80010ae:	607b      	str	r3, [r7, #4]
					if (R<50)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b31      	cmp	r3, #49	; 0x31
 80010b4:	dc1b      	bgt.n	80010ee <USB_tx+0xb6>
						{
						checksum=calculate_CheckSum(DataTx44, R);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4619      	mov	r1, r3
 80010ba:	4814      	ldr	r0, [pc, #80]	; (800110c <USB_tx+0xd4>)
 80010bc:	f7ff fe7a 	bl	8000db4 <calculate_CheckSum>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <USB_tx+0xcc>)
 80010c4:	6013      	str	r3, [r2, #0]
						strcat(DataTx44,(char*) &checksum);
 80010c6:	490f      	ldr	r1, [pc, #60]	; (8001104 <USB_tx+0xcc>)
 80010c8:	4810      	ldr	r0, [pc, #64]	; (800110c <USB_tx+0xd4>)
 80010ca:	f00a fa09 	bl	800b4e0 <strcat>
						DataTx44[R+1]=0x0A;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3301      	adds	r3, #1
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <USB_tx+0xd4>)
 80010d4:	210a      	movs	r1, #10
 80010d6:	54d1      	strb	r1, [r2, r3]
						CDC_Transmit_FS((uint8_t*)DataTx44,R+2);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	3302      	adds	r3, #2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4619      	mov	r1, r3
 80010e2:	480a      	ldr	r0, [pc, #40]	; (800110c <USB_tx+0xd4>)
 80010e4:	f009 f958 	bl	800a398 <CDC_Transmit_FS>
						usb_tx4=0;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <USB_tx+0xd0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
						}
					}			
		}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	422181a4 	.word	0x422181a4
 80010fc:	2000061c 	.word	0x2000061c
 8001100:	20000594 	.word	0x20000594
 8001104:	20000600 	.word	0x20000600
 8001108:	20000620 	.word	0x20000620
 800110c:	20000560 	.word	0x20000560

08001110 <dane>:
		
		void dane(void)
		{
 8001110:	b5b0      	push	{r4, r5, r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af02      	add	r7, sp, #8
			int c;
			usb_tx4=0;
 8001116:	4b20      	ldr	r3, [pc, #128]	; (8001198 <dane+0x88>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
			zeruj2(DataTx44,50);
 800111c:	2132      	movs	r1, #50	; 0x32
 800111e:	481f      	ldr	r0, [pc, #124]	; (800119c <dane+0x8c>)
 8001120:	f7ff ff52 	bl	8000fc8 <zeruj2>
			zeruj2(DataTx,50);
 8001124:	2132      	movs	r1, #50	; 0x32
 8001126:	481e      	ldr	r0, [pc, #120]	; (80011a0 <dane+0x90>)
 8001128:	f7ff ff4e 	bl	8000fc8 <zeruj2>
			DataTx44[0]='$';
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <dane+0x8c>)
 800112e:	2224      	movs	r2, #36	; 0x24
 8001130:	701a      	strb	r2, [r3, #0]
			c=snprintf(DataTx,50,"%.2f",fabs(Volume));
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <dane+0x94>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	4614      	mov	r4, r2
 800113a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800113e:	e9cd 4500 	strd	r4, r5, [sp]
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <dane+0x98>)
 8001144:	2132      	movs	r1, #50	; 0x32
 8001146:	4816      	ldr	r0, [pc, #88]	; (80011a0 <dane+0x90>)
 8001148:	f00a f996 	bl	800b478 <sniprintf>
 800114c:	6078      	str	r0, [r7, #4]
			if (c<0 || c>20)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db1a      	blt.n	800118a <dane+0x7a>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b14      	cmp	r3, #20
 8001158:	dc17      	bgt.n	800118a <dane+0x7a>
				return;	
			if (DataTx[0]=='-')
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <dane+0x90>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b2d      	cmp	r3, #45	; 0x2d
 8001160:	d015      	beq.n	800118e <dane+0x7e>
				return;	
			strcat(DataTx44,DataTx);
 8001162:	490f      	ldr	r1, [pc, #60]	; (80011a0 <dane+0x90>)
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <dane+0x8c>)
 8001166:	f00a f9bb 	bl	800b4e0 <strcat>
			strcat(DataTx44,"*");
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <dane+0x8c>)
 800116c:	f7fe fff0 	bl	8000150 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	461a      	mov	r2, r3
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <dane+0x8c>)
 8001176:	4413      	add	r3, r2
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <dane+0x9c>)
 800117a:	461a      	mov	r2, r3
 800117c:	460b      	mov	r3, r1
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	8013      	strh	r3, [r2, #0]
			usb_tx4=1;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <dane+0x88>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]
			return;		
 8001188:	e002      	b.n	8001190 <dane+0x80>
				return;	
 800118a:	bf00      	nop
 800118c:	e000      	b.n	8001190 <dane+0x80>
				return;	
 800118e:	bf00      	nop
		};
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
 8001196:	bf00      	nop
 8001198:	20000620 	.word	0x20000620
 800119c:	20000560 	.word	0x20000560
 80011a0:	200005c8 	.word	0x200005c8
 80011a4:	20000548 	.word	0x20000548
 80011a8:	0800ea80 	.word	0x0800ea80
 80011ac:	0800ea7c 	.word	0x0800ea7c

080011b0 <obliczenia>:
		
		
void obliczenia (void)
	{
 80011b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011b4:	b08e      	sub	sp, #56	; 0x38
 80011b6:	af00      	add	r7, sp, #0
			double alfa;
				//jesli start to wykonaj pomiar i oblicz
				if (start)
 80011b8:	4bab      	ldr	r3, [pc, #684]	; (8001468 <obliczenia+0x2b8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 81ce 	beq.w	800155e <obliczenia+0x3ae>
					{
					//wykoannie odczytu z 7 czujnikow
					scan_result=scan();
 80011c2:	f7ff fe97 	bl	8000ef4 <scan>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4aa8      	ldr	r2, [pc, #672]	; (800146c <obliczenia+0x2bc>)
 80011ca:	6013      	str	r3, [r2, #0]
					//jesli nie ma bledow odczytu to oblicz
						if (scan_result!=-1)
 80011cc:	4ba7      	ldr	r3, [pc, #668]	; (800146c <obliczenia+0x2bc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	f000 81c5 	beq.w	8001562 <obliczenia+0x3b2>
							{
							if (czujnik==1)
 80011d8:	4ba5      	ldr	r3, [pc, #660]	; (8001470 <obliczenia+0x2c0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <obliczenia+0x3c>
								Volume=distance_array[3];
 80011e0:	4ba4      	ldr	r3, [pc, #656]	; (8001474 <obliczenia+0x2c4>)
 80011e2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80011e6:	49a4      	ldr	r1, [pc, #656]	; (8001478 <obliczenia+0x2c8>)
 80011e8:	e9c1 2300 	strd	r2, r3, [r1]
							komunikat=0;
 80011ec:	4ba3      	ldr	r3, [pc, #652]	; (800147c <obliczenia+0x2cc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
							alfa=0.017453277*kat_tab[0]; //kat alfa
 80011f2:	4ba3      	ldr	r3, [pc, #652]	; (8001480 <obliczenia+0x2d0>)
 80011f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f8:	a397      	add	r3, pc, #604	; (adr r3, 8001458 <obliczenia+0x2a8>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff f96b 	bl	80004d8 <__aeabi_dmul>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	e9c7 2306 	strd	r2, r3, [r7, #24]
				      for(int i=0;i<2;i++)
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
 800120e:	e01a      	b.n	8001246 <obliczenia+0x96>
								wysokosc[i]=cos(alfa)*(distance_array[6*i]); //wysokosc H1 i H7 z 1 i 7 czujnika
 8001210:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001214:	f00c fbe0 	bl	800d9d8 <cos>
 8001218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4a94      	ldr	r2, [pc, #592]	; (8001474 <obliczenia+0x2c4>)
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f954 	bl	80004d8 <__aeabi_dmul>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4893      	ldr	r0, [pc, #588]	; (8001484 <obliczenia+0x2d4>)
 8001236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001238:	00c9      	lsls	r1, r1, #3
 800123a:	4401      	add	r1, r0
 800123c:	e9c1 2300 	strd	r2, r3, [r1]
				      for(int i=0;i<2;i++)
 8001240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001242:	3301      	adds	r3, #1
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
 8001246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001248:	2b01      	cmp	r3, #1
 800124a:	dde1      	ble.n	8001210 <obliczenia+0x60>
							szer=(wysokosc[0]-wysokosc[1])/(sin(alfa)*(distance_array[0]+distance_array[6])); //odleglosc punktu pomiaru 1 i 7 czujnika od osi symetrii
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <obliczenia+0x2d4>)
 800124e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001252:	4b8c      	ldr	r3, [pc, #560]	; (8001484 <obliczenia+0x2d4>)
 8001254:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001258:	f7fe ff86 	bl	8000168 <__aeabi_dsub>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4690      	mov	r8, r2
 8001262:	4699      	mov	r9, r3
 8001264:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001268:	f00c fbfc 	bl	800da64 <sin>
 800126c:	4604      	mov	r4, r0
 800126e:	460d      	mov	r5, r1
 8001270:	4b80      	ldr	r3, [pc, #512]	; (8001474 <obliczenia+0x2c4>)
 8001272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001276:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <obliczenia+0x2c4>)
 8001278:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800127c:	f7fe ff76 	bl	800016c <__adddf3>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4620      	mov	r0, r4
 8001286:	4629      	mov	r1, r5
 8001288:	f7ff f926 	bl	80004d8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4640      	mov	r0, r8
 8001292:	4649      	mov	r1, r9
 8001294:	f7ff fa4a 	bl	800072c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	497a      	ldr	r1, [pc, #488]	; (8001488 <obliczenia+0x2d8>)
 800129e:	e9c1 2300 	strd	r2, r3, [r1]
							for(int i=0;i<6;i++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
 80012a6:	e053      	b.n	8001350 <obliczenia+0x1a0>
								sensor_gap[i]=fabs(distance_array[i]*sin(0.01745327*kat_tab[i])-distance_array[i+1]*sin(0.01745327*kat_tab[i+1])); //odleglosci pomiedzy punktami pomiaru w kierunku prostopadlym do osi symetrii
 80012a8:	4a72      	ldr	r2, [pc, #456]	; (8001474 <obliczenia+0x2c4>)
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012b4:	4a72      	ldr	r2, [pc, #456]	; (8001480 <obliczenia+0x2d0>)
 80012b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4413      	add	r3, r2
 80012bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012c0:	a367      	add	r3, pc, #412	; (adr r3, 8001460 <obliczenia+0x2b0>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f907 	bl	80004d8 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f00c fbc7 	bl	800da64 <sin>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7ff f8fb 	bl	80004d8 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4690      	mov	r8, r2
 80012e8:	4699      	mov	r9, r3
 80012ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a61      	ldr	r2, [pc, #388]	; (8001474 <obliczenia+0x2c4>)
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	4413      	add	r3, r2
 80012f4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a60      	ldr	r2, [pc, #384]	; (8001480 <obliczenia+0x2d0>)
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	4413      	add	r3, r2
 8001302:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001306:	a356      	add	r3, pc, #344	; (adr r3, 8001460 <obliczenia+0x2b0>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f8e4 	bl	80004d8 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f00c fba4 	bl	800da64 <sin>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7ff f8d8 	bl	80004d8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4640      	mov	r0, r8
 800132e:	4649      	mov	r1, r9
 8001330:	f7fe ff1a 	bl	8000168 <__aeabi_dsub>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4692      	mov	sl, r2
 800133a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800133e:	4a53      	ldr	r2, [pc, #332]	; (800148c <obliczenia+0x2dc>)
 8001340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	4413      	add	r3, r2
 8001346:	e9c3 ab00 	strd	sl, fp, [r3]
							for(int i=0;i<6;i++)
 800134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134c:	3301      	adds	r3, #1
 800134e:	633b      	str	r3, [r7, #48]	; 0x30
 8001350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001352:	2b05      	cmp	r3, #5
 8001354:	dda8      	ble.n	80012a8 <obliczenia+0xf8>
							for(int i=1;i<7;i++)
 8001356:	2301      	movs	r3, #1
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135a:	e01a      	b.n	8001392 <obliczenia+0x1e2>
								sensor_gap2[i]=sensor_gap2[i-1]+sensor_gap[i-1]; //odleglosci pomiedzy punktami pomiaru w kierunku prostopadlym do osi symetrii narastajaco
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	3b01      	subs	r3, #1
 8001360:	4a4b      	ldr	r2, [pc, #300]	; (8001490 <obliczenia+0x2e0>)
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4413      	add	r3, r2
 8001366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	3b01      	subs	r3, #1
 800136e:	4a47      	ldr	r2, [pc, #284]	; (800148c <obliczenia+0x2dc>)
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7fe fef8 	bl	800016c <__adddf3>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4843      	ldr	r0, [pc, #268]	; (8001490 <obliczenia+0x2e0>)
 8001382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001384:	00c9      	lsls	r1, r1, #3
 8001386:	4401      	add	r1, r0
 8001388:	e9c1 2300 	strd	r2, r3, [r1]
							for(int i=1;i<7;i++)
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	3301      	adds	r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	2b06      	cmp	r3, #6
 8001396:	dde1      	ble.n	800135c <obliczenia+0x1ac>
							for(int i=0;i<7;i++)
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
 800139c:	e04d      	b.n	800143a <obliczenia+0x28a>
								{
								wartosc=wysokosc[0]-sensor_gap2[i]*szer-cos(0.01745327*kat_tab[i])*distance_array[i]; //obliczenie wysokosci sianokoasu w punktach pomiaru
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <obliczenia+0x2d4>)
 80013a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013a4:	4a3a      	ldr	r2, [pc, #232]	; (8001490 <obliczenia+0x2e0>)
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b0:	4b35      	ldr	r3, [pc, #212]	; (8001488 <obliczenia+0x2d8>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f88f 	bl	80004d8 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7fe fed1 	bl	8000168 <__aeabi_dsub>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4614      	mov	r4, r2
 80013cc:	461d      	mov	r5, r3
 80013ce:	4a2c      	ldr	r2, [pc, #176]	; (8001480 <obliczenia+0x2d0>)
 80013d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4413      	add	r3, r2
 80013d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013da:	a321      	add	r3, pc, #132	; (adr r3, 8001460 <obliczenia+0x2b0>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f87a 	bl	80004d8 <__aeabi_dmul>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f00c faf4 	bl	800d9d8 <cos>
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <obliczenia+0x2c4>)
 80013f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f86c 	bl	80004d8 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7fe feae 	bl	8000168 <__aeabi_dsub>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4920      	ldr	r1, [pc, #128]	; (8001494 <obliczenia+0x2e4>)
 8001412:	e9c1 2300 	strd	r2, r3, [r1]
								distance_array2[i]=fabs(wartosc);
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <obliczenia+0x2e4>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	613a      	str	r2, [r7, #16]
 800141e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <obliczenia+0x2e8>)
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001430:	e9c3 1200 	strd	r1, r2, [r3]
							for(int i=0;i<7;i++)
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
 800143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143c:	2b06      	cmp	r3, #6
 800143e:	ddae      	ble.n	800139e <obliczenia+0x1ee>
								}
							Area_t=0;	
 8001440:	4916      	ldr	r1, [pc, #88]	; (800149c <obliczenia+0x2ec>)
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	e9c1 2300 	strd	r2, r3, [r1]
							for(int i=0;i<6;i++)
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	e070      	b.n	8001536 <obliczenia+0x386>
 8001454:	f3af 8000 	nop.w
 8001458:	97b12e83 	.word	0x97b12e83
 800145c:	3f91df45 	.word	0x3f91df45
 8001460:	1f6edb2a 	.word	0x1f6edb2a
 8001464:	3f91df45 	.word	0x3f91df45
 8001468:	20000614 	.word	0x20000614
 800146c:	20000618 	.word	0x20000618
 8001470:	200005fc 	.word	0x200005fc
 8001474:	200004c0 	.word	0x200004c0
 8001478:	20000548 	.word	0x20000548
 800147c:	20000610 	.word	0x20000610
 8001480:	20000000 	.word	0x20000000
 8001484:	20000550 	.word	0x20000550
 8001488:	20000540 	.word	0x20000540
 800148c:	20000458 	.word	0x20000458
 8001490:	20000488 	.word	0x20000488
 8001494:	20000530 	.word	0x20000530
 8001498:	200004f8 	.word	0x200004f8
 800149c:	20000538 	.word	0x20000538
								{
									calc=fabs(distance_array2[i+1]-distance_array2[i]); //odliczenie przyblizonego pola trapezu lub trojkata dla skrajnych pomiarow
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a31      	ldr	r2, [pc, #196]	; (800156c <obliczenia+0x3bc>)
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <obliczenia+0x3bc>)
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ba:	f7fe fe55 	bl	8000168 <__aeabi_dsub>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <obliczenia+0x3c0>)
 80014cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014d0:	e9c3 1200 	strd	r1, r2, [r3]
									Area_t=Area_t+sensor_gap[i]*(distance_array2[i]+0.5*calc);			
 80014d4:	4a27      	ldr	r2, [pc, #156]	; (8001574 <obliczenia+0x3c4>)
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	4413      	add	r3, r2
 80014dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014e0:	4a22      	ldr	r2, [pc, #136]	; (800156c <obliczenia+0x3bc>)
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <obliczenia+0x3c0>)
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <obliczenia+0x3c8>)
 80014f8:	f7fe ffee 	bl	80004d8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4640      	mov	r0, r8
 8001502:	4649      	mov	r1, r9
 8001504:	f7fe fe32 	bl	800016c <__adddf3>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4620      	mov	r0, r4
 800150e:	4629      	mov	r1, r5
 8001510:	f7fe ffe2 	bl	80004d8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <obliczenia+0x3cc>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe fe23 	bl	800016c <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4914      	ldr	r1, [pc, #80]	; (800157c <obliczenia+0x3cc>)
 800152c:	e9c1 2300 	strd	r2, r3, [r1]
							for(int i=0;i<6;i++)
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3301      	adds	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	2b05      	cmp	r3, #5
 800153a:	ddb1      	ble.n	80014a0 <obliczenia+0x2f0>
								}		
							if (czujnik==0)	
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <obliczenia+0x3d0>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10e      	bne.n	8001562 <obliczenia+0x3b2>
								Volume=fabs(Area_t); //wartosc wysylana - pole przekroju
 8001544:	4b0d      	ldr	r3, [pc, #52]	; (800157c <obliczenia+0x3cc>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	603a      	str	r2, [r7, #0]
 800154c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <obliczenia+0x3d4>)
 8001554:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001558:	e9c3 1200 	strd	r1, r2, [r3]
					}
				else
				{
				zeruj();
				}
	}
 800155c:	e001      	b.n	8001562 <obliczenia+0x3b2>
				zeruj();
 800155e:	f7ff fd1b 	bl	8000f98 <zeruj>
	}
 8001562:	bf00      	nop
 8001564:	3738      	adds	r7, #56	; 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800156c:	200004f8 	.word	0x200004f8
 8001570:	20000608 	.word	0x20000608
 8001574:	20000458 	.word	0x20000458
 8001578:	3fe00000 	.word	0x3fe00000
 800157c:	20000538 	.word	0x20000538
 8001580:	200005fc 	.word	0x200005fc
 8001584:	20000548 	.word	0x20000548

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		PB8=PB8^1;
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <Error_Handler+0x20>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <Error_Handler+0x20>)
 8001596:	f083 0301 	eor.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 800159c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015a0:	f000 fa76 	bl	8001a90 <HAL_Delay>
		PB8=PB8^1;
 80015a4:	e7f4      	b.n	8001590 <Error_Handler+0x8>
 80015a6:	bf00      	nop
 80015a8:	422181a0 	.word	0x422181a0

080015ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_MspInit+0x54>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <HAL_MspInit+0x54>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_MspInit+0x54>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_MspInit+0x54>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_MspInit+0x54>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_MspInit+0x54>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_MspInit+0x58>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_MspInit+0x58>)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000

08001608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a15      	ldr	r2, [pc, #84]	; (8001678 <HAL_I2C_MspInit+0x70>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d123      	bne.n	8001670 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_I2C_MspInit+0x74>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <HAL_I2C_MspInit+0x74>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_I2C_MspInit+0x74>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001640:	23c0      	movs	r3, #192	; 0xc0
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	4619      	mov	r1, r3
 8001652:	480b      	ldr	r0, [pc, #44]	; (8001680 <HAL_I2C_MspInit+0x78>)
 8001654:	f000 fbfe 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_I2C_MspInit+0x74>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_I2C_MspInit+0x74>)
 800165e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001662:	61d3      	str	r3, [r2, #28]
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_I2C_MspInit+0x74>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40005400 	.word	0x40005400
 800167c:	40021000 	.word	0x40021000
 8001680:	40010c00 	.word	0x40010c00

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a20      	ldr	r2, [pc, #128]	; (8001720 <HAL_UART_MspInit+0x9c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d139      	bne.n	8001718 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_UART_MspInit+0xa0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <HAL_UART_MspInit+0xa0>)
 80016aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_UART_MspInit+0xa0>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b19      	ldr	r3, [pc, #100]	; (8001724 <HAL_UART_MspInit+0xa0>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a18      	ldr	r2, [pc, #96]	; (8001724 <HAL_UART_MspInit+0xa0>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_UART_MspInit+0xa0>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	480f      	ldr	r0, [pc, #60]	; (8001728 <HAL_UART_MspInit+0xa4>)
 80016ea:	f000 fbb3 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	4809      	ldr	r0, [pc, #36]	; (8001728 <HAL_UART_MspInit+0xa4>)
 8001704:	f000 fba6 	bl	8001e54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	2025      	movs	r0, #37	; 0x25
 800170e:	f000 faba 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001712:	2025      	movs	r0, #37	; 0x25
 8001714:	f000 fad3 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40013800 	.word	0x40013800
 8001724:	40021000 	.word	0x40021000
 8001728:	40010800 	.word	0x40010800

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>
	...

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
		PB8=PB8^1;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HardFault_Handler+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HardFault_Handler+0x1c>)
 800173e:	f083 0301 	eor.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 8001744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001748:	f000 f9a2 	bl	8001a90 <HAL_Delay>
		PB8=PB8^1;
 800174c:	e7f4      	b.n	8001738 <HardFault_Handler+0x4>
 800174e:	bf00      	nop
 8001750:	422181a0 	.word	0x422181a0

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>
	...

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
		PB8=PB8^1;
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <BusFault_Handler+0x1c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <BusFault_Handler+0x1c>)
 8001766:	f083 0301 	eor.w	r3, r3, #1
 800176a:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 800176c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001770:	f000 f98e 	bl	8001a90 <HAL_Delay>
		PB8=PB8^1;
 8001774:	e7f4      	b.n	8001760 <BusFault_Handler+0x4>
 8001776:	bf00      	nop
 8001778:	422181a0 	.word	0x422181a0

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
		PB8=PB8^1;
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <UsageFault_Handler+0x1c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a04      	ldr	r2, [pc, #16]	; (8001798 <UsageFault_Handler+0x1c>)
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	6013      	str	r3, [r2, #0]
		HAL_Delay(1000);
 800178c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001790:	f000 f97e 	bl	8001a90 <HAL_Delay>
		PB8=PB8^1;
 8001794:	e7f4      	b.n	8001780 <UsageFault_Handler+0x4>
 8001796:	bf00      	nop
 8001798:	422181a0 	.word	0x422181a0

0800179c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c4:	f000 f948 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
	
  /* USER CODE END SysTick_IRQn 1 */
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017d2:	f001 fe0c 	bl	80033ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000be8 	.word	0x20000be8

080017e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <USART1_IRQHandler+0x10>)
 80017e6:	f003 fed5 	bl	8005594 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000410 	.word	0x20000410

080017f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
	return 1;
 80017f8:	2301      	movs	r3, #1
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <_kill>:

int _kill(int pid, int sig)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800180c:	f009 f9a2 	bl	800ab54 <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	2216      	movs	r2, #22
 8001814:	601a      	str	r2, [r3, #0]
	return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_exit>:

void _exit (int status)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800182a:	f04f 31ff 	mov.w	r1, #4294967295
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffe7 	bl	8001802 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001834:	e7fe      	b.n	8001834 <_exit+0x12>

08001836 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e00a      	b.n	800185e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001848:	f3af 8000 	nop.w
 800184c:	4601      	mov	r1, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	60ba      	str	r2, [r7, #8]
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	429a      	cmp	r2, r3
 8001864:	dbf0      	blt.n	8001848 <_read+0x12>
	}

return len;
 8001866:	687b      	ldr	r3, [r7, #4]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	e009      	b.n	8001896 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	60ba      	str	r2, [r7, #8]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	dbf1      	blt.n	8001882 <_write+0x12>
	}
	return len;
 800189e:	687b      	ldr	r3, [r7, #4]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3718      	adds	r7, #24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_close>:

int _close(int file)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
 80018c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ce:	605a      	str	r2, [r3, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <_isatty>:

int _isatty(int file)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	return 1;
 80018e4:	2301      	movs	r3, #1
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
	return 0;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001910:	4a14      	ldr	r2, [pc, #80]	; (8001964 <_sbrk+0x5c>)
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <_sbrk+0x60>)
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <_sbrk+0x64>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <_sbrk+0x64>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <_sbrk+0x68>)
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <_sbrk+0x64>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	429a      	cmp	r2, r3
 8001936:	d207      	bcs.n	8001948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001938:	f009 f90c 	bl	800ab54 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	220c      	movs	r2, #12
 8001940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
 8001946:	e009      	b.n	800195c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <_sbrk+0x64>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <_sbrk+0x64>)
 8001958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20005000 	.word	0x20005000
 8001968:	00000400 	.word	0x00000400
 800196c:	20000624 	.word	0x20000624
 8001970:	20001108 	.word	0x20001108

08001974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019a6:	f7ff ffe5 	bl	8001974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f009 f8d9 	bl	800ab60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ae:	f7ff f86b 	bl	8000a88 <main>
  bx lr
 80019b2:	4770      	bx	lr
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	200003a0 	.word	0x200003a0
  ldr r2, =_sidata
 80019bc:	0800f0e8 	.word	0x0800f0e8
  ldr r2, =_sbss
 80019c0:	200003a0 	.word	0x200003a0
  ldr r4, =_ebss
 80019c4:	20001104 	.word	0x20001104

080019c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_2_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x28>)
 80019d6:	f043 0310 	orr.w	r3, r3, #16
 80019da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f947 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff fde0 	bl	80015ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f95f 	bl	8001cda <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f927 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000054 	.word	0x20000054
 8001a50:	2000005c 	.word	0x2000005c
 8001a54:	20000058 	.word	0x20000058

08001a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x1c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x20>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x20>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	2000005c 	.word	0x2000005c
 8001a78:	20000628 	.word	0x20000628

08001a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <HAL_GetTick+0x10>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr
 8001a8c:	20000628 	.word	0x20000628

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffe0 	bl	8001a7c <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000005c 	.word	0x2000005c

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4906      	ldr	r1, [pc, #24]	; (8001b70 <__NVIC_EnableIRQ+0x34>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c50:	f7ff ff90 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff2d 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff42 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff90 	bl	8001bc8 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5f 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff35 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa2 	bl	8001c2c <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d008      	beq.n	8001d1a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e020      	b.n	8001d5c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 020e 	bic.w	r2, r2, #14
 8001d28:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d005      	beq.n	8001d8a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2204      	movs	r2, #4
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e051      	b.n	8001e2e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 020e 	bic.w	r2, r2, #14
 8001d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_DMA_Abort_IT+0xd0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d029      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xa0>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_DMA_Abort_IT+0xd4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d022      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x9c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_DMA_Abort_IT+0xd8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d01a      	beq.n	8001dfe <HAL_DMA_Abort_IT+0x96>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_DMA_Abort_IT+0xdc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d012      	beq.n	8001df8 <HAL_DMA_Abort_IT+0x90>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_DMA_Abort_IT+0xe0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00a      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x8a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_DMA_Abort_IT+0xe4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d102      	bne.n	8001dec <HAL_DMA_Abort_IT+0x84>
 8001de6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dea:	e00e      	b.n	8001e0a <HAL_DMA_Abort_IT+0xa2>
 8001dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df0:	e00b      	b.n	8001e0a <HAL_DMA_Abort_IT+0xa2>
 8001df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df6:	e008      	b.n	8001e0a <HAL_DMA_Abort_IT+0xa2>
 8001df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfc:	e005      	b.n	8001e0a <HAL_DMA_Abort_IT+0xa2>
 8001dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e02:	e002      	b.n	8001e0a <HAL_DMA_Abort_IT+0xa2>
 8001e04:	2310      	movs	r3, #16
 8001e06:	e000      	b.n	8001e0a <HAL_DMA_Abort_IT+0xa2>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_DMA_Abort_IT+0xe8>)
 8001e0c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	4798      	blx	r3
    } 
  }
  return status;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40020008 	.word	0x40020008
 8001e3c:	4002001c 	.word	0x4002001c
 8001e40:	40020030 	.word	0x40020030
 8001e44:	40020044 	.word	0x40020044
 8001e48:	40020058 	.word	0x40020058
 8001e4c:	4002006c 	.word	0x4002006c
 8001e50:	40020000 	.word	0x40020000

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b08b      	sub	sp, #44	; 0x2c
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e66:	e169      	b.n	800213c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f040 8158 	bne.w	8002136 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4a9a      	ldr	r2, [pc, #616]	; (80020f4 <HAL_GPIO_Init+0x2a0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d05e      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001e90:	4a98      	ldr	r2, [pc, #608]	; (80020f4 <HAL_GPIO_Init+0x2a0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d875      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001e96:	4a98      	ldr	r2, [pc, #608]	; (80020f8 <HAL_GPIO_Init+0x2a4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d058      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001e9c:	4a96      	ldr	r2, [pc, #600]	; (80020f8 <HAL_GPIO_Init+0x2a4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d86f      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ea2:	4a96      	ldr	r2, [pc, #600]	; (80020fc <HAL_GPIO_Init+0x2a8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d052      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001ea8:	4a94      	ldr	r2, [pc, #592]	; (80020fc <HAL_GPIO_Init+0x2a8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d869      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001eae:	4a94      	ldr	r2, [pc, #592]	; (8002100 <HAL_GPIO_Init+0x2ac>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04c      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001eb4:	4a92      	ldr	r2, [pc, #584]	; (8002100 <HAL_GPIO_Init+0x2ac>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d863      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001eba:	4a92      	ldr	r2, [pc, #584]	; (8002104 <HAL_GPIO_Init+0x2b0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d046      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
 8001ec0:	4a90      	ldr	r2, [pc, #576]	; (8002104 <HAL_GPIO_Init+0x2b0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d85d      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ec6:	2b12      	cmp	r3, #18
 8001ec8:	d82a      	bhi.n	8001f20 <HAL_GPIO_Init+0xcc>
 8001eca:	2b12      	cmp	r3, #18
 8001ecc:	d859      	bhi.n	8001f82 <HAL_GPIO_Init+0x12e>
 8001ece:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <HAL_GPIO_Init+0x80>)
 8001ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed4:	08001f4f 	.word	0x08001f4f
 8001ed8:	08001f29 	.word	0x08001f29
 8001edc:	08001f3b 	.word	0x08001f3b
 8001ee0:	08001f7d 	.word	0x08001f7d
 8001ee4:	08001f83 	.word	0x08001f83
 8001ee8:	08001f83 	.word	0x08001f83
 8001eec:	08001f83 	.word	0x08001f83
 8001ef0:	08001f83 	.word	0x08001f83
 8001ef4:	08001f83 	.word	0x08001f83
 8001ef8:	08001f83 	.word	0x08001f83
 8001efc:	08001f83 	.word	0x08001f83
 8001f00:	08001f83 	.word	0x08001f83
 8001f04:	08001f83 	.word	0x08001f83
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f83 	.word	0x08001f83
 8001f10:	08001f83 	.word	0x08001f83
 8001f14:	08001f83 	.word	0x08001f83
 8001f18:	08001f31 	.word	0x08001f31
 8001f1c:	08001f45 	.word	0x08001f45
 8001f20:	4a79      	ldr	r2, [pc, #484]	; (8002108 <HAL_GPIO_Init+0x2b4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f26:	e02c      	b.n	8001f82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	623b      	str	r3, [r7, #32]
          break;
 8001f2e:	e029      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	3304      	adds	r3, #4
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e024      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	3308      	adds	r3, #8
 8001f40:	623b      	str	r3, [r7, #32]
          break;
 8001f42:	e01f      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	623b      	str	r3, [r7, #32]
          break;
 8001f4c:	e01a      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f56:	2304      	movs	r3, #4
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e013      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f64:	2308      	movs	r3, #8
 8001f66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	611a      	str	r2, [r3, #16]
          break;
 8001f6e:	e009      	b.n	8001f84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f70:	2308      	movs	r3, #8
 8001f72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	615a      	str	r2, [r3, #20]
          break;
 8001f7a:	e003      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x130>
          break;
 8001f82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2bff      	cmp	r3, #255	; 0xff
 8001f88:	d801      	bhi.n	8001f8e <HAL_GPIO_Init+0x13a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	e001      	b.n	8001f92 <HAL_GPIO_Init+0x13e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3304      	adds	r3, #4
 8001f92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d802      	bhi.n	8001fa0 <HAL_GPIO_Init+0x14c>
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	e002      	b.n	8001fa6 <HAL_GPIO_Init+0x152>
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	3b08      	subs	r3, #8
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	210f      	movs	r1, #15
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	6a39      	ldr	r1, [r7, #32]
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80b1 	beq.w	8002136 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	; (800210c <HAL_GPIO_Init+0x2b8>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a4c      	ldr	r2, [pc, #304]	; (800210c <HAL_GPIO_Init+0x2b8>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <HAL_GPIO_Init+0x2b8>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fec:	4a48      	ldr	r2, [pc, #288]	; (8002110 <HAL_GPIO_Init+0x2bc>)
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	220f      	movs	r2, #15
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a40      	ldr	r2, [pc, #256]	; (8002114 <HAL_GPIO_Init+0x2c0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <HAL_GPIO_Init+0x1ec>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3f      	ldr	r2, [pc, #252]	; (8002118 <HAL_GPIO_Init+0x2c4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00d      	beq.n	800203c <HAL_GPIO_Init+0x1e8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3e      	ldr	r2, [pc, #248]	; (800211c <HAL_GPIO_Init+0x2c8>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <HAL_GPIO_Init+0x1e4>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3d      	ldr	r2, [pc, #244]	; (8002120 <HAL_GPIO_Init+0x2cc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d101      	bne.n	8002034 <HAL_GPIO_Init+0x1e0>
 8002030:	2303      	movs	r3, #3
 8002032:	e006      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002034:	2304      	movs	r3, #4
 8002036:	e004      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002038:	2302      	movs	r3, #2
 800203a:	e002      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 800203c:	2301      	movs	r3, #1
 800203e:	e000      	b.n	8002042 <HAL_GPIO_Init+0x1ee>
 8002040:	2300      	movs	r3, #0
 8002042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002044:	f002 0203 	and.w	r2, r2, #3
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	4093      	lsls	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002052:	492f      	ldr	r1, [pc, #188]	; (8002110 <HAL_GPIO_Init+0x2bc>)
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800206c:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	492c      	ldr	r1, [pc, #176]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
 8002078:	e006      	b.n	8002088 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	43db      	mvns	r3, r3
 8002082:	4928      	ldr	r1, [pc, #160]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8002084:	4013      	ands	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002094:	4b23      	ldr	r3, [pc, #140]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
 80020a0:	e006      	b.n	80020b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	491e      	ldr	r1, [pc, #120]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4918      	ldr	r1, [pc, #96]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	4914      	ldr	r1, [pc, #80]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d021      	beq.n	8002128 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	490e      	ldr	r1, [pc, #56]	; (8002124 <HAL_GPIO_Init+0x2d0>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60cb      	str	r3, [r1, #12]
 80020f0:	e021      	b.n	8002136 <HAL_GPIO_Init+0x2e2>
 80020f2:	bf00      	nop
 80020f4:	10320000 	.word	0x10320000
 80020f8:	10310000 	.word	0x10310000
 80020fc:	10220000 	.word	0x10220000
 8002100:	10210000 	.word	0x10210000
 8002104:	10120000 	.word	0x10120000
 8002108:	10110000 	.word	0x10110000
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	40010800 	.word	0x40010800
 8002118:	40010c00 	.word	0x40010c00
 800211c:	40011000 	.word	0x40011000
 8002120:	40011400 	.word	0x40011400
 8002124:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_GPIO_Init+0x304>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	43db      	mvns	r3, r3
 8002130:	4909      	ldr	r1, [pc, #36]	; (8002158 <HAL_GPIO_Init+0x304>)
 8002132:	4013      	ands	r3, r2
 8002134:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	3301      	adds	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	fa22 f303 	lsr.w	r3, r2, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	f47f ae8e 	bne.w	8001e68 <HAL_GPIO_Init+0x14>
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	372c      	adds	r7, #44	; 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40010400 	.word	0x40010400

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e12b      	b.n	80023f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fa28 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2224      	movs	r2, #36	; 0x24
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021f0:	f003 f864 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 80021f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	4a81      	ldr	r2, [pc, #516]	; (8002400 <HAL_I2C_Init+0x274>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d807      	bhi.n	8002210 <HAL_I2C_Init+0x84>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4a80      	ldr	r2, [pc, #512]	; (8002404 <HAL_I2C_Init+0x278>)
 8002204:	4293      	cmp	r3, r2
 8002206:	bf94      	ite	ls
 8002208:	2301      	movls	r3, #1
 800220a:	2300      	movhi	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	e006      	b.n	800221e <HAL_I2C_Init+0x92>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4a7d      	ldr	r2, [pc, #500]	; (8002408 <HAL_I2C_Init+0x27c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	bf94      	ite	ls
 8002218:	2301      	movls	r3, #1
 800221a:	2300      	movhi	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e0e7      	b.n	80023f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a78      	ldr	r2, [pc, #480]	; (800240c <HAL_I2C_Init+0x280>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0c9b      	lsrs	r3, r3, #18
 8002230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4a6a      	ldr	r2, [pc, #424]	; (8002400 <HAL_I2C_Init+0x274>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d802      	bhi.n	8002260 <HAL_I2C_Init+0xd4>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3301      	adds	r3, #1
 800225e:	e009      	b.n	8002274 <HAL_I2C_Init+0xe8>
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	4a69      	ldr	r2, [pc, #420]	; (8002410 <HAL_I2C_Init+0x284>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	3301      	adds	r3, #1
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	430b      	orrs	r3, r1
 800227a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	495c      	ldr	r1, [pc, #368]	; (8002400 <HAL_I2C_Init+0x274>)
 8002290:	428b      	cmp	r3, r1
 8002292:	d819      	bhi.n	80022c8 <HAL_I2C_Init+0x13c>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e59      	subs	r1, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fbb1 f3f3 	udiv	r3, r1, r3
 80022a2:	1c59      	adds	r1, r3, #1
 80022a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022a8:	400b      	ands	r3, r1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_I2C_Init+0x138>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1e59      	subs	r1, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	e051      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 80022c4:	2304      	movs	r3, #4
 80022c6:	e04f      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d111      	bne.n	80022f4 <HAL_I2C_Init+0x168>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	1e58      	subs	r0, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	e012      	b.n	800231a <HAL_I2C_Init+0x18e>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1e58      	subs	r0, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	0099      	lsls	r1, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	fbb0 f3f3 	udiv	r3, r0, r3
 800230a:	3301      	adds	r3, #1
 800230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Init+0x196>
 800231e:	2301      	movs	r3, #1
 8002320:	e022      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10e      	bne.n	8002348 <HAL_I2C_Init+0x1bc>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e58      	subs	r0, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6859      	ldr	r1, [r3, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	440b      	add	r3, r1
 8002338:	fbb0 f3f3 	udiv	r3, r0, r3
 800233c:	3301      	adds	r3, #1
 800233e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002346:	e00f      	b.n	8002368 <HAL_I2C_Init+0x1dc>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	0099      	lsls	r1, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	6809      	ldr	r1, [r1, #0]
 800236c:	4313      	orrs	r3, r2
 800236e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6911      	ldr	r1, [r2, #16]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68d2      	ldr	r2, [r2, #12]
 80023a2:	4311      	orrs	r1, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	430b      	orrs	r3, r1
 80023aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0201 	orr.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	000186a0 	.word	0x000186a0
 8002404:	001e847f 	.word	0x001e847f
 8002408:	003d08ff 	.word	0x003d08ff
 800240c:	431bde83 	.word	0x431bde83
 8002410:	10624dd3 	.word	0x10624dd3

08002414 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	4608      	mov	r0, r1
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	4603      	mov	r3, r0
 8002424:	817b      	strh	r3, [r7, #10]
 8002426:	460b      	mov	r3, r1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800242e:	f7ff fb25 	bl	8001a7c <HAL_GetTick>
 8002432:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b20      	cmp	r3, #32
 800243e:	f040 80d9 	bne.w	80025f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2319      	movs	r3, #25
 8002448:	2201      	movs	r2, #1
 800244a:	496d      	ldr	r1, [pc, #436]	; (8002600 <HAL_I2C_Mem_Write+0x1ec>)
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fcc1 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
 800245a:	e0cc      	b.n	80025f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_I2C_Mem_Write+0x56>
 8002466:	2302      	movs	r3, #2
 8002468:	e0c5      	b.n	80025f6 <HAL_I2C_Mem_Write+0x1e2>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b01      	cmp	r3, #1
 800247e:	d007      	beq.n	8002490 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2221      	movs	r2, #33	; 0x21
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2240      	movs	r2, #64	; 0x40
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a3a      	ldr	r2, [r7, #32]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a4d      	ldr	r2, [pc, #308]	; (8002604 <HAL_I2C_Mem_Write+0x1f0>)
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024d2:	88f8      	ldrh	r0, [r7, #6]
 80024d4:	893a      	ldrh	r2, [r7, #8]
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4603      	mov	r3, r0
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 faf8 	bl	8002ad8 <I2C_RequestMemoryWrite>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d052      	beq.n	8002594 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e081      	b.n	80025f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fd42 	bl	8002f80 <I2C_WaitOnTXEFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00d      	beq.n	800251e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2b04      	cmp	r3, #4
 8002508:	d107      	bne.n	800251a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002518:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e06b      	b.n	80025f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b04      	cmp	r3, #4
 800255a:	d11b      	bne.n	8002594 <HAL_I2C_Mem_Write+0x180>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	d017      	beq.n	8002594 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1aa      	bne.n	80024f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 fd2e 	bl	8003002 <I2C_WaitOnBTFFlagUntilTimeout>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00d      	beq.n	80025c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d107      	bne.n	80025c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e016      	b.n	80025f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025f0:	2300      	movs	r3, #0
 80025f2:	e000      	b.n	80025f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025f4:	2302      	movs	r3, #2
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	00100002 	.word	0x00100002
 8002604:	ffff0000 	.word	0xffff0000

08002608 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08c      	sub	sp, #48	; 0x30
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	460b      	mov	r3, r1
 800261c:	813b      	strh	r3, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002626:	f7ff fa29 	bl	8001a7c <HAL_GetTick>
 800262a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b20      	cmp	r3, #32
 8002636:	f040 8244 	bne.w	8002ac2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2319      	movs	r3, #25
 8002640:	2201      	movs	r2, #1
 8002642:	4982      	ldr	r1, [pc, #520]	; (800284c <HAL_I2C_Mem_Read+0x244>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fbc5 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
 8002652:	e237      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Mem_Read+0x5a>
 800265e:	2302      	movs	r3, #2
 8002660:	e230      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b01      	cmp	r3, #1
 8002676:	d007      	beq.n	8002688 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2222      	movs	r2, #34	; 0x22
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a62      	ldr	r2, [pc, #392]	; (8002850 <HAL_I2C_Mem_Read+0x248>)
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	893a      	ldrh	r2, [r7, #8]
 80026ce:	8979      	ldrh	r1, [r7, #10]
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4603      	mov	r3, r0
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fa92 	bl	8002c04 <I2C_RequestMemoryRead>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1ec      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d113      	bne.n	800271a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e1c0      	b.n	8002a9c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	2b01      	cmp	r3, #1
 8002720:	d11e      	bne.n	8002760 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002732:	b672      	cpsid	i
}
 8002734:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800275c:	b662      	cpsie	i
}
 800275e:	e035      	b.n	80027cc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11e      	bne.n	80027a6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002776:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027a2:	b662      	cpsie	i
}
 80027a4:	e012      	b.n	80027cc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027cc:	e166      	b.n	8002a9c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	f200 811f 	bhi.w	8002a16 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d123      	bne.n	8002828 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fc4d 	bl	8003084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e167      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691a      	ldr	r2, [r3, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002810:	3b01      	subs	r3, #1
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002826:	e139      	b.n	8002a9c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	2b02      	cmp	r3, #2
 800282e:	d152      	bne.n	80028d6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002836:	2200      	movs	r2, #0
 8002838:	4906      	ldr	r1, [pc, #24]	; (8002854 <HAL_I2C_Mem_Read+0x24c>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 faca 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e13c      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
 800284a:	bf00      	nop
 800284c:	00100002 	.word	0x00100002
 8002850:	ffff0000 	.word	0xffff0000
 8002854:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002858:	b672      	cpsid	i
}
 800285a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	3b01      	subs	r3, #1
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800289e:	b662      	cpsie	i
}
 80028a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d4:	e0e2      	b.n	8002a9c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	2200      	movs	r2, #0
 80028de:	497b      	ldr	r1, [pc, #492]	; (8002acc <HAL_I2C_Mem_Read+0x4c4>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fa77 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0e9      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002900:	b672      	cpsid	i
}
 8002902:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002936:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_I2C_Mem_Read+0x4c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_I2C_Mem_Read+0x4cc>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0a1a      	lsrs	r2, r3, #8
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00da      	lsls	r2, r3, #3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	3b01      	subs	r3, #1
 8002954:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d118      	bne.n	800298e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800297e:	b662      	cpsie	i
}
 8002980:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e09a      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b04      	cmp	r3, #4
 800299a:	d1d9      	bne.n	8002950 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029de:	b662      	cpsie	i
}
 80029e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	1c5a      	adds	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a14:	e042      	b.n	8002a9c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fb32 	bl	8003084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e04c      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	b2d2      	uxtb	r2, r2
 8002a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d118      	bne.n	8002a9c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f47f ae94 	bne.w	80027ce <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002ac2:	2302      	movs	r3, #2
  }
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3728      	adds	r7, #40	; 0x28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	00010004 	.word	0x00010004
 8002ad0:	20000054 	.word	0x20000054
 8002ad4:	14f8b589 	.word	0x14f8b589

08002ad8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f960 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00d      	beq.n	8002b36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b28:	d103      	bne.n	8002b32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e05f      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b36:	897b      	ldrh	r3, [r7, #10]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	6a3a      	ldr	r2, [r7, #32]
 8002b4a:	492d      	ldr	r1, [pc, #180]	; (8002c00 <I2C_RequestMemoryWrite+0x128>)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 f998 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e04c      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	617b      	str	r3, [r7, #20]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	6a39      	ldr	r1, [r7, #32]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa02 	bl	8002f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00d      	beq.n	8002b9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d107      	bne.n	8002b9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e02b      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d105      	bne.n	8002bb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba4:	893b      	ldrh	r3, [r7, #8]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]
 8002bae:	e021      	b.n	8002bf4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f9dc 	bl	8002f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d107      	bne.n	8002be6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e005      	b.n	8002bf6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bea:	893b      	ldrh	r3, [r7, #8]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	00010002 	.word	0x00010002

08002c04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	460b      	mov	r3, r1
 8002c18:	813b      	strh	r3, [r7, #8]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8c2 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d103      	bne.n	8002c6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e0aa      	b.n	8002dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	6a3a      	ldr	r2, [r7, #32]
 8002c86:	4952      	ldr	r1, [pc, #328]	; (8002dd0 <I2C_RequestMemoryRead+0x1cc>)
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 f8fa 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e097      	b.n	8002dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb0:	6a39      	ldr	r1, [r7, #32]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f964 	bl	8002f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00d      	beq.n	8002cda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d107      	bne.n	8002cd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e076      	b.n	8002dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce0:	893b      	ldrh	r3, [r7, #8]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	e021      	b.n	8002d30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cec:	893b      	ldrh	r3, [r7, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	6a39      	ldr	r1, [r7, #32]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f93e 	bl	8002f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00d      	beq.n	8002d26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d107      	bne.n	8002d22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e050      	b.n	8002dc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d26:	893b      	ldrh	r3, [r7, #8]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d32:	6a39      	ldr	r1, [r7, #32]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f923 	bl	8002f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e035      	b.n	8002dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f82b 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00d      	beq.n	8002da0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d92:	d103      	bne.n	8002d9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e013      	b.n	8002dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002da0:	897b      	ldrh	r3, [r7, #10]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	6a3a      	ldr	r2, [r7, #32]
 8002db4:	4906      	ldr	r1, [pc, #24]	; (8002dd0 <I2C_RequestMemoryRead+0x1cc>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f863 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	00010002 	.word	0x00010002

08002dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	e025      	b.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d021      	beq.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dee:	f7fe fe45 	bl	8001a7c <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d116      	bne.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e023      	b.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d10d      	bne.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	e00c      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d0b6      	beq.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e90:	e051      	b.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea0:	d123      	bne.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f043 0204 	orr.w	r2, r3, #4
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e046      	b.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d021      	beq.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fdc3 	bl	8001a7c <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d116      	bne.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e020      	b.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d10c      	bne.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e00b      	b.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d18d      	bne.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f8c:	e02d      	b.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f8ce 	bl	8003130 <I2C_IsAcknowledgeFailed>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e02d      	b.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d021      	beq.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fd69 	bl	8001a7c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e007      	b.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d1ca      	bne.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300e:	e02d      	b.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f88d 	bl	8003130 <I2C_IsAcknowledgeFailed>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e02d      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003026:	d021      	beq.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003028:	f7fe fd28 	bl	8001a7c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	d302      	bcc.n	800303e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e007      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b04      	cmp	r3, #4
 8003078:	d1ca      	bne.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003090:	e042      	b.n	8003118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d119      	bne.n	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e029      	b.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d4:	f7fe fcd2 	bl	8001a7c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d302      	bcc.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d1b5      	bne.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003146:	d11b      	bne.n	8003180 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003150:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800318c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318e:	b08b      	sub	sp, #44	; 0x2c
 8003190:	af06      	add	r7, sp, #24
 8003192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0fd      	b.n	800339a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f007 fa24 	bl	800a600 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2203      	movs	r2, #3
 80031bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 fdb9 	bl	8005d3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	687e      	ldr	r6, [r7, #4]
 80031d2:	466d      	mov	r5, sp
 80031d4:	f106 0410 	add.w	r4, r6, #16
 80031d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	602b      	str	r3, [r5, #0]
 80031e0:	1d33      	adds	r3, r6, #4
 80031e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e4:	6838      	ldr	r0, [r7, #0]
 80031e6:	f002 fd83 	bl	8005cf0 <USB_CoreInit>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0ce      	b.n	800339a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fdb4 	bl	8005d70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e04c      	b.n	80032a8 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	440b      	add	r3, r1
 800321e:	3301      	adds	r3, #1
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	440b      	add	r3, r1
 8003234:	7bfa      	ldrb	r2, [r7, #15]
 8003236:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	b298      	uxth	r0, r3
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	3336      	adds	r3, #54	; 0x36
 800324c:	4602      	mov	r2, r0
 800324e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	3303      	adds	r3, #3
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	3338      	adds	r3, #56	; 0x38
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	333c      	adds	r3, #60	; 0x3c
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	3340      	adds	r3, #64	; 0x40
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	3301      	adds	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d3ad      	bcc.n	800320e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
 80032b6:	e044      	b.n	8003342 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032b8:	7bfa      	ldrb	r2, [r7, #15]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	440b      	add	r3, r1
 80032c6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032e4:	7bfa      	ldrb	r2, [r7, #15]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	440b      	add	r3, r1
 800331e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003326:	7bfa      	ldrb	r2, [r7, #15]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	3301      	adds	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3b5      	bcc.n	80032b8 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	687e      	ldr	r6, [r7, #4]
 8003354:	466d      	mov	r5, sp
 8003356:	f106 0410 	add.w	r4, r6, #16
 800335a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800335c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	602b      	str	r3, [r5, #0]
 8003362:	1d33      	adds	r3, r6, #4
 8003364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003366:	6838      	ldr	r0, [r7, #0]
 8003368:	f002 fd0e 	bl	8005d88 <USB_DevInit>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d005      	beq.n	800337e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e00d      	b.n	800339a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f005 f9c0 	bl	8008718 <USB_DevDisconnect>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_PCD_Start+0x16>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e016      	b.n	80033e6 <HAL_PCD_Start+0x44>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fca3 	bl	8005d10 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033ca:	2101      	movs	r1, #1
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f007 fb8a 	bl	800aae6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f005 f994 	bl	8008704 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f005 f996 	bl	800872c <USB_ReadInterrupts>
 8003400:	4603      	mov	r3, r0
 8003402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340a:	d102      	bne.n	8003412 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fb5f 	bl	8003ad0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f005 f988 	bl	800872c <USB_ReadInterrupts>
 800341c:	4603      	mov	r3, r0
 800341e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003426:	d112      	bne.n	800344e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003430:	b29a      	uxth	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800343a:	b292      	uxth	r2, r2
 800343c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f007 f958 	bl	800a6f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003446:	2100      	movs	r1, #0
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f923 	bl	8003694 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f005 f96a 	bl	800872c <USB_ReadInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003462:	d10b      	bne.n	800347c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800346c:	b29a      	uxth	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003476:	b292      	uxth	r2, r2
 8003478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f005 f953 	bl	800872c <USB_ReadInterrupts>
 8003486:	4603      	mov	r3, r0
 8003488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800348c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003490:	d10b      	bne.n	80034aa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034a4:	b292      	uxth	r2, r2
 80034a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f005 f93c 	bl	800872c <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034be:	d126      	bne.n	800350e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0204 	bic.w	r2, r2, #4
 80034d2:	b292      	uxth	r2, r2
 80034d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0208 	bic.w	r2, r2, #8
 80034ea:	b292      	uxth	r2, r2
 80034ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f007 f939 	bl	800a768 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034fe:	b29a      	uxth	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003508:	b292      	uxth	r2, r2
 800350a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f005 f90a 	bl	800872c <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003522:	f040 8082 	bne.w	800362a <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003526:	2300      	movs	r3, #0
 8003528:	77fb      	strb	r3, [r7, #31]
 800352a:	e010      	b.n	800354e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	7ffb      	ldrb	r3, [r7, #31]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	441a      	add	r2, r3
 8003538:	7ffb      	ldrb	r3, [r7, #31]
 800353a:	8812      	ldrh	r2, [r2, #0]
 800353c:	b292      	uxth	r2, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	3320      	adds	r3, #32
 8003542:	443b      	add	r3, r7
 8003544:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003548:	7ffb      	ldrb	r3, [r7, #31]
 800354a:	3301      	adds	r3, #1
 800354c:	77fb      	strb	r3, [r7, #31]
 800354e:	7ffb      	ldrb	r3, [r7, #31]
 8003550:	2b07      	cmp	r3, #7
 8003552:	d9eb      	bls.n	800352c <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	b292      	uxth	r2, r2
 8003568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003574:	b29a      	uxth	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	b292      	uxth	r2, r2
 8003580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003584:	bf00      	nop
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800358e:	b29b      	uxth	r3, r3
 8003590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f6      	beq.n	8003586 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035aa:	b292      	uxth	r2, r2
 80035ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e00f      	b.n	80035d6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	4611      	mov	r1, r2
 80035be:	7ffa      	ldrb	r2, [r7, #31]
 80035c0:	0092      	lsls	r2, r2, #2
 80035c2:	440a      	add	r2, r1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	3320      	adds	r3, #32
 80035c8:	443b      	add	r3, r7
 80035ca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80035ce:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80035d0:	7ffb      	ldrb	r3, [r7, #31]
 80035d2:	3301      	adds	r3, #1
 80035d4:	77fb      	strb	r3, [r7, #31]
 80035d6:	7ffb      	ldrb	r3, [r7, #31]
 80035d8:	2b07      	cmp	r3, #7
 80035da:	d9ec      	bls.n	80035b6 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0208 	orr.w	r2, r2, #8
 80035ee:	b292      	uxth	r2, r2
 80035f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	b292      	uxth	r2, r2
 8003608:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0204 	orr.w	r2, r2, #4
 800361e:	b292      	uxth	r2, r2
 8003620:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f007 f885 	bl	800a734 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f005 f87c 	bl	800872c <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363e:	d10e      	bne.n	800365e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003652:	b292      	uxth	r2, r2
 8003654:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f007 f83e 	bl	800a6da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f005 f862 	bl	800872c <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003672:	d10b      	bne.n	800368c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800367c:	b29a      	uxth	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003686:	b292      	uxth	r2, r2
 8003688:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800368c:	bf00      	nop
 800368e:	3720      	adds	r7, #32
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_PCD_SetAddress+0x1a>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e013      	b.n	80036d6 <HAL_PCD_SetAddress+0x42>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	4611      	mov	r1, r2
 80036c6:	4618      	mov	r0, r3
 80036c8:	f005 f809 	bl	80086de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	4608      	mov	r0, r1
 80036e8:	4611      	mov	r1, r2
 80036ea:	461a      	mov	r2, r3
 80036ec:	4603      	mov	r3, r0
 80036ee:	70fb      	strb	r3, [r7, #3]
 80036f0:	460b      	mov	r3, r1
 80036f2:	803b      	strh	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	da0e      	bge.n	8003722 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	705a      	strb	r2, [r3, #1]
 8003720:	e00e      	b.n	8003740 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 0207 	and.w	r2, r3, #7
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	b2da      	uxtb	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800374c:	883a      	ldrh	r2, [r7, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	78ba      	ldrb	r2, [r7, #2]
 8003756:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800376a:	78bb      	ldrb	r3, [r7, #2]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d102      	bne.n	8003776 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_PCD_EP_Open+0xa6>
 8003780:	2302      	movs	r3, #2
 8003782:	e00e      	b.n	80037a2 <HAL_PCD_EP_Open+0xc4>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68f9      	ldr	r1, [r7, #12]
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fb18 	bl	8005dc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80037a0:	7afb      	ldrb	r3, [r7, #11]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
 80037b2:	460b      	mov	r3, r1
 80037b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	da0e      	bge.n	80037dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	705a      	strb	r2, [r3, #1]
 80037da:	e00e      	b.n	80037fa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 0207 	and.w	r2, r3, #7
 80037e2:	4613      	mov	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_PCD_EP_Close+0x6a>
 8003810:	2302      	movs	r3, #2
 8003812:	e00e      	b.n	8003832 <HAL_PCD_EP_Close+0x88>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68f9      	ldr	r1, [r7, #12]
 8003822:	4618      	mov	r0, r3
 8003824:	f002 fe3a 	bl	800649c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	460b      	mov	r3, r1
 8003848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	f003 0207 	and.w	r2, r3, #7
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4413      	add	r3, r2
 8003860:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2200      	movs	r2, #0
 8003878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800387a:	7afb      	ldrb	r3, [r7, #11]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	b2da      	uxtb	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003886:	7afb      	ldrb	r3, [r7, #11]
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	4618      	mov	r0, r3
 8003898:	f002 ffec 	bl	8006874 <USB_EPStartXfer>
 800389c:	e005      	b.n	80038aa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6979      	ldr	r1, [r7, #20]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f002 ffe5 	bl	8006874 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 0207 	and.w	r2, r3, #7
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
 80038ee:	460b      	mov	r3, r1
 80038f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f2:	7afb      	ldrb	r3, [r7, #11]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800392e:	7afb      	ldrb	r3, [r7, #11]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	b2da      	uxtb	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800393a:	7afb      	ldrb	r3, [r7, #11]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	4618      	mov	r0, r3
 800394c:	f002 ff92 	bl	8006874 <USB_EPStartXfer>
 8003950:	e005      	b.n	800395e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6979      	ldr	r1, [r7, #20]
 8003958:	4618      	mov	r0, r3
 800395a:	f002 ff8b 	bl	8006874 <USB_EPStartXfer>
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 0207 	and.w	r2, r3, #7
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	429a      	cmp	r2, r3
 8003980:	d901      	bls.n	8003986 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e04c      	b.n	8003a20 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da0e      	bge.n	80039ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	705a      	strb	r2, [r3, #1]
 80039aa:	e00c      	b.n	80039c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_PCD_EP_SetStall+0x7e>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e01c      	b.n	8003a20 <HAL_PCD_EP_SetStall+0xb8>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68f9      	ldr	r1, [r7, #12]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 fd75 	bl	80084e4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d108      	bne.n	8003a16 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f004 fe9a 	bl	800874a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	f003 020f 	and.w	r2, r3, #15
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d901      	bls.n	8003a46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e040      	b.n	8003ac8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	da0e      	bge.n	8003a6c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	705a      	strb	r2, [r3, #1]
 8003a6a:	e00e      	b.n	8003a8a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	f003 0207 	and.w	r2, r3, #7
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_PCD_EP_ClrStall+0x82>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e00e      	b.n	8003ac8 <HAL_PCD_EP_ClrStall+0xa0>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68f9      	ldr	r1, [r7, #12]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f004 fd63 	bl	8008584 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08e      	sub	sp, #56	; 0x38
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ad8:	e2ec      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ae2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003ae4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003af0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f040 8161 	bne.w	8003dbc <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003afa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d152      	bne.n	8003baa <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b14:	81fb      	strh	r3, [r7, #14]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	89fb      	ldrh	r3, [r7, #14]
 8003b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3328      	adds	r3, #40	; 0x28
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	3302      	adds	r3, #2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	441a      	add	r2, r3
 8003b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b66:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f006 fd9b 	bl	800a6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 829b 	beq.w	80040b4 <PCD_EP_ISR_Handler+0x5e4>
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 8296 	bne.w	80040b4 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ba8:	e284      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d034      	beq.n	8003c2e <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3306      	adds	r3, #6
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f004 fdf1 	bl	80087ea <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c14:	4013      	ands	r3, r2
 8003c16:	823b      	strh	r3, [r7, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	8a3a      	ldrh	r2, [r7, #16]
 8003c1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c22:	b292      	uxth	r2, r2
 8003c24:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f006 fd10 	bl	800a64c <HAL_PCD_SetupStageCallback>
 8003c2c:	e242      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f280 823e 	bge.w	80040b4 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c44:	4013      	ands	r3, r2
 8003c46:	83bb      	strh	r3, [r7, #28]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	8bba      	ldrh	r2, [r7, #28]
 8003c4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c52:	b292      	uxth	r2, r2
 8003c54:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	3306      	adds	r3, #6
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d019      	beq.n	8003cbe <PCD_EP_ISR_Handler+0x1ee>
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d015      	beq.n	8003cbe <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	6959      	ldr	r1, [r3, #20]
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f004 fda1 	bl	80087ea <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	441a      	add	r2, r3
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f006 fcd9 	bl	800a670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 81f2 	bne.w	80040b4 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d112      	bne.n	8003d1e <PCD_EP_ISR_Handler+0x24e>
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	e02f      	b.n	8003d7e <PCD_EP_ISR_Handler+0x2ae>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b3e      	cmp	r3, #62	; 0x3e
 8003d24:	d813      	bhi.n	8003d4e <PCD_EP_ISR_Handler+0x27e>
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <PCD_EP_ISR_Handler+0x270>
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	029b      	lsls	r3, r3, #10
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	e017      	b.n	8003d7e <PCD_EP_ISR_Handler+0x2ae>
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	095b      	lsrs	r3, r3, #5
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d102      	bne.n	8003d68 <PCD_EP_ISR_Handler+0x298>
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	3b01      	subs	r3, #1
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	029b      	lsls	r3, r3, #10
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	827b      	strh	r3, [r7, #18]
 8003d90:	8a7b      	ldrh	r3, [r7, #18]
 8003d92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d96:	827b      	strh	r3, [r7, #18]
 8003d98:	8a7b      	ldrh	r3, [r7, #18]
 8003d9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d9e:	827b      	strh	r3, [r7, #18]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	8a7b      	ldrh	r3, [r7, #18]
 8003da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
 8003dba:	e17b      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003dce:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f280 80ea 	bge.w	8003fac <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dee:	4013      	ands	r3, r2
 8003df0:	853b      	strh	r3, [r7, #40]	; 0x28
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e06:	b292      	uxth	r2, r2
 8003e08:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	7b1b      	ldrb	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d122      	bne.n	8003e6e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3306      	adds	r3, #6
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e50:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003e52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8087 	beq.w	8003f68 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	6959      	ldr	r1, [r3, #20]
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	88da      	ldrh	r2, [r3, #6]
 8003e66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e68:	f004 fcbf 	bl	80087ea <USB_ReadPMA>
 8003e6c:	e07c      	b.n	8003f68 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	78db      	ldrb	r3, [r3, #3]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d108      	bne.n	8003e88 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f927 	bl	80040d0 <HAL_PCD_EP_DB_Receive>
 8003e82:	4603      	mov	r3, r0
 8003e84:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e86:	e06f      	b.n	8003f68 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea2:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d021      	beq.n	8003f26 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f0a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d02a      	beq.n	8003f68 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	6959      	ldr	r1, [r3, #20]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	891a      	ldrh	r2, [r3, #8]
 8003f1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f20:	f004 fc63 	bl	80087ea <USB_ReadPMA>
 8003f24:	e020      	b.n	8003f68 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3306      	adds	r3, #6
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f4e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	6959      	ldr	r1, [r3, #20]
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	895a      	ldrh	r2, [r3, #10]
 8003f62:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f64:	f004 fc41 	bl	80087ea <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f6e:	441a      	add	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f7a:	441a      	add	r2, r3
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <PCD_EP_ISR_Handler+0x4c2>
 8003f88:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d206      	bcs.n	8003fa0 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f006 fb69 	bl	800a670 <HAL_PCD_DataOutStageCallback>
 8003f9e:	e005      	b.n	8003fac <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f002 fc64 	bl	8006874 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d07e      	beq.n	80040b4 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe4:	843b      	strh	r3, [r7, #32]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	441a      	add	r2, r3
 8003ff4:	8c3b      	ldrh	r3, [r7, #32]
 8003ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	78db      	ldrb	r3, [r3, #3]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d00c      	beq.n	8004024 <PCD_EP_ISR_Handler+0x554>
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	78db      	ldrb	r3, [r3, #3]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8004016:	2b02      	cmp	r3, #2
 8004018:	d146      	bne.n	80040a8 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800401a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d141      	bne.n	80040a8 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	3302      	adds	r3, #2
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	8bfb      	ldrh	r3, [r7, #30]
 8004054:	429a      	cmp	r2, r3
 8004056:	d906      	bls.n	8004066 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	699a      	ldr	r2, [r3, #24]
 800405c:	8bfb      	ldrh	r3, [r7, #30]
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	619a      	str	r2, [r3, #24]
 8004064:	e002      	b.n	800406c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d106      	bne.n	8004082 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f006 fb13 	bl	800a6a6 <HAL_PCD_DataInStageCallback>
 8004080:	e018      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	8bfb      	ldrh	r3, [r7, #30]
 8004088:	441a      	add	r2, r3
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	8bfb      	ldrh	r3, [r7, #30]
 8004094:	441a      	add	r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f002 fbe7 	bl	8006874 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80040a6:	e005      	b.n	80040b4 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040aa:	461a      	mov	r2, r3
 80040ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f91b 	bl	80042ea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040bc:	b29b      	uxth	r3, r3
 80040be:	b21b      	sxth	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f6ff ad0a 	blt.w	8003ada <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3738      	adds	r7, #56	; 0x38
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040de:	88fb      	ldrh	r3, [r7, #6]
 80040e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d07e      	beq.n	80041e6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	3302      	adds	r3, #2
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004110:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	8b7b      	ldrh	r3, [r7, #26]
 8004118:	429a      	cmp	r2, r3
 800411a:	d306      	bcc.n	800412a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	8b7b      	ldrh	r3, [r7, #26]
 8004122:	1ad2      	subs	r2, r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	619a      	str	r2, [r3, #24]
 8004128:	e002      	b.n	8004130 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d123      	bne.n	8004180 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004152:	833b      	strh	r3, [r7, #24]
 8004154:	8b3b      	ldrh	r3, [r7, #24]
 8004156:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800415a:	833b      	strh	r3, [r7, #24]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	461a      	mov	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	8b3b      	ldrh	r3, [r7, #24]
 800416c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800417c:	b29b      	uxth	r3, r3
 800417e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004180:	88fb      	ldrh	r3, [r7, #6]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01f      	beq.n	80041ca <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	881b      	ldrh	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	82fb      	strh	r3, [r7, #22]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	8afb      	ldrh	r3, [r7, #22]
 80041b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041ca:	8b7b      	ldrh	r3, [r7, #26]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8087 	beq.w	80042e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6959      	ldr	r1, [r3, #20]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	891a      	ldrh	r2, [r3, #8]
 80041de:	8b7b      	ldrh	r3, [r7, #26]
 80041e0:	f004 fb03 	bl	80087ea <USB_ReadPMA>
 80041e4:	e07c      	b.n	80042e0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4413      	add	r3, r2
 80041fa:	3306      	adds	r3, #6
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800420e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	8b7b      	ldrh	r3, [r7, #26]
 8004216:	429a      	cmp	r2, r3
 8004218:	d306      	bcc.n	8004228 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	8b7b      	ldrh	r3, [r7, #26]
 8004220:	1ad2      	subs	r2, r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	619a      	str	r2, [r3, #24]
 8004226:	e002      	b.n	800422e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d123      	bne.n	800427e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800424c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004250:	83fb      	strh	r3, [r7, #30]
 8004252:	8bfb      	ldrh	r3, [r7, #30]
 8004254:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004258:	83fb      	strh	r3, [r7, #30]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	8bfb      	ldrh	r3, [r7, #30]
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d11f      	bne.n	80042c8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	83bb      	strh	r3, [r7, #28]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	8bbb      	ldrh	r3, [r7, #28]
 80042b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042c8:	8b7b      	ldrh	r3, [r7, #26]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6959      	ldr	r1, [r3, #20]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	895a      	ldrh	r2, [r3, #10]
 80042da:	8b7b      	ldrh	r3, [r7, #26]
 80042dc:	f004 fa85 	bl	80087ea <USB_ReadPMA>
    }
  }

  return count;
 80042e0:	8b7b      	ldrh	r3, [r7, #26]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b0a2      	sub	sp, #136	; 0x88
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 81c7 	beq.w	8004692 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800430c:	b29b      	uxth	r3, r3
 800430e:	461a      	mov	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	3302      	adds	r3, #2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004326:	881b      	ldrh	r3, [r3, #0]
 8004328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800432c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004338:	429a      	cmp	r2, r3
 800433a:	d907      	bls.n	800434c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004344:	1ad2      	subs	r2, r2, r3
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	619a      	str	r2, [r3, #24]
 800434a:	e002      	b.n	8004352 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2200      	movs	r2, #0
 8004350:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 80b9 	bne.w	80044ce <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	785b      	ldrb	r3, [r3, #1]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d126      	bne.n	80043b2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004372:	b29b      	uxth	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	4413      	add	r3, r2
 800437a:	62bb      	str	r3, [r7, #40]	; 0x28
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	011a      	lsls	r2, r3, #4
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	4413      	add	r3, r2
 8004386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
 800438c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004396:	b29a      	uxth	r2, r3
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e01a      	b.n	80043e8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	785b      	ldrb	r3, [r3, #1]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d116      	bne.n	80043e8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	461a      	mov	r2, r3
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	4413      	add	r3, r2
 80043d0:	633b      	str	r3, [r7, #48]	; 0x30
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	011a      	lsls	r2, r3, #4
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	4413      	add	r3, r2
 80043dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2200      	movs	r2, #0
 80043e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	785b      	ldrb	r3, [r3, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d126      	bne.n	8004444 <HAL_PCD_EP_DB_Transmit+0x15a>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004404:	b29b      	uxth	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	011a      	lsls	r2, r3, #4
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	4413      	add	r3, r2
 8004418:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004428:	b29a      	uxth	r2, r3
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	801a      	strh	r2, [r3, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	b29b      	uxth	r3, r3
 8004434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443c:	b29a      	uxth	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	801a      	strh	r2, [r3, #0]
 8004442:	e017      	b.n	8004474 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	785b      	ldrb	r3, [r3, #1]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d113      	bne.n	8004474 <HAL_PCD_EP_DB_Transmit+0x18a>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004454:	b29b      	uxth	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	4413      	add	r3, r2
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	011a      	lsls	r2, r3, #4
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	4413      	add	r3, r2
 8004468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2200      	movs	r2, #0
 8004472:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f006 f913 	bl	800a6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 82d4 	beq.w	8004a34 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	881b      	ldrh	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	827b      	strh	r3, [r7, #18]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	8a7b      	ldrh	r3, [r7, #18]
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
 80044cc:	e2b2      	b.n	8004a34 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d021      	beq.n	800451c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	441a      	add	r2, r3
 8004504:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004522:	2b01      	cmp	r3, #1
 8004524:	f040 8286 	bne.w	8004a34 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	695a      	ldr	r2, [r3, #20]
 800452c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004530:	441a      	add	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800453e:	441a      	add	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	6a1a      	ldr	r2, [r3, #32]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	d309      	bcc.n	8004564 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455c:	1ad2      	subs	r2, r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	621a      	str	r2, [r3, #32]
 8004562:	e015      	b.n	8004590 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800456c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004570:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800457a:	e009      	b.n	8004590 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2200      	movs	r2, #0
 800458e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	785b      	ldrb	r3, [r3, #1]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d155      	bne.n	8004644 <HAL_PCD_EP_DB_Transmit+0x35a>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	4413      	add	r3, r2
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	011a      	lsls	r2, r3, #4
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	4413      	add	r3, r2
 80045ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d112      	bne.n	80045ec <HAL_PCD_EP_DB_Transmit+0x302>
 80045c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	e047      	b.n	800467c <HAL_PCD_EP_DB_Transmit+0x392>
 80045ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ee:	2b3e      	cmp	r3, #62	; 0x3e
 80045f0:	d811      	bhi.n	8004616 <HAL_PCD_EP_DB_Transmit+0x32c>
 80045f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f4:	085b      	lsrs	r3, r3, #1
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	3301      	adds	r3, #1
 8004606:	64bb      	str	r3, [r7, #72]	; 0x48
 8004608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460a:	b29b      	uxth	r3, r3
 800460c:	029b      	lsls	r3, r3, #10
 800460e:	b29a      	uxth	r2, r3
 8004610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	e032      	b.n	800467c <HAL_PCD_EP_DB_Transmit+0x392>
 8004616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	64bb      	str	r3, [r7, #72]	; 0x48
 800461c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	2b00      	cmp	r3, #0
 8004624:	d102      	bne.n	800462c <HAL_PCD_EP_DB_Transmit+0x342>
 8004626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004628:	3b01      	subs	r3, #1
 800462a:	64bb      	str	r3, [r7, #72]	; 0x48
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	b29b      	uxth	r3, r3
 8004630:	029b      	lsls	r3, r3, #10
 8004632:	b29b      	uxth	r3, r3
 8004634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800463c:	b29a      	uxth	r2, r3
 800463e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004640:	801a      	strh	r2, [r3, #0]
 8004642:	e01b      	b.n	800467c <HAL_PCD_EP_DB_Transmit+0x392>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d117      	bne.n	800467c <HAL_PCD_EP_DB_Transmit+0x392>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	643b      	str	r3, [r7, #64]	; 0x40
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465a:	b29b      	uxth	r3, r3
 800465c:	461a      	mov	r2, r3
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	4413      	add	r3, r2
 8004662:	643b      	str	r3, [r7, #64]	; 0x40
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	011a      	lsls	r2, r3, #4
 800466a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800466c:	4413      	add	r3, r2
 800466e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004676:	b29a      	uxth	r2, r3
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6959      	ldr	r1, [r3, #20]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	891a      	ldrh	r2, [r3, #8]
 8004688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800468a:	b29b      	uxth	r3, r3
 800468c:	f004 f868 	bl	8008760 <USB_WritePMA>
 8004690:	e1d0      	b.n	8004a34 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469a:	b29b      	uxth	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	3306      	adds	r3, #6
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d307      	bcc.n	80046da <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	619a      	str	r2, [r3, #24]
 80046d8:	e002      	b.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2200      	movs	r2, #0
 80046de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 80c4 	bne.w	8004872 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	785b      	ldrb	r3, [r3, #1]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d126      	bne.n	8004740 <HAL_PCD_EP_DB_Transmit+0x456>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004700:	b29b      	uxth	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	4413      	add	r3, r2
 8004708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	011a      	lsls	r2, r3, #4
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	4413      	add	r3, r2
 8004714:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004718:	66bb      	str	r3, [r7, #104]	; 0x68
 800471a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004724:	b29a      	uxth	r2, r3
 8004726:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004738:	b29a      	uxth	r2, r3
 800473a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800473c:	801a      	strh	r2, [r3, #0]
 800473e:	e01a      	b.n	8004776 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d116      	bne.n	8004776 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	677b      	str	r3, [r7, #116]	; 0x74
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	461a      	mov	r2, r3
 800475a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800475c:	4413      	add	r3, r2
 800475e:	677b      	str	r3, [r7, #116]	; 0x74
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	011a      	lsls	r2, r3, #4
 8004766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004768:	4413      	add	r3, r2
 800476a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800476e:	673b      	str	r3, [r7, #112]	; 0x70
 8004770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004772:	2200      	movs	r2, #0
 8004774:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	67bb      	str	r3, [r7, #120]	; 0x78
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	785b      	ldrb	r3, [r3, #1]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d12f      	bne.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004794:	b29b      	uxth	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800479c:	4413      	add	r3, r2
 800479e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	011a      	lsls	r2, r3, #4
 80047a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047ac:	4413      	add	r3, r2
 80047ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047da:	b29a      	uxth	r2, r3
 80047dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047e0:	801a      	strh	r2, [r3, #0]
 80047e2:	e017      	b.n	8004814 <HAL_PCD_EP_DB_Transmit+0x52a>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d113      	bne.n	8004814 <HAL_PCD_EP_DB_Transmit+0x52a>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fa:	4413      	add	r3, r2
 80047fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	011a      	lsls	r2, r3, #4
 8004804:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004806:	4413      	add	r3, r2
 8004808:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800480c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800480e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004810:	2200      	movs	r2, #0
 8004812:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f005 ff43 	bl	800a6a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 8104 	bne.w	8004a34 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	b29b      	uxth	r3, r3
 800483e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004846:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	441a      	add	r2, r3
 8004858:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800485c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486c:	b29b      	uxth	r3, r3
 800486e:	8013      	strh	r3, [r2, #0]
 8004870:	e0e0      	b.n	8004a34 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d121      	bne.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	461a      	mov	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	461a      	mov	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	441a      	add	r2, r3
 80048a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048bc:	b29b      	uxth	r3, r3
 80048be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	f040 80b4 	bne.w	8004a34 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048d4:	441a      	add	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80048e2:	441a      	add	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d309      	bcc.n	8004908 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004900:	1ad2      	subs	r2, r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	621a      	str	r2, [r3, #32]
 8004906:	e015      	b.n	8004934 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d107      	bne.n	8004920 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004914:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800491e:	e009      	b.n	8004934 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2200      	movs	r2, #0
 800492a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	667b      	str	r3, [r7, #100]	; 0x64
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d155      	bne.n	80049ee <HAL_PCD_EP_DB_Transmit+0x704>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004950:	b29b      	uxth	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004956:	4413      	add	r3, r2
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	011a      	lsls	r2, r3, #4
 8004960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004962:	4413      	add	r3, r2
 8004964:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004968:	65bb      	str	r3, [r7, #88]	; 0x58
 800496a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800496c:	2b00      	cmp	r3, #0
 800496e:	d112      	bne.n	8004996 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800497a:	b29a      	uxth	r2, r3
 800497c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	b29b      	uxth	r3, r3
 8004986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800498e:	b29a      	uxth	r2, r3
 8004990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	e044      	b.n	8004a20 <HAL_PCD_EP_DB_Transmit+0x736>
 8004996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004998:	2b3e      	cmp	r3, #62	; 0x3e
 800499a:	d811      	bhi.n	80049c0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800499c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499e:	085b      	lsrs	r3, r3, #1
 80049a0:	657b      	str	r3, [r7, #84]	; 0x54
 80049a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80049ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ae:	3301      	adds	r3, #1
 80049b0:	657b      	str	r3, [r7, #84]	; 0x54
 80049b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	e02f      	b.n	8004a20 <HAL_PCD_EP_DB_Transmit+0x736>
 80049c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	657b      	str	r3, [r7, #84]	; 0x54
 80049c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d102      	bne.n	80049d6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80049d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d2:	3b01      	subs	r3, #1
 80049d4:	657b      	str	r3, [r7, #84]	; 0x54
 80049d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d8:	b29b      	uxth	r3, r3
 80049da:	029b      	lsls	r3, r3, #10
 80049dc:	b29b      	uxth	r3, r3
 80049de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049ea:	801a      	strh	r2, [r3, #0]
 80049ec:	e018      	b.n	8004a20 <HAL_PCD_EP_DB_Transmit+0x736>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d114      	bne.n	8004a20 <HAL_PCD_EP_DB_Transmit+0x736>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	461a      	mov	r2, r3
 8004a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a04:	4413      	add	r3, r2
 8004a06:	667b      	str	r3, [r7, #100]	; 0x64
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	011a      	lsls	r2, r3, #4
 8004a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a10:	4413      	add	r3, r2
 8004a12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a16:	663b      	str	r3, [r7, #96]	; 0x60
 8004a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a1e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	6959      	ldr	r1, [r3, #20]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	895a      	ldrh	r2, [r3, #10]
 8004a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f003 fe96 	bl	8008760 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4e:	823b      	strh	r3, [r7, #16]
 8004a50:	8a3b      	ldrh	r3, [r7, #16]
 8004a52:	f083 0310 	eor.w	r3, r3, #16
 8004a56:	823b      	strh	r3, [r7, #16]
 8004a58:	8a3b      	ldrh	r3, [r7, #16]
 8004a5a:	f083 0320 	eor.w	r3, r3, #32
 8004a5e:	823b      	strh	r3, [r7, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	441a      	add	r2, r3
 8004a6e:	8a3b      	ldrh	r3, [r7, #16]
 8004a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3788      	adds	r7, #136	; 0x88
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	817b      	strh	r3, [r7, #10]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004aa0:	897b      	ldrh	r3, [r7, #10]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00b      	beq.n	8004ac4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aac:	897b      	ldrh	r3, [r7, #10]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e009      	b.n	8004ad8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ac4:	897a      	ldrh	r2, [r7, #10]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	00db      	lsls	r3, r3, #3
 8004ace:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ad8:	893b      	ldrh	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d107      	bne.n	8004aee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	80da      	strh	r2, [r3, #6]
 8004aec:	e00b      	b.n	8004b06 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2201      	movs	r2, #1
 8004af2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	371c      	adds	r7, #28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e272      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8087 	beq.w	8004c42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b34:	4b92      	ldr	r3, [pc, #584]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d00c      	beq.n	8004b5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b40:	4b8f      	ldr	r3, [pc, #572]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d112      	bne.n	8004b72 <HAL_RCC_OscConfig+0x5e>
 8004b4c:	4b8c      	ldr	r3, [pc, #560]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b58:	d10b      	bne.n	8004b72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5a:	4b89      	ldr	r3, [pc, #548]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d06c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x12c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d168      	bne.n	8004c40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e24c      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCC_OscConfig+0x76>
 8004b7c:	4b80      	ldr	r3, [pc, #512]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a7f      	ldr	r2, [pc, #508]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e02e      	b.n	8004be8 <HAL_RCC_OscConfig+0xd4>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x98>
 8004b92:	4b7b      	ldr	r3, [pc, #492]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7a      	ldr	r2, [pc, #488]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	4b78      	ldr	r3, [pc, #480]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a77      	ldr	r2, [pc, #476]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e01d      	b.n	8004be8 <HAL_RCC_OscConfig+0xd4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xbc>
 8004bb6:	4b72      	ldr	r3, [pc, #456]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a71      	ldr	r2, [pc, #452]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	4b6f      	ldr	r3, [pc, #444]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a6e      	ldr	r2, [pc, #440]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e00b      	b.n	8004be8 <HAL_RCC_OscConfig+0xd4>
 8004bd0:	4b6b      	ldr	r3, [pc, #428]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a6a      	ldr	r2, [pc, #424]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b68      	ldr	r3, [pc, #416]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a67      	ldr	r2, [pc, #412]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fc ff44 	bl	8001a7c <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fc ff40 	bl	8001a7c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e200      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0a:	4b5d      	ldr	r3, [pc, #372]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0xe4>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fc ff30 	bl	8001a7c <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fc ff2c 	bl	8001a7c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e1ec      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c32:	4b53      	ldr	r3, [pc, #332]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x10c>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d063      	beq.n	8004d16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4e:	4b4c      	ldr	r3, [pc, #304]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c5a:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d11c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x18c>
 8004c66:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	4b43      	ldr	r3, [pc, #268]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_RCC_OscConfig+0x176>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1c0      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8a:	4b3d      	ldr	r3, [pc, #244]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4939      	ldr	r1, [pc, #228]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9e:	e03a      	b.n	8004d16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d020      	beq.n	8004cea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <HAL_RCC_OscConfig+0x270>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7fc fee5 	bl	8001a7c <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb6:	f7fc fee1 	bl	8001a7c <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e1a1      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd4:	4b2a      	ldr	r3, [pc, #168]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4927      	ldr	r1, [pc, #156]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	600b      	str	r3, [r1, #0]
 8004ce8:	e015      	b.n	8004d16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cea:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <HAL_RCC_OscConfig+0x270>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf0:	f7fc fec4 	bl	8001a7c <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf8:	f7fc fec0 	bl	8001a7c <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e180      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0a:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1f0      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d03a      	beq.n	8004d98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d019      	beq.n	8004d5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d2a:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <HAL_RCC_OscConfig+0x274>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d30:	f7fc fea4 	bl	8001a7c <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d38:	f7fc fea0 	bl	8001a7c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e160      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <HAL_RCC_OscConfig+0x26c>)
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f0      	beq.n	8004d38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d56:	2001      	movs	r0, #1
 8004d58:	f000 fad8 	bl	800530c <RCC_Delay>
 8004d5c:	e01c      	b.n	8004d98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_RCC_OscConfig+0x274>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d64:	f7fc fe8a 	bl	8001a7c <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d6a:	e00f      	b.n	8004d8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d6c:	f7fc fe86 	bl	8001a7c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d908      	bls.n	8004d8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e146      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000
 8004d84:	42420000 	.word	0x42420000
 8004d88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8c:	4b92      	ldr	r3, [pc, #584]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e9      	bne.n	8004d6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80a6 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da6:	2300      	movs	r3, #0
 8004da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004daa:	4b8b      	ldr	r3, [pc, #556]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db6:	4b88      	ldr	r3, [pc, #544]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	4a87      	ldr	r2, [pc, #540]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	61d3      	str	r3, [r2, #28]
 8004dc2:	4b85      	ldr	r3, [pc, #532]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd2:	4b82      	ldr	r3, [pc, #520]	; (8004fdc <HAL_RCC_OscConfig+0x4c8>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d118      	bne.n	8004e10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dde:	4b7f      	ldr	r3, [pc, #508]	; (8004fdc <HAL_RCC_OscConfig+0x4c8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7e      	ldr	r2, [pc, #504]	; (8004fdc <HAL_RCC_OscConfig+0x4c8>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dea:	f7fc fe47 	bl	8001a7c <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df2:	f7fc fe43 	bl	8001a7c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b64      	cmp	r3, #100	; 0x64
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e103      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	4b75      	ldr	r3, [pc, #468]	; (8004fdc <HAL_RCC_OscConfig+0x4c8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_OscConfig+0x312>
 8004e18:	4b6f      	ldr	r3, [pc, #444]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	4a6e      	ldr	r2, [pc, #440]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	6213      	str	r3, [r2, #32]
 8004e24:	e02d      	b.n	8004e82 <HAL_RCC_OscConfig+0x36e>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x334>
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4a69      	ldr	r2, [pc, #420]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	6213      	str	r3, [r2, #32]
 8004e3a:	4b67      	ldr	r3, [pc, #412]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4a66      	ldr	r2, [pc, #408]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	f023 0304 	bic.w	r3, r3, #4
 8004e44:	6213      	str	r3, [r2, #32]
 8004e46:	e01c      	b.n	8004e82 <HAL_RCC_OscConfig+0x36e>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d10c      	bne.n	8004e6a <HAL_RCC_OscConfig+0x356>
 8004e50:	4b61      	ldr	r3, [pc, #388]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	4a60      	ldr	r2, [pc, #384]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e56:	f043 0304 	orr.w	r3, r3, #4
 8004e5a:	6213      	str	r3, [r2, #32]
 8004e5c:	4b5e      	ldr	r3, [pc, #376]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4a5d      	ldr	r2, [pc, #372]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6213      	str	r3, [r2, #32]
 8004e68:	e00b      	b.n	8004e82 <HAL_RCC_OscConfig+0x36e>
 8004e6a:	4b5b      	ldr	r3, [pc, #364]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	4a5a      	ldr	r2, [pc, #360]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6213      	str	r3, [r2, #32]
 8004e76:	4b58      	ldr	r3, [pc, #352]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	4a57      	ldr	r2, [pc, #348]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d015      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8a:	f7fc fdf7 	bl	8001a7c <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e92:	f7fc fdf3 	bl	8001a7c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0b1      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea8:	4b4b      	ldr	r3, [pc, #300]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004eaa:	6a1b      	ldr	r3, [r3, #32]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ee      	beq.n	8004e92 <HAL_RCC_OscConfig+0x37e>
 8004eb4:	e014      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb6:	f7fc fde1 	bl	8001a7c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fc fddd 	bl	8001a7c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e09b      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed4:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ee      	bne.n	8004ebe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4b3c      	ldr	r3, [pc, #240]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	4a3b      	ldr	r2, [pc, #236]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8087 	beq.w	800500a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d061      	beq.n	8004fcc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d146      	bne.n	8004f9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <HAL_RCC_OscConfig+0x4cc>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fc fdb1 	bl	8001a7c <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fc fdad 	bl	8001a7c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e06d      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f30:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f0      	bne.n	8004f1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f44:	d108      	bne.n	8004f58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f46:	4b24      	ldr	r3, [pc, #144]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	4921      	ldr	r1, [pc, #132]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f58:	4b1f      	ldr	r3, [pc, #124]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a19      	ldr	r1, [r3, #32]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	491b      	ldr	r1, [pc, #108]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f70:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <HAL_RCC_OscConfig+0x4cc>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f76:	f7fc fd81 	bl	8001a7c <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f7c:	e008      	b.n	8004f90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7e:	f7fc fd7d 	bl	8001a7c <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e03d      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f90:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0f0      	beq.n	8004f7e <HAL_RCC_OscConfig+0x46a>
 8004f9c:	e035      	b.n	800500a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <HAL_RCC_OscConfig+0x4cc>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa4:	f7fc fd6a 	bl	8001a7c <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fc fd66 	bl	8001a7c <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e026      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0x498>
 8004fca:	e01e      	b.n	800500a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69db      	ldr	r3, [r3, #28]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e019      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40007000 	.word	0x40007000
 8004fe0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_OscConfig+0x500>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d106      	bne.n	8005006 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000

08005018 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0d0      	b.n	80051ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800502c:	4b6a      	ldr	r3, [pc, #424]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d910      	bls.n	800505c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b67      	ldr	r3, [pc, #412]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 0207 	bic.w	r2, r3, #7
 8005042:	4965      	ldr	r1, [pc, #404]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	4313      	orrs	r3, r2
 8005048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0b8      	b.n	80051ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d020      	beq.n	80050aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005074:	4b59      	ldr	r3, [pc, #356]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	4a58      	ldr	r2, [pc, #352]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 800507a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800507e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800508c:	4b53      	ldr	r3, [pc, #332]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4a52      	ldr	r2, [pc, #328]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 8005092:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005096:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005098:	4b50      	ldr	r3, [pc, #320]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	494d      	ldr	r1, [pc, #308]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d040      	beq.n	8005138 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d107      	bne.n	80050ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	4b47      	ldr	r3, [pc, #284]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d115      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07f      	b.n	80051ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d107      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d6:	4b41      	ldr	r3, [pc, #260]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e073      	b.n	80051ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e6:	4b3d      	ldr	r3, [pc, #244]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e06b      	b.n	80051ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f6:	4b39      	ldr	r3, [pc, #228]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4936      	ldr	r1, [pc, #216]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	4313      	orrs	r3, r2
 8005106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005108:	f7fc fcb8 	bl	8001a7c <HAL_GetTick>
 800510c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	e00a      	b.n	8005126 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005110:	f7fc fcb4 	bl	8001a7c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	f241 3288 	movw	r2, #5000	; 0x1388
 800511e:	4293      	cmp	r3, r2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e053      	b.n	80051ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005126:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 020c 	and.w	r2, r3, #12
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	429a      	cmp	r2, r3
 8005136:	d1eb      	bne.n	8005110 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005138:	4b27      	ldr	r3, [pc, #156]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d210      	bcs.n	8005168 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 0207 	bic.w	r2, r3, #7
 800514e:	4922      	ldr	r1, [pc, #136]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	4313      	orrs	r3, r2
 8005154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_RCC_ClockConfig+0x1c0>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e032      	b.n	80051ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d008      	beq.n	8005186 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4916      	ldr	r1, [pc, #88]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 8005182:	4313      	orrs	r3, r2
 8005184:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0308 	and.w	r3, r3, #8
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005192:	4b12      	ldr	r3, [pc, #72]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	490e      	ldr	r1, [pc, #56]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051a6:	f000 f821 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 80051aa:	4602      	mov	r2, r0
 80051ac:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	490a      	ldr	r1, [pc, #40]	; (80051e0 <HAL_RCC_ClockConfig+0x1c8>)
 80051b8:	5ccb      	ldrb	r3, [r1, r3]
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <HAL_RCC_ClockConfig+0x1cc>)
 80051c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_RCC_ClockConfig+0x1d0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fc fc16 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40022000 	.word	0x40022000
 80051dc:	40021000 	.word	0x40021000
 80051e0:	0800eb14 	.word	0x0800eb14
 80051e4:	20000054 	.word	0x20000054
 80051e8:	20000058 	.word	0x20000058

080051ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ec:	b490      	push	{r4, r7}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051f2:	4b29      	ldr	r3, [pc, #164]	; (8005298 <HAL_RCC_GetSysClockFreq+0xac>)
 80051f4:	1d3c      	adds	r4, r7, #4
 80051f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051fc:	f240 2301 	movw	r3, #513	; 0x201
 8005200:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	2300      	movs	r3, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	2300      	movs	r3, #0
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	2300      	movs	r3, #0
 8005210:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f003 030c 	and.w	r3, r3, #12
 8005222:	2b04      	cmp	r3, #4
 8005224:	d002      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x40>
 8005226:	2b08      	cmp	r3, #8
 8005228:	d003      	beq.n	8005232 <HAL_RCC_GetSysClockFreq+0x46>
 800522a:	e02b      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800522e:	623b      	str	r3, [r7, #32]
      break;
 8005230:	e02b      	b.n	800528a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	0c9b      	lsrs	r3, r3, #18
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	3328      	adds	r3, #40	; 0x28
 800523c:	443b      	add	r3, r7
 800523e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005242:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d012      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	0c5b      	lsrs	r3, r3, #17
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	3328      	adds	r3, #40	; 0x28
 800525a:	443b      	add	r3, r7
 800525c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005260:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4a0e      	ldr	r2, [pc, #56]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005266:	fb03 f202 	mul.w	r2, r3, r2
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
 8005272:	e004      	b.n	800527e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4a0b      	ldr	r2, [pc, #44]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005278:	fb02 f303 	mul.w	r3, r2, r3
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	623b      	str	r3, [r7, #32]
      break;
 8005282:	e002      	b.n	800528a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005286:	623b      	str	r3, [r7, #32]
      break;
 8005288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528a:	6a3b      	ldr	r3, [r7, #32]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	; 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bc90      	pop	{r4, r7}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	0800ea88 	.word	0x0800ea88
 800529c:	40021000 	.word	0x40021000
 80052a0:	007a1200 	.word	0x007a1200
 80052a4:	003d0900 	.word	0x003d0900

080052a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052ac:	4b02      	ldr	r3, [pc, #8]	; (80052b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	20000054 	.word	0x20000054

080052bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c0:	f7ff fff2 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	0800eb24 	.word	0x0800eb24

080052e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052e8:	f7ff ffde 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	0adb      	lsrs	r3, r3, #11
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4903      	ldr	r1, [pc, #12]	; (8005308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000
 8005308:	0800eb24 	.word	0x0800eb24

0800530c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <RCC_Delay+0x34>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <RCC_Delay+0x38>)
 800531a:	fba2 2303 	umull	r2, r3, r2, r3
 800531e:	0a5b      	lsrs	r3, r3, #9
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	fb02 f303 	mul.w	r3, r2, r3
 8005326:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005328:	bf00      	nop
  }
  while (Delay --);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1e5a      	subs	r2, r3, #1
 800532e:	60fa      	str	r2, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f9      	bne.n	8005328 <RCC_Delay+0x1c>
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	20000054 	.word	0x20000054
 8005344:	10624dd3 	.word	0x10624dd3

08005348 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d07d      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005364:	2300      	movs	r3, #0
 8005366:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005368:	4b4f      	ldr	r3, [pc, #316]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005374:	4b4c      	ldr	r3, [pc, #304]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	4a4b      	ldr	r2, [pc, #300]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537e:	61d3      	str	r3, [r2, #28]
 8005380:	4b49      	ldr	r3, [pc, #292]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800538c:	2301      	movs	r3, #1
 800538e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	4b46      	ldr	r3, [pc, #280]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005398:	2b00      	cmp	r3, #0
 800539a:	d118      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800539c:	4b43      	ldr	r3, [pc, #268]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a42      	ldr	r2, [pc, #264]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a8:	f7fc fb68 	bl	8001a7c <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ae:	e008      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b0:	f7fc fb64 	bl	8001a7c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e06d      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c2:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ce:	4b36      	ldr	r3, [pc, #216]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d02e      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d027      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ec:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053f6:	4b2e      	ldr	r3, [pc, #184]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053fc:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005402:	4a29      	ldr	r2, [pc, #164]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d014      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005412:	f7fc fb33 	bl	8001a7c <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	e00a      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800541a:	f7fc fb2f 	bl	8001a7c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f241 3288 	movw	r2, #5000	; 0x1388
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e036      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	4b1d      	ldr	r3, [pc, #116]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0ee      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4917      	ldr	r1, [pc, #92]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544a:	4313      	orrs	r3, r2
 800544c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800544e:	7dfb      	ldrb	r3, [r7, #23]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d105      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800545a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800545e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	490b      	ldr	r1, [pc, #44]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547a:	4313      	orrs	r3, r2
 800547c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b00      	cmp	r3, #0
 8005488:	d008      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	4904      	ldr	r1, [pc, #16]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3718      	adds	r7, #24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
 80054ac:	40007000 	.word	0x40007000
 80054b0:	42420440 	.word	0x42420440

080054b4 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	460b      	mov	r3, r1
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e05f      	b.n	800558c <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7fc f8cf 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2224      	movs	r2, #36	; 0x24
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 fb68 	bl	8005bd4 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005512:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005522:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 020f 	bic.w	r2, r2, #15
 8005532:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6919      	ldr	r1, [r3, #16]
 800553a:	7afa      	ldrb	r2, [r7, #11]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005552:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68d9      	ldr	r1, [r3, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	430a      	orrs	r2, r1
 8005562:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005572:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08a      	sub	sp, #40	; 0x28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10d      	bne.n	80055e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_UART_IRQHandler+0x52>
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	f003 0320 	and.w	r3, r3, #32
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa4f 	bl	8005a82 <UART_Receive_IT>
      return;
 80055e4:	e17b      	b.n	80058de <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80b1 	beq.w	8005750 <HAL_UART_IRQHandler+0x1bc>
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d105      	bne.n	8005604 <HAL_UART_IRQHandler+0x70>
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80a6 	beq.w	8005750 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_UART_IRQHandler+0x90>
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f043 0201 	orr.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_UART_IRQHandler+0xb0>
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	f043 0202 	orr.w	r2, r3, #2
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_UART_IRQHandler+0xd0>
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f043 0204 	orr.w	r2, r3, #4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00f      	beq.n	800568e <HAL_UART_IRQHandler+0xfa>
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_UART_IRQHandler+0xee>
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d005      	beq.n	800568e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0208 	orr.w	r2, r3, #8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 811e 	beq.w	80058d4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_UART_IRQHandler+0x11e>
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	f003 0320 	and.w	r3, r3, #32
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f9e8 	bl	8005a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf14      	ite	ne
 80056c0:	2301      	movne	r3, #1
 80056c2:	2300      	moveq	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_UART_IRQHandler+0x146>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d031      	beq.n	800573e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f92a 	bl	8005934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d023      	beq.n	8005736 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d013      	beq.n	800572e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	4a76      	ldr	r2, [pc, #472]	; (80058e4 <HAL_UART_IRQHandler+0x350>)
 800570c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	4618      	mov	r0, r3
 8005714:	f7fc fb28 	bl	8001d68 <HAL_DMA_Abort_IT>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d016      	beq.n	800574c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005728:	4610      	mov	r0, r2
 800572a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e00e      	b.n	800574c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f8ec 	bl	800590c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e00a      	b.n	800574c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8e8 	bl	800590c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800573c:	e006      	b.n	800574c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f8e4 	bl	800590c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800574a:	e0c3      	b.n	80058d4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	bf00      	nop
    return;
 800574e:	e0c1      	b.n	80058d4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 80a1 	bne.w	800589c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 809b 	beq.w	800589c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8095 	beq.w	800589c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d04e      	beq.n	8005834 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80057a0:	8a3b      	ldrh	r3, [r7, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8098 	beq.w	80058d8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ac:	8a3a      	ldrh	r2, [r7, #16]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	f080 8092 	bcs.w	80058d8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8a3a      	ldrh	r2, [r7, #16]
 80057b8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d02b      	beq.n	800581c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057d2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	695a      	ldr	r2, [r3, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0210 	bic.w	r2, r2, #16
 8005810:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	4618      	mov	r0, r3
 8005818:	f7fc fa6b 	bl	8001cf2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	b29b      	uxth	r3, r3
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f876 	bl	800591e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005832:	e051      	b.n	80058d8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800583c:	b29b      	uxth	r3, r3
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d047      	beq.n	80058dc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800584c:	8a7b      	ldrh	r3, [r7, #18]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d044      	beq.n	80058dc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005860:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0210 	bic.w	r2, r2, #16
 800588e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005890:	8a7b      	ldrh	r3, [r7, #18]
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f842 	bl	800591e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800589a:	e01f      	b.n	80058dc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_UART_IRQHandler+0x324>
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f87f 	bl	80059b4 <UART_Transmit_IT>
    return;
 80058b6:	e012      	b.n	80058de <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00d      	beq.n	80058de <HAL_UART_IRQHandler+0x34a>
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f8c0 	bl	8005a52 <UART_EndTransmit_IT>
    return;
 80058d2:	e004      	b.n	80058de <HAL_UART_IRQHandler+0x34a>
    return;
 80058d4:	bf00      	nop
 80058d6:	e002      	b.n	80058de <HAL_UART_IRQHandler+0x34a>
      return;
 80058d8:	bf00      	nop
 80058da:	e000      	b.n	80058de <HAL_UART_IRQHandler+0x34a>
      return;
 80058dc:	bf00      	nop
  }
}
 80058de:	3728      	adds	r7, #40	; 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	0800598d 	.word	0x0800598d

080058e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	460b      	mov	r3, r1
 8005928:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800594a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	2b01      	cmp	r3, #1
 8005962:	d107      	bne.n	8005974 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0210 	bic.w	r2, r2, #16
 8005972:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f7ff ffb0 	bl	800590c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ac:	bf00      	nop
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b21      	cmp	r3, #33	; 0x21
 80059c6:	d13e      	bne.n	8005a46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d0:	d114      	bne.n	80059fc <UART_Transmit_IT+0x48>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d110      	bne.n	80059fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	1c9a      	adds	r2, r3, #2
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]
 80059fa:	e008      	b.n	8005a0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6211      	str	r1, [r2, #32]
 8005a06:	781a      	ldrb	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b082      	sub	sp, #8
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff ff38 	bl	80058e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b22      	cmp	r3, #34	; 0x22
 8005a94:	f040 8099 	bne.w	8005bca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa0:	d117      	bne.n	8005ad2 <UART_Receive_IT+0x50>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d113      	bne.n	8005ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	1c9a      	adds	r2, r3, #2
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	629a      	str	r2, [r3, #40]	; 0x28
 8005ad0:	e026      	b.n	8005b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae4:	d007      	beq.n	8005af6 <UART_Receive_IT+0x74>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <UART_Receive_IT+0x82>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d106      	bne.n	8005b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e008      	b.n	8005b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d148      	bne.n	8005bc6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0220 	bic.w	r2, r2, #32
 8005b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0201 	bic.w	r2, r2, #1
 8005b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d123      	bne.n	8005bbc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0210 	bic.w	r2, r2, #16
 8005b88:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d10a      	bne.n	8005bae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff feb2 	bl	800591e <HAL_UARTEx_RxEventCallback>
 8005bba:	e002      	b.n	8005bc2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fe9c 	bl	80058fa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e002      	b.n	8005bcc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e000      	b.n	8005bcc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005bca:	2302      	movs	r3, #2
  }
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3718      	adds	r7, #24
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005c0e:	f023 030c 	bic.w	r3, r3, #12
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <UART_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d103      	bne.n	8005c44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c3c:	f7ff fb52 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	e002      	b.n	8005c4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c44:	f7ff fb3a 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8005c48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009a      	lsls	r2, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c60:	4a22      	ldr	r2, [pc, #136]	; (8005cec <UART_SetConfig+0x118>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	0119      	lsls	r1, r3, #4
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009a      	lsls	r2, r3, #2
 8005c74:	441a      	add	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c80:	4b1a      	ldr	r3, [pc, #104]	; (8005cec <UART_SetConfig+0x118>)
 8005c82:	fba3 0302 	umull	r0, r3, r3, r2
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	2064      	movs	r0, #100	; 0x64
 8005c8a:	fb00 f303 	mul.w	r3, r0, r3
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	3332      	adds	r3, #50	; 0x32
 8005c94:	4a15      	ldr	r2, [pc, #84]	; (8005cec <UART_SetConfig+0x118>)
 8005c96:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca0:	4419      	add	r1, r3
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009a      	lsls	r2, r3, #2
 8005cac:	441a      	add	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <UART_SetConfig+0x118>)
 8005cba:	fba3 0302 	umull	r0, r3, r3, r2
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	2064      	movs	r0, #100	; 0x64
 8005cc2:	fb00 f303 	mul.w	r3, r0, r3
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	3332      	adds	r3, #50	; 0x32
 8005ccc:	4a07      	ldr	r2, [pc, #28]	; (8005cec <UART_SetConfig+0x118>)
 8005cce:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	f003 020f 	and.w	r2, r3, #15
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	440a      	add	r2, r1
 8005cde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40013800 	.word	0x40013800
 8005cec:	51eb851f 	.word	0x51eb851f

08005cf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	f107 0014 	add.w	r0, r7, #20
 8005cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	b004      	add	sp, #16
 8005d0e:	4770      	bx	lr

08005d10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005d44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005d48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	43db      	mvns	r3, r3
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr

08005d70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005d88:	b084      	sub	sp, #16
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	f107 0014 	add.w	r0, r7, #20
 8005d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bc80      	pop	{r7}
 8005dc4:	b004      	add	sp, #16
 8005dc6:	4770      	bx	lr

08005dc8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b09b      	sub	sp, #108	; 0x6c
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	78db      	ldrb	r3, [r3, #3]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d81f      	bhi.n	8005e3a <USB_ActivateEndpoint+0x72>
 8005dfa:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <USB_ActivateEndpoint+0x38>)
 8005dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e43 	.word	0x08005e43
 8005e0c:	08005e1f 	.word	0x08005e1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005e10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e1c:	e012      	b.n	8005e44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005e1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005e26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e2a:	e00b      	b.n	8005e44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005e2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005e38:	e004      	b.n	8005e44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005e40:	e000      	b.n	8005e44 <USB_ActivateEndpoint+0x7c>
      break;
 8005e42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	441a      	add	r2, r3
 8005e94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	7b1b      	ldrb	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f040 8149 	bne.w	8006148 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	785b      	ldrb	r3, [r3, #1]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8084 	beq.w	8005fc8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	011a      	lsls	r2, r3, #4
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee2:	613b      	str	r3, [r7, #16]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	88db      	ldrh	r3, [r3, #6]
 8005ee8:	085b      	lsrs	r3, r3, #1
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	81fb      	strh	r3, [r7, #14]
 8005f02:	89fb      	ldrh	r3, [r7, #14]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <USB_ActivateEndpoint+0x17c>
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f22:	81bb      	strh	r3, [r7, #12]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	441a      	add	r2, r3
 8005f2e:	89bb      	ldrh	r3, [r7, #12]
 8005f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	78db      	ldrb	r3, [r3, #3]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d020      	beq.n	8005f8e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	813b      	strh	r3, [r7, #8]
 8005f64:	893b      	ldrh	r3, [r7, #8]
 8005f66:	f083 0320 	eor.w	r3, r3, #32
 8005f6a:	813b      	strh	r3, [r7, #8]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	441a      	add	r2, r3
 8005f76:	893b      	ldrh	r3, [r7, #8]
 8005f78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8013      	strh	r3, [r2, #0]
 8005f8c:	e27f      	b.n	800648e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fa4:	817b      	strh	r3, [r7, #10]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	441a      	add	r2, r3
 8005fb0:	897b      	ldrh	r3, [r7, #10]
 8005fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	8013      	strh	r3, [r2, #0]
 8005fc6:	e262      	b.n	800648e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	4413      	add	r3, r2
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	88db      	ldrh	r3, [r3, #6]
 8005ff0:	085b      	lsrs	r3, r3, #1
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006006:	b29b      	uxth	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	4413      	add	r3, r2
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	011a      	lsls	r2, r3, #4
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	4413      	add	r3, r2
 800601a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800601e:	623b      	str	r3, [r7, #32]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d112      	bne.n	800604e <USB_ActivateEndpoint+0x286>
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	881b      	ldrh	r3, [r3, #0]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006032:	b29a      	uxth	r2, r3
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	801a      	strh	r2, [r3, #0]
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e02f      	b.n	80060ae <USB_ActivateEndpoint+0x2e6>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b3e      	cmp	r3, #62	; 0x3e
 8006054:	d813      	bhi.n	800607e <USB_ActivateEndpoint+0x2b6>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	663b      	str	r3, [r7, #96]	; 0x60
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <USB_ActivateEndpoint+0x2a8>
 800606a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800606c:	3301      	adds	r3, #1
 800606e:	663b      	str	r3, [r7, #96]	; 0x60
 8006070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006072:	b29b      	uxth	r3, r3
 8006074:	029b      	lsls	r3, r3, #10
 8006076:	b29a      	uxth	r2, r3
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	e017      	b.n	80060ae <USB_ActivateEndpoint+0x2e6>
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	663b      	str	r3, [r7, #96]	; 0x60
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 031f 	and.w	r3, r3, #31
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <USB_ActivateEndpoint+0x2d0>
 8006092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006094:	3b01      	subs	r3, #1
 8006096:	663b      	str	r3, [r7, #96]	; 0x60
 8006098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800609a:	b29b      	uxth	r3, r3
 800609c:	029b      	lsls	r3, r3, #10
 800609e:	b29b      	uxth	r3, r3
 80060a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	83fb      	strh	r3, [r7, #30]
 80060bc:	8bfb      	ldrh	r3, [r7, #30]
 80060be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d01b      	beq.n	80060fe <USB_ActivateEndpoint+0x336>
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060dc:	83bb      	strh	r3, [r7, #28]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	441a      	add	r2, r3
 80060e8:	8bbb      	ldrh	r3, [r7, #28]
 80060ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006114:	837b      	strh	r3, [r7, #26]
 8006116:	8b7b      	ldrh	r3, [r7, #26]
 8006118:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800611c:	837b      	strh	r3, [r7, #26]
 800611e:	8b7b      	ldrh	r3, [r7, #26]
 8006120:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006124:	837b      	strh	r3, [r7, #26]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	8b7b      	ldrh	r3, [r7, #26]
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
 8006146:	e1a2      	b.n	800648e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	441a      	add	r2, r3
 800616c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006178:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800617c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006180:	b29b      	uxth	r3, r3
 8006182:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	65bb      	str	r3, [r7, #88]	; 0x58
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618e:	b29b      	uxth	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006194:	4413      	add	r3, r2
 8006196:	65bb      	str	r3, [r7, #88]	; 0x58
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	011a      	lsls	r2, r3, #4
 800619e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a6:	657b      	str	r3, [r7, #84]	; 0x54
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	891b      	ldrh	r3, [r3, #8]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	653b      	str	r3, [r7, #80]	; 0x50
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	461a      	mov	r2, r3
 80061c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c8:	4413      	add	r3, r2
 80061ca:	653b      	str	r3, [r7, #80]	; 0x50
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	011a      	lsls	r2, r3, #4
 80061d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	895b      	ldrh	r3, [r3, #10]
 80061e0:	085b      	lsrs	r3, r3, #1
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f040 8091 	bne.w	8006318 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006204:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01b      	beq.n	8006246 <USB_ActivateEndpoint+0x47e>
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006224:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	441a      	add	r2, r3
 8006230:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800623a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800623e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006242:	b29b      	uxth	r3, r3
 8006244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	873b      	strh	r3, [r7, #56]	; 0x38
 8006254:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01b      	beq.n	8006296 <USB_ActivateEndpoint+0x4ce>
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	441a      	add	r2, r3
 8006280:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006292:	b29b      	uxth	r3, r3
 8006294:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80062b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80062bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062f4:	867b      	strh	r3, [r7, #50]	; 0x32
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	441a      	add	r2, r3
 8006300:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800630e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]
 8006316:	e0ba      	b.n	800648e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	4413      	add	r3, r2
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006328:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800632c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d01d      	beq.n	8006370 <USB_ActivateEndpoint+0x5a8>
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800634a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	441a      	add	r2, r3
 8006358:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006380:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01d      	beq.n	80063c8 <USB_ActivateEndpoint+0x600>
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	441a      	add	r2, r3
 80063b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80063b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	78db      	ldrb	r3, [r3, #3]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d024      	beq.n	800641a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80063ee:	f083 0320 	eor.w	r3, r3, #32
 80063f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	441a      	add	r2, r3
 8006400:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800640c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006414:	b29b      	uxth	r3, r3
 8006416:	8013      	strh	r3, [r2, #0]
 8006418:	e01d      	b.n	8006456 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006430:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	441a      	add	r2, r3
 800643e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800648e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006492:	4618      	mov	r0, r3
 8006494:	376c      	adds	r7, #108	; 0x6c
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr

0800649c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800649c:	b480      	push	{r7}
 800649e:	b08d      	sub	sp, #52	; 0x34
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	7b1b      	ldrb	r3, [r3, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 808e 	bne.w	80065cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d044      	beq.n	8006542 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	81bb      	strh	r3, [r7, #12]
 80064c6:	89bb      	ldrh	r3, [r7, #12]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01b      	beq.n	8006508 <USB_DeactivateEndpoint+0x6c>
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e6:	817b      	strh	r3, [r7, #10]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	441a      	add	r2, r3
 80064f2:	897b      	ldrh	r3, [r7, #10]
 80064f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006500:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800651e:	813b      	strh	r3, [r7, #8]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	893b      	ldrh	r3, [r7, #8]
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]
 8006540:	e192      	b.n	8006868 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	827b      	strh	r3, [r7, #18]
 8006550:	8a7b      	ldrh	r3, [r7, #18]
 8006552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d01b      	beq.n	8006592 <USB_DeactivateEndpoint+0xf6>
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4413      	add	r3, r2
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006570:	823b      	strh	r3, [r7, #16]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	441a      	add	r2, r3
 800657c:	8a3b      	ldrh	r3, [r7, #16]
 800657e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	b29b      	uxth	r3, r3
 8006590:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	81fb      	strh	r3, [r7, #14]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	89fb      	ldrh	r3, [r7, #14]
 80065b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8013      	strh	r3, [r2, #0]
 80065ca:	e14d      	b.n	8006868 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 80a5 	bne.w	8006720 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	843b      	strh	r3, [r7, #32]
 80065e4:	8c3b      	ldrh	r3, [r7, #32]
 80065e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01b      	beq.n	8006626 <USB_DeactivateEndpoint+0x18a>
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006604:	83fb      	strh	r3, [r7, #30]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	441a      	add	r2, r3
 8006610:	8bfb      	ldrh	r3, [r7, #30]
 8006612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800661a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800661e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006622:	b29b      	uxth	r3, r3
 8006624:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	83bb      	strh	r3, [r7, #28]
 8006634:	8bbb      	ldrh	r3, [r7, #28]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01b      	beq.n	8006676 <USB_DeactivateEndpoint+0x1da>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006654:	837b      	strh	r3, [r7, #26]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	441a      	add	r2, r3
 8006660:	8b7b      	ldrh	r3, [r7, #26]
 8006662:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006666:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006672:	b29b      	uxth	r3, r3
 8006674:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	833b      	strh	r3, [r7, #24]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	441a      	add	r2, r3
 8006698:	8b3b      	ldrh	r3, [r7, #24]
 800669a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800669e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c4:	82fb      	strh	r3, [r7, #22]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	441a      	add	r2, r3
 80066d0:	8afb      	ldrh	r3, [r7, #22]
 80066d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066fc:	82bb      	strh	r3, [r7, #20]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	441a      	add	r2, r3
 8006708:	8abb      	ldrh	r3, [r7, #20]
 800670a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671a:	b29b      	uxth	r3, r3
 800671c:	8013      	strh	r3, [r2, #0]
 800671e:	e0a3      	b.n	8006868 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	881b      	ldrh	r3, [r3, #0]
 800672c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800672e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01b      	beq.n	8006770 <USB_DeactivateEndpoint+0x2d4>
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	441a      	add	r2, r3
 800675a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800675c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006760:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006764:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676c:	b29b      	uxth	r3, r3
 800676e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800677e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01b      	beq.n	80067c0 <USB_DeactivateEndpoint+0x324>
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	853b      	strh	r3, [r7, #40]	; 0x28
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	441a      	add	r2, r3
 80067aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067bc:	b29b      	uxth	r3, r3
 80067be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	441a      	add	r2, r3
 80067e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80067e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800680a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800680e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	441a      	add	r2, r3
 800681a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800681c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800682c:	b29b      	uxth	r3, r3
 800682e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29b      	uxth	r3, r3
 800683e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006846:	847b      	strh	r3, [r7, #34]	; 0x22
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	441a      	add	r2, r3
 8006852:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006854:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006858:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006864:	b29b      	uxth	r3, r3
 8006866:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3734      	adds	r7, #52	; 0x34
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr

08006874 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0cc      	sub	sp, #304	; 0x130
 8006878:	af00      	add	r7, sp, #0
 800687a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800687e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006882:	6018      	str	r0, [r3, #0]
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	785b      	ldrb	r3, [r3, #1]
 800689a:	2b01      	cmp	r3, #1
 800689c:	f041 817d 	bne.w	8007b9a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d908      	bls.n	80068ce <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80068bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068cc:	e007      	b.n	80068de <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80068ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80068de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	7b1b      	ldrb	r3, [r3, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d152      	bne.n	8006994 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80068ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6959      	ldr	r1, [r3, #20]
 80068fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	88da      	ldrh	r2, [r3, #6]
 8006906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690a:	b29b      	uxth	r3, r3
 800690c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006910:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006914:	6800      	ldr	r0, [r0, #0]
 8006916:	f001 ff23 	bl	8008760 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800691a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006922:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006926:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800693c:	b29b      	uxth	r3, r3
 800693e:	4619      	mov	r1, r3
 8006940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006944:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006948:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800694c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006950:	6812      	ldr	r2, [r2, #0]
 8006952:	440a      	add	r2, r1
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800695a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	011a      	lsls	r2, r3, #4
 8006964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006968:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4413      	add	r3, r2
 8006970:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006982:	b29a      	uxth	r2, r3
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	801a      	strh	r2, [r3, #0]
 8006990:	f001 b8b5 	b.w	8007afe <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006998:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	78db      	ldrb	r3, [r3, #3]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	f040 84c6 	bne.w	8007332 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80069a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6a1a      	ldr	r2, [r3, #32]
 80069b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	429a      	cmp	r2, r3
 80069c0:	f240 8443 	bls.w	800724a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80069ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a14:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a30:	1ad2      	subs	r2, r2, r3
 8006a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 823e 	beq.w	8006ee2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a6a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a72:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	785b      	ldrb	r3, [r3, #1]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f040 809a 	bne.w	8006bc0 <USB_EPStartXfer+0x34c>
 8006a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006abe:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	011a      	lsls	r2, r3, #4
 8006ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d122      	bne.n	8006b3e <USB_EPStartXfer+0x2ca>
 8006af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006afc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e079      	b.n	8006c32 <USB_EPStartXfer+0x3be>
 8006b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b42:	2b3e      	cmp	r3, #62	; 0x3e
 8006b44:	d81b      	bhi.n	8006b7e <USB_EPStartXfer+0x30a>
 8006b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d004      	beq.n	8006b66 <USB_EPStartXfer+0x2f2>
 8006b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b60:	3301      	adds	r3, #1
 8006b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	029b      	lsls	r3, r3, #10
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	e059      	b.n	8006c32 <USB_EPStartXfer+0x3be>
 8006b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <USB_EPStartXfer+0x32a>
 8006b94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	029b      	lsls	r3, r3, #10
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	e038      	b.n	8006c32 <USB_EPStartXfer+0x3be>
 8006bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	785b      	ldrb	r3, [r3, #1]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d130      	bne.n	8006c32 <USB_EPStartXfer+0x3be>
 8006bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	4619      	mov	r1, r3
 8006be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006bea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bee:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006bf2:	6812      	ldr	r2, [r2, #0]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	011a      	lsls	r2, r3, #4
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4413      	add	r3, r2
 8006c12:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6959      	ldr	r1, [r3, #20]
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c60:	6800      	ldr	r0, [r0, #0]
 8006c62:	f001 fd7d 	bl	8008760 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c76:	441a      	add	r2, r3
 8006c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d90f      	bls.n	8006cc0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a1a      	ldr	r2, [r3, #32]
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	621a      	str	r2, [r3, #32]
 8006cbe:	e00e      	b.n	8006cde <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 809a 	bne.w	8006e24 <USB_EPStartXfer+0x5b0>
 8006cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006cf8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006cfc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d00:	6812      	ldr	r2, [r2, #0]
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4619      	mov	r1, r3
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d22:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006d26:	6812      	ldr	r2, [r2, #0]
 8006d28:	440a      	add	r2, r1
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	011a      	lsls	r2, r3, #4
 8006d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4413      	add	r3, r2
 8006d46:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d122      	bne.n	8006da2 <USB_EPStartXfer+0x52e>
 8006d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d74:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	881b      	ldrh	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e083      	b.n	8006eaa <USB_EPStartXfer+0x636>
 8006da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da6:	2b3e      	cmp	r3, #62	; 0x3e
 8006da8:	d81b      	bhi.n	8006de2 <USB_EPStartXfer+0x56e>
 8006daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <USB_EPStartXfer+0x556>
 8006dc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	029b      	lsls	r3, r3, #10
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e063      	b.n	8006eaa <USB_EPStartXfer+0x636>
 8006de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df0:	f003 031f 	and.w	r3, r3, #31
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USB_EPStartXfer+0x58e>
 8006df8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e02:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	029b      	lsls	r3, r3, #10
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	801a      	strh	r2, [r3, #0]
 8006e22:	e042      	b.n	8006eaa <USB_EPStartXfer+0x636>
 8006e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d13a      	bne.n	8006eaa <USB_EPStartXfer+0x636>
 8006e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e40:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4619      	mov	r1, r3
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e66:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	440a      	add	r2, r1
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	011a      	lsls	r2, r3, #4
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e92:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	891b      	ldrh	r3, [r3, #8]
 8006eb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6959      	ldr	r1, [r3, #20]
 8006ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ed0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ed4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ed8:	6800      	ldr	r0, [r0, #0]
 8006eda:	f001 fc41 	bl	8008760 <USB_WritePMA>
 8006ede:	f000 be0e 	b.w	8007afe <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d16d      	bne.n	8006fce <USB_EPStartXfer+0x75a>
 8006ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	461a      	mov	r2, r3
 8006f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f12:	4413      	add	r3, r2
 8006f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	011a      	lsls	r2, r3, #4
 8006f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f26:	4413      	add	r3, r2
 8006f28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d112      	bne.n	8006f5c <USB_EPStartXfer+0x6e8>
 8006f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f40:	b29a      	uxth	r2, r3
 8006f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f44:	801a      	strh	r2, [r3, #0]
 8006f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	e063      	b.n	8007024 <USB_EPStartXfer+0x7b0>
 8006f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f60:	2b3e      	cmp	r3, #62	; 0x3e
 8006f62:	d817      	bhi.n	8006f94 <USB_EPStartXfer+0x720>
 8006f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d004      	beq.n	8006f84 <USB_EPStartXfer+0x710>
 8006f7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f84:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	029b      	lsls	r3, r3, #10
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f90:	801a      	strh	r2, [r3, #0]
 8006f92:	e047      	b.n	8007024 <USB_EPStartXfer+0x7b0>
 8006f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d104      	bne.n	8006fb4 <USB_EPStartXfer+0x740>
 8006faa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	029b      	lsls	r3, r3, #10
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fca:	801a      	strh	r2, [r3, #0]
 8006fcc:	e02a      	b.n	8007024 <USB_EPStartXfer+0x7b0>
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d122      	bne.n	8007024 <USB_EPStartXfer+0x7b0>
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	653b      	str	r3, [r7, #80]	; 0x50
 8006fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffe:	4413      	add	r3, r2
 8007000:	653b      	str	r3, [r7, #80]	; 0x50
 8007002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	011a      	lsls	r2, r3, #4
 8007010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007012:	4413      	add	r3, r2
 8007014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007018:	64fb      	str	r3, [r7, #76]	; 0x4c
 800701a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701e:	b29a      	uxth	r2, r3
 8007020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007022:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	891b      	ldrh	r3, [r3, #8]
 8007030:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6959      	ldr	r1, [r3, #20]
 8007040:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007044:	b29b      	uxth	r3, r3
 8007046:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800704a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800704e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007052:	6800      	ldr	r0, [r0, #0]
 8007054:	f001 fb84 	bl	8008760 <USB_WritePMA>
            ep->xfer_buff += len;
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695a      	ldr	r2, [r3, #20]
 8007064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007068:	441a      	add	r2, r3
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6a1a      	ldr	r2, [r3, #32]
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	429a      	cmp	r2, r3
 8007090:	d90f      	bls.n	80070b2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6a1a      	ldr	r2, [r3, #32]
 800709e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070a2:	1ad2      	subs	r2, r2, r3
 80070a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	621a      	str	r2, [r3, #32]
 80070b0:	e00e      	b.n	80070d0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80070c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2200      	movs	r2, #0
 80070ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	643b      	str	r3, [r7, #64]	; 0x40
 80070dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d16d      	bne.n	80071c8 <USB_EPStartXfer+0x954>
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	4413      	add	r3, r2
 800710e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	011a      	lsls	r2, r3, #4
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	4413      	add	r3, r2
 8007122:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
 8007128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d112      	bne.n	8007156 <USB_EPStartXfer+0x8e2>
 8007130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800713a:	b29a      	uxth	r2, r3
 800713c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800714a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800714e:	b29a      	uxth	r2, r3
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	801a      	strh	r2, [r3, #0]
 8007154:	e05d      	b.n	8007212 <USB_EPStartXfer+0x99e>
 8007156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715a:	2b3e      	cmp	r3, #62	; 0x3e
 800715c:	d817      	bhi.n	800718e <USB_EPStartXfer+0x91a>
 800715e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007162:	085b      	lsrs	r3, r3, #1
 8007164:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <USB_EPStartXfer+0x90a>
 8007174:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007178:	3301      	adds	r3, #1
 800717a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800717e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007182:	b29b      	uxth	r3, r3
 8007184:	029b      	lsls	r3, r3, #10
 8007186:	b29a      	uxth	r2, r3
 8007188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e041      	b.n	8007212 <USB_EPStartXfer+0x99e>
 800718e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d104      	bne.n	80071ae <USB_EPStartXfer+0x93a>
 80071a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071a8:	3b01      	subs	r3, #1
 80071aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	029b      	lsls	r3, r3, #10
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	e024      	b.n	8007212 <USB_EPStartXfer+0x99e>
 80071c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d11c      	bne.n	8007212 <USB_EPStartXfer+0x99e>
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ec:	4413      	add	r3, r2
 80071ee:	643b      	str	r3, [r7, #64]	; 0x40
 80071f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	011a      	lsls	r2, r3, #4
 80071fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007200:	4413      	add	r3, r2
 8007202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720c:	b29a      	uxth	r2, r3
 800720e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007210:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	895b      	ldrh	r3, [r3, #10]
 800721e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6959      	ldr	r1, [r3, #20]
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	b29b      	uxth	r3, r3
 8007234:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007238:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800723c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007240:	6800      	ldr	r0, [r0, #0]
 8007242:	f001 fa8d 	bl	8008760 <USB_WritePMA>
 8007246:	f000 bc5a 	b.w	8007afe <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800725a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	881b      	ldrh	r3, [r3, #0]
 8007276:	b29b      	uxth	r3, r3
 8007278:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800727c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007280:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	441a      	add	r2, r3
 800729e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80072a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80072b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	461a      	mov	r2, r3
 80072d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072d6:	4413      	add	r3, r2
 80072d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	011a      	lsls	r2, r3, #4
 80072e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072ea:	4413      	add	r3, r2
 80072ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	891b      	ldrh	r3, [r3, #8]
 8007308:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6959      	ldr	r1, [r3, #20]
 8007318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731c:	b29b      	uxth	r3, r3
 800731e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007322:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007326:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800732a:	6800      	ldr	r0, [r0, #0]
 800732c:	f001 fa18 	bl	8008760 <USB_WritePMA>
 8007330:	e3e5      	b.n	8007afe <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	881b      	ldrh	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007358:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800735c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007360:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	441a      	add	r2, r3
 8007376:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800737a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800737e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007382:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738a:	b29b      	uxth	r3, r3
 800738c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800738e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a1a      	ldr	r2, [r3, #32]
 800739a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80073ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 81bc 	beq.w	800774c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	785b      	ldrb	r3, [r3, #1]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d16d      	bne.n	80074ce <USB_EPStartXfer+0xc5a>
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740c:	b29b      	uxth	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007412:	4413      	add	r3, r2
 8007414:	67bb      	str	r3, [r7, #120]	; 0x78
 8007416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	011a      	lsls	r2, r3, #4
 8007424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007426:	4413      	add	r3, r2
 8007428:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800742c:	677b      	str	r3, [r7, #116]	; 0x74
 800742e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d112      	bne.n	800745c <USB_EPStartXfer+0xbe8>
 8007436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007440:	b29a      	uxth	r2, r3
 8007442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007454:	b29a      	uxth	r2, r3
 8007456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007458:	801a      	strh	r2, [r3, #0]
 800745a:	e060      	b.n	800751e <USB_EPStartXfer+0xcaa>
 800745c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007460:	2b3e      	cmp	r3, #62	; 0x3e
 8007462:	d817      	bhi.n	8007494 <USB_EPStartXfer+0xc20>
 8007464:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800746e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d004      	beq.n	8007484 <USB_EPStartXfer+0xc10>
 800747a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800747e:	3301      	adds	r3, #1
 8007480:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007484:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007488:	b29b      	uxth	r3, r3
 800748a:	029b      	lsls	r3, r3, #10
 800748c:	b29a      	uxth	r2, r3
 800748e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007490:	801a      	strh	r2, [r3, #0]
 8007492:	e044      	b.n	800751e <USB_EPStartXfer+0xcaa>
 8007494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007498:	095b      	lsrs	r3, r3, #5
 800749a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800749e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a2:	f003 031f 	and.w	r3, r3, #31
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d104      	bne.n	80074b4 <USB_EPStartXfer+0xc40>
 80074aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074ae:	3b01      	subs	r3, #1
 80074b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80074b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	029b      	lsls	r3, r3, #10
 80074bc:	b29b      	uxth	r3, r3
 80074be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074ca:	801a      	strh	r2, [r3, #0]
 80074cc:	e027      	b.n	800751e <USB_EPStartXfer+0xcaa>
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d11f      	bne.n	800751e <USB_EPStartXfer+0xcaa>
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074f4:	4413      	add	r3, r2
 80074f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	011a      	lsls	r2, r3, #4
 8007508:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800750c:	4413      	add	r3, r2
 800750e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007512:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007514:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007518:	b29a      	uxth	r2, r3
 800751a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800751c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	895b      	ldrh	r3, [r3, #10]
 800752a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800752e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6959      	ldr	r1, [r3, #20]
 800753a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753e:	b29b      	uxth	r3, r3
 8007540:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007544:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007548:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800754c:	6800      	ldr	r0, [r0, #0]
 800754e:	f001 f907 	bl	8008760 <USB_WritePMA>
          ep->xfer_buff += len;
 8007552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007562:	441a      	add	r2, r3
 8007564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6a1a      	ldr	r2, [r3, #32]
 800757c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	429a      	cmp	r2, r3
 800758a:	d90f      	bls.n	80075ac <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800758c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6a1a      	ldr	r2, [r3, #32]
 8007598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759c:	1ad2      	subs	r2, r2, r3
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	621a      	str	r2, [r3, #32]
 80075aa:	e00e      	b.n	80075ca <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80075ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80075bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2200      	movs	r2, #0
 80075c8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 8295 	beq.w	8007afe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	785b      	ldrb	r3, [r3, #1]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d16d      	bne.n	80076c0 <USB_EPStartXfer+0xe4c>
 80075e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80075f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075fe:	b29b      	uxth	r3, r3
 8007600:	461a      	mov	r2, r3
 8007602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007604:	4413      	add	r3, r2
 8007606:	66bb      	str	r3, [r7, #104]	; 0x68
 8007608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	011a      	lsls	r2, r3, #4
 8007616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007618:	4413      	add	r3, r2
 800761a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800761e:	667b      	str	r3, [r7, #100]	; 0x64
 8007620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d112      	bne.n	800764e <USB_EPStartXfer+0xdda>
 8007628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007632:	b29a      	uxth	r2, r3
 8007634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29b      	uxth	r3, r3
 800763e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007646:	b29a      	uxth	r2, r3
 8007648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764a:	801a      	strh	r2, [r3, #0]
 800764c:	e063      	b.n	8007716 <USB_EPStartXfer+0xea2>
 800764e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007652:	2b3e      	cmp	r3, #62	; 0x3e
 8007654:	d817      	bhi.n	8007686 <USB_EPStartXfer+0xe12>
 8007656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765a:	085b      	lsrs	r3, r3, #1
 800765c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <USB_EPStartXfer+0xe02>
 800766c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007670:	3301      	adds	r3, #1
 8007672:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800767a:	b29b      	uxth	r3, r3
 800767c:	029b      	lsls	r3, r3, #10
 800767e:	b29a      	uxth	r2, r3
 8007680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	e047      	b.n	8007716 <USB_EPStartXfer+0xea2>
 8007686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2b00      	cmp	r3, #0
 800769a:	d104      	bne.n	80076a6 <USB_EPStartXfer+0xe32>
 800769c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a0:	3b01      	subs	r3, #1
 80076a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	029b      	lsls	r3, r3, #10
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	e02a      	b.n	8007716 <USB_EPStartXfer+0xea2>
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d122      	bne.n	8007716 <USB_EPStartXfer+0xea2>
 80076d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	673b      	str	r3, [r7, #112]	; 0x70
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076f0:	4413      	add	r3, r2
 80076f2:	673b      	str	r3, [r7, #112]	; 0x70
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	011a      	lsls	r2, r3, #4
 8007702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007704:	4413      	add	r3, r2
 8007706:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800770a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800770c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007710:	b29a      	uxth	r2, r3
 8007712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007714:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	891b      	ldrh	r3, [r3, #8]
 8007722:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6959      	ldr	r1, [r3, #20]
 8007732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007736:	b29b      	uxth	r3, r3
 8007738:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800773c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007740:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007744:	6800      	ldr	r0, [r0, #0]
 8007746:	f001 f80b 	bl	8008760 <USB_WritePMA>
 800774a:	e1d8      	b.n	8007afe <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800774c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	785b      	ldrb	r3, [r3, #1]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d178      	bne.n	800784e <USB_EPStartXfer+0xfda>
 800775c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800776a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007778:	b29b      	uxth	r3, r3
 800777a:	461a      	mov	r2, r3
 800777c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007780:	4413      	add	r3, r2
 8007782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	011a      	lsls	r2, r3, #4
 8007794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007798:	4413      	add	r3, r2
 800779a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800779e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d116      	bne.n	80077d8 <USB_EPStartXfer+0xf64>
 80077aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077ae:	881b      	ldrh	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077d4:	801a      	strh	r2, [r3, #0]
 80077d6:	e06b      	b.n	80078b0 <USB_EPStartXfer+0x103c>
 80077d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077dc:	2b3e      	cmp	r3, #62	; 0x3e
 80077de:	d818      	bhi.n	8007812 <USB_EPStartXfer+0xf9e>
 80077e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e4:	085b      	lsrs	r3, r3, #1
 80077e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80077ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <USB_EPStartXfer+0xf8c>
 80077f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80077fa:	3301      	adds	r3, #1
 80077fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007800:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007804:	b29b      	uxth	r3, r3
 8007806:	029b      	lsls	r3, r3, #10
 8007808:	b29a      	uxth	r2, r3
 800780a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800780e:	801a      	strh	r2, [r3, #0]
 8007810:	e04e      	b.n	80078b0 <USB_EPStartXfer+0x103c>
 8007812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800781c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007820:	f003 031f 	and.w	r3, r3, #31
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <USB_EPStartXfer+0xfbe>
 8007828:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800782c:	3b01      	subs	r3, #1
 800782e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007832:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007836:	b29b      	uxth	r3, r3
 8007838:	029b      	lsls	r3, r3, #10
 800783a:	b29b      	uxth	r3, r3
 800783c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007844:	b29a      	uxth	r2, r3
 8007846:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800784a:	801a      	strh	r2, [r3, #0]
 800784c:	e030      	b.n	80078b0 <USB_EPStartXfer+0x103c>
 800784e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d128      	bne.n	80078b0 <USB_EPStartXfer+0x103c>
 800785e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800786c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787a:	b29b      	uxth	r3, r3
 800787c:	461a      	mov	r2, r3
 800787e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007882:	4413      	add	r3, r2
 8007884:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	011a      	lsls	r2, r3, #4
 8007896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800789a:	4413      	add	r3, r2
 800789c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	891b      	ldrh	r3, [r3, #8]
 80078bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6959      	ldr	r1, [r3, #20]
 80078cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078de:	6800      	ldr	r0, [r0, #0]
 80078e0:	f000 ff3e 	bl	8008760 <USB_WritePMA>
          ep->xfer_buff += len;
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695a      	ldr	r2, [r3, #20]
 80078f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f4:	441a      	add	r2, r3
 80078f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6a1a      	ldr	r2, [r3, #32]
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	429a      	cmp	r2, r3
 800791c:	d90f      	bls.n	800793e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6a1a      	ldr	r2, [r3, #32]
 800792a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	621a      	str	r2, [r3, #32]
 800793c:	e00e      	b.n	800795c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800793e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800794e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2200      	movs	r2, #0
 800795a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800795c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 80cc 	beq.w	8007afe <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d178      	bne.n	8007a76 <USB_EPStartXfer+0x1202>
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079a8:	4413      	add	r3, r2
 80079aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	011a      	lsls	r2, r3, #4
 80079bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079c0:	4413      	add	r3, r2
 80079c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d116      	bne.n	8007a00 <USB_EPStartXfer+0x118c>
 80079d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079de:	b29a      	uxth	r2, r3
 80079e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079e4:	801a      	strh	r2, [r3, #0]
 80079e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079fc:	801a      	strh	r2, [r3, #0]
 80079fe:	e064      	b.n	8007aca <USB_EPStartXfer+0x1256>
 8007a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a04:	2b3e      	cmp	r3, #62	; 0x3e
 8007a06:	d818      	bhi.n	8007a3a <USB_EPStartXfer+0x11c6>
 8007a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0c:	085b      	lsrs	r3, r3, #1
 8007a0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <USB_EPStartXfer+0x11b4>
 8007a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a22:	3301      	adds	r3, #1
 8007a24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	029b      	lsls	r3, r3, #10
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a36:	801a      	strh	r2, [r3, #0]
 8007a38:	e047      	b.n	8007aca <USB_EPStartXfer+0x1256>
 8007a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3e:	095b      	lsrs	r3, r3, #5
 8007a40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d104      	bne.n	8007a5a <USB_EPStartXfer+0x11e6>
 8007a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a54:	3b01      	subs	r3, #1
 8007a56:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	029b      	lsls	r3, r3, #10
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	e029      	b.n	8007aca <USB_EPStartXfer+0x1256>
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d121      	bne.n	8007aca <USB_EPStartXfer+0x1256>
 8007a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	011a      	lsls	r2, r3, #4
 8007ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ac8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	895b      	ldrh	r3, [r3, #10]
 8007ad6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6959      	ldr	r1, [r3, #20]
 8007ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007af0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007af4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007af8:	6800      	ldr	r0, [r0, #0]
 8007afa:	f000 fe31 	bl	8008760 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b20:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2c:	8013      	strh	r3, [r2, #0]
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b3a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b3e:	8812      	ldrh	r2, [r2, #0]
 8007b40:	f082 0210 	eor.w	r2, r2, #16
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007b52:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007b56:	8812      	ldrh	r2, [r2, #0]
 8007b58:	f082 0220 	eor.w	r2, r2, #32
 8007b5c:	801a      	strh	r2, [r3, #0]
 8007b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	441a      	add	r2, r3
 8007b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	8013      	strh	r3, [r2, #0]
 8007b96:	f000 bc9f 	b.w	80084d8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	7b1b      	ldrb	r3, [r3, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f040 80ae 	bne.w	8007d08 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699a      	ldr	r2, [r3, #24]
 8007bb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d917      	bls.n	8007bf8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be8:	1ad2      	subs	r2, r2, r3
 8007bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	619a      	str	r2, [r3, #24]
 8007bf6:	e00e      	b.n	8007c16 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2200      	movs	r2, #0
 8007c14:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	011a      	lsls	r2, r3, #4
 8007c4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c52:	4413      	add	r3, r2
 8007c54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d116      	bne.n	8007c92 <USB_EPStartXfer+0x141e>
 8007c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c76:	801a      	strh	r2, [r3, #0]
 8007c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c8e:	801a      	strh	r2, [r3, #0]
 8007c90:	e3e8      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
 8007c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c96:	2b3e      	cmp	r3, #62	; 0x3e
 8007c98:	d818      	bhi.n	8007ccc <USB_EPStartXfer+0x1458>
 8007c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9e:	085b      	lsrs	r3, r3, #1
 8007ca0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d004      	beq.n	8007cba <USB_EPStartXfer+0x1446>
 8007cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	029b      	lsls	r3, r3, #10
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cc8:	801a      	strh	r2, [r3, #0]
 8007cca:	e3cb      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
 8007ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	f003 031f 	and.w	r3, r3, #31
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d104      	bne.n	8007cec <USB_EPStartXfer+0x1478>
 8007ce2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007cec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	029b      	lsls	r3, r3, #10
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	e3ad      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	78db      	ldrb	r3, [r3, #3]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	f040 8200 	bne.w	800811a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f040 8091 	bne.w	8007e4e <USB_EPStartXfer+0x15da>
 8007d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d50:	4413      	add	r3, r2
 8007d52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	011a      	lsls	r2, r3, #4
 8007d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007d68:	4413      	add	r3, r2
 8007d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d116      	bne.n	8007db0 <USB_EPStartXfer+0x153c>
 8007d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d94:	801a      	strh	r2, [r3, #0]
 8007d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	e083      	b.n	8007eb8 <USB_EPStartXfer+0x1644>
 8007db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dbe:	d820      	bhi.n	8007e02 <USB_EPStartXfer+0x158e>
 8007dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	085b      	lsrs	r3, r3, #1
 8007dce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <USB_EPStartXfer+0x157c>
 8007de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dea:	3301      	adds	r3, #1
 8007dec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	e05a      	b.n	8007eb8 <USB_EPStartXfer+0x1644>
 8007e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	f003 031f 	and.w	r3, r3, #31
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d104      	bne.n	8007e32 <USB_EPStartXfer+0x15be>
 8007e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	029b      	lsls	r3, r3, #10
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e4a:	801a      	strh	r2, [r3, #0]
 8007e4c:	e034      	b.n	8007eb8 <USB_EPStartXfer+0x1644>
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d12c      	bne.n	8007eb8 <USB_EPStartXfer+0x1644>
 8007e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e82:	4413      	add	r3, r2
 8007e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	011a      	lsls	r2, r3, #4
 8007e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007eb6:	801a      	strh	r2, [r3, #0]
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	785b      	ldrb	r3, [r3, #1]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f040 8091 	bne.w	8007ffa <USB_EPStartXfer+0x1786>
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007efc:	4413      	add	r3, r2
 8007efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	011a      	lsls	r2, r3, #4
 8007f10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007f14:	4413      	add	r3, r2
 8007f16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d116      	bne.n	8007f5c <USB_EPStartXfer+0x16e8>
 8007f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f40:	801a      	strh	r2, [r3, #0]
 8007f42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f58:	801a      	strh	r2, [r3, #0]
 8007f5a:	e07c      	b.n	8008056 <USB_EPStartXfer+0x17e2>
 8007f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	2b3e      	cmp	r3, #62	; 0x3e
 8007f6a:	d820      	bhi.n	8007fae <USB_EPStartXfer+0x173a>
 8007f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <USB_EPStartXfer+0x1728>
 8007f92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f96:	3301      	adds	r3, #1
 8007f98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	029b      	lsls	r3, r3, #10
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	e053      	b.n	8008056 <USB_EPStartXfer+0x17e2>
 8007fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f003 031f 	and.w	r3, r3, #31
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d104      	bne.n	8007fde <USB_EPStartXfer+0x176a>
 8007fd4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	029b      	lsls	r3, r3, #10
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	e02d      	b.n	8008056 <USB_EPStartXfer+0x17e2>
 8007ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	785b      	ldrb	r3, [r3, #1]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d125      	bne.n	8008056 <USB_EPStartXfer+0x17e2>
 800800a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008018:	b29b      	uxth	r3, r3
 800801a:	461a      	mov	r2, r3
 800801c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008020:	4413      	add	r3, r2
 8008022:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	011a      	lsls	r2, r3, #4
 8008034:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008038:	4413      	add	r3, r2
 800803a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800803e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	b29a      	uxth	r2, r3
 8008050:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008054:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	69db      	ldr	r3, [r3, #28]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 81fe 	beq.w	8008464 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008088:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800808c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d005      	beq.n	80080a0 <USB_EPStartXfer+0x182c>
 8008094:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10d      	bne.n	80080bc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f040 81db 	bne.w	8008464 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80080ae:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80080b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f040 81d4 	bne.w	8008464 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80080bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	b29b      	uxth	r3, r3
 80080da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80080e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	441a      	add	r2, r3
 8008100:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800810c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008110:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008114:	b29b      	uxth	r3, r3
 8008116:	8013      	strh	r3, [r2, #0]
 8008118:	e1a4      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	78db      	ldrb	r3, [r3, #3]
 8008126:	2b01      	cmp	r3, #1
 8008128:	f040 819a 	bne.w	8008460 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	429a      	cmp	r2, r3
 8008146:	d917      	bls.n	8008178 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008168:	1ad2      	subs	r2, r2, r3
 800816a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	619a      	str	r2, [r3, #24]
 8008176:	e00e      	b.n	8008196 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008188:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2200      	movs	r2, #0
 8008194:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	785b      	ldrb	r3, [r3, #1]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d178      	bne.n	8008298 <USB_EPStartXfer+0x1a24>
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081ca:	4413      	add	r3, r2
 80081cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80081d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	011a      	lsls	r2, r3, #4
 80081de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80081e2:	4413      	add	r3, r2
 80081e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d116      	bne.n	8008222 <USB_EPStartXfer+0x19ae>
 80081f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008200:	b29a      	uxth	r2, r3
 8008202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008206:	801a      	strh	r2, [r3, #0]
 8008208:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008218:	b29a      	uxth	r2, r3
 800821a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800821e:	801a      	strh	r2, [r3, #0]
 8008220:	e06b      	b.n	80082fa <USB_EPStartXfer+0x1a86>
 8008222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008226:	2b3e      	cmp	r3, #62	; 0x3e
 8008228:	d818      	bhi.n	800825c <USB_EPStartXfer+0x19e8>
 800822a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <USB_EPStartXfer+0x19d6>
 8008240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008244:	3301      	adds	r3, #1
 8008246:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800824a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800824e:	b29b      	uxth	r3, r3
 8008250:	029b      	lsls	r3, r3, #10
 8008252:	b29a      	uxth	r2, r3
 8008254:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008258:	801a      	strh	r2, [r3, #0]
 800825a:	e04e      	b.n	80082fa <USB_EPStartXfer+0x1a86>
 800825c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008260:	095b      	lsrs	r3, r3, #5
 8008262:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	2b00      	cmp	r3, #0
 8008270:	d104      	bne.n	800827c <USB_EPStartXfer+0x1a08>
 8008272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008276:	3b01      	subs	r3, #1
 8008278:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800827c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008280:	b29b      	uxth	r3, r3
 8008282:	029b      	lsls	r3, r3, #10
 8008284:	b29b      	uxth	r3, r3
 8008286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800828e:	b29a      	uxth	r2, r3
 8008290:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	e030      	b.n	80082fa <USB_EPStartXfer+0x1a86>
 8008298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800829c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d128      	bne.n	80082fa <USB_EPStartXfer+0x1a86>
 80082a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	461a      	mov	r2, r3
 80082c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082cc:	4413      	add	r3, r2
 80082ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80082d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	011a      	lsls	r2, r3, #4
 80082e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082e4:	4413      	add	r3, r2
 80082e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80082ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d178      	bne.n	800840a <USB_EPStartXfer+0x1b96>
 8008318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008334:	b29b      	uxth	r3, r3
 8008336:	461a      	mov	r2, r3
 8008338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833c:	4413      	add	r3, r2
 800833e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	011a      	lsls	r2, r3, #4
 8008350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008354:	4413      	add	r3, r2
 8008356:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800835a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800835e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008362:	2b00      	cmp	r3, #0
 8008364:	d116      	bne.n	8008394 <USB_EPStartXfer+0x1b20>
 8008366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008372:	b29a      	uxth	r2, r3
 8008374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008378:	801a      	strh	r2, [r3, #0]
 800837a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800838a:	b29a      	uxth	r2, r3
 800838c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008390:	801a      	strh	r2, [r3, #0]
 8008392:	e067      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
 8008394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008398:	2b3e      	cmp	r3, #62	; 0x3e
 800839a:	d818      	bhi.n	80083ce <USB_EPStartXfer+0x1b5a>
 800839c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d004      	beq.n	80083bc <USB_EPStartXfer+0x1b48>
 80083b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083b6:	3301      	adds	r3, #1
 80083b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	029b      	lsls	r3, r3, #10
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	e04a      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
 80083ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083dc:	f003 031f 	and.w	r3, r3, #31
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d104      	bne.n	80083ee <USB_EPStartXfer+0x1b7a>
 80083e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083e8:	3b01      	subs	r3, #1
 80083ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80083ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e02c      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
 800840a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	785b      	ldrb	r3, [r3, #1]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d124      	bne.n	8008464 <USB_EPStartXfer+0x1bf0>
 800841a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008428:	b29b      	uxth	r3, r3
 800842a:	461a      	mov	r2, r3
 800842c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008430:	4413      	add	r3, r2
 8008432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	011a      	lsls	r2, r3, #4
 8008444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008448:	4413      	add	r3, r2
 800844a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800844e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008452:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008456:	b29a      	uxth	r2, r3
 8008458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845c:	801a      	strh	r2, [r3, #0]
 800845e:	e001      	b.n	8008464 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	e03a      	b.n	80084da <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	b29b      	uxth	r3, r3
 8008482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800848e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008492:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008496:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800849a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800849e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80084a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	441a      	add	r2, r3
 80084c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80084c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d020      	beq.n	8008538 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800850c:	81bb      	strh	r3, [r7, #12]
 800850e:	89bb      	ldrh	r3, [r7, #12]
 8008510:	f083 0310 	eor.w	r3, r3, #16
 8008514:	81bb      	strh	r3, [r7, #12]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	441a      	add	r2, r3
 8008520:	89bb      	ldrh	r3, [r7, #12]
 8008522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800852a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008532:	b29b      	uxth	r3, r3
 8008534:	8013      	strh	r3, [r2, #0]
 8008536:	e01f      	b.n	8008578 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800854a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854e:	81fb      	strh	r3, [r7, #14]
 8008550:	89fb      	ldrh	r3, [r7, #14]
 8008552:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008556:	81fb      	strh	r3, [r7, #14]
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	441a      	add	r2, r3
 8008562:	89fb      	ldrh	r3, [r7, #14]
 8008564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800856c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008574:	b29b      	uxth	r3, r3
 8008576:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008584:	b480      	push	{r7}
 8008586:	b087      	sub	sp, #28
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	7b1b      	ldrb	r3, [r3, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f040 809d 	bne.w	80086d2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d04c      	beq.n	800863a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	823b      	strh	r3, [r7, #16]
 80085ae:	8a3b      	ldrh	r3, [r7, #16]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01b      	beq.n	80085f0 <USB_EPClearStall+0x6c>
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ce:	81fb      	strh	r3, [r7, #14]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	441a      	add	r2, r3
 80085da:	89fb      	ldrh	r3, [r7, #14]
 80085dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	78db      	ldrb	r3, [r3, #3]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d06c      	beq.n	80086d2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800860a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800860e:	81bb      	strh	r3, [r7, #12]
 8008610:	89bb      	ldrh	r3, [r7, #12]
 8008612:	f083 0320 	eor.w	r3, r3, #32
 8008616:	81bb      	strh	r3, [r7, #12]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	441a      	add	r2, r3
 8008622:	89bb      	ldrh	r3, [r7, #12]
 8008624:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008628:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800862c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008634:	b29b      	uxth	r3, r3
 8008636:	8013      	strh	r3, [r2, #0]
 8008638:	e04b      	b.n	80086d2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	82fb      	strh	r3, [r7, #22]
 8008648:	8afb      	ldrh	r3, [r7, #22]
 800864a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01b      	beq.n	800868a <USB_EPClearStall+0x106>
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008668:	82bb      	strh	r3, [r7, #20]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	441a      	add	r2, r3
 8008674:	8abb      	ldrh	r3, [r7, #20]
 8008676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800867a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800867e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008686:	b29b      	uxth	r3, r3
 8008688:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	881b      	ldrh	r3, [r3, #0]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800869c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a0:	827b      	strh	r3, [r7, #18]
 80086a2:	8a7b      	ldrh	r3, [r7, #18]
 80086a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086a8:	827b      	strh	r3, [r7, #18]
 80086aa:	8a7b      	ldrh	r3, [r7, #18]
 80086ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80086b0:	827b      	strh	r3, [r7, #18]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	441a      	add	r2, r3
 80086bc:	8a7b      	ldrh	r3, [r7, #18]
 80086be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	371c      	adds	r7, #28
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	460b      	mov	r3, r1
 80086e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d103      	bne.n	80086f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2280      	movs	r2, #128	; 0x80
 80086f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	bc80      	pop	{r7}
 8008702:	4770      	bx	lr

08008704 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	bc80      	pop	{r7}
 800872a:	4770      	bx	lr

0800872c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800873a:	b29b      	uxth	r3, r3
 800873c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800873e:	68fb      	ldr	r3, [r7, #12]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	bc80      	pop	{r7}
 8008748:	4770      	bx	lr

0800874a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008760:	b480      	push	{r7}
 8008762:	b08d      	sub	sp, #52	; 0x34
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	4611      	mov	r1, r2
 800876c:	461a      	mov	r2, r3
 800876e:	460b      	mov	r3, r1
 8008770:	80fb      	strh	r3, [r7, #6]
 8008772:	4613      	mov	r3, r2
 8008774:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008776:	88bb      	ldrh	r3, [r7, #4]
 8008778:	3301      	adds	r3, #1
 800877a:	085b      	lsrs	r3, r3, #1
 800877c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008786:	88fb      	ldrh	r3, [r7, #6]
 8008788:	005a      	lsls	r2, r3, #1
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008792:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008798:	e01e      	b.n	80087d8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	3301      	adds	r3, #1
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	3302      	adds	r3, #2
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	3302      	adds	r3, #2
 80087ca:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	3301      	adds	r3, #1
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	3b01      	subs	r3, #1
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1dd      	bne.n	800879a <USB_WritePMA+0x3a>
  }
}
 80087de:	bf00      	nop
 80087e0:	bf00      	nop
 80087e2:	3734      	adds	r7, #52	; 0x34
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bc80      	pop	{r7}
 80087e8:	4770      	bx	lr

080087ea <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b08b      	sub	sp, #44	; 0x2c
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	60b9      	str	r1, [r7, #8]
 80087f4:	4611      	mov	r1, r2
 80087f6:	461a      	mov	r2, r3
 80087f8:	460b      	mov	r3, r1
 80087fa:	80fb      	strh	r3, [r7, #6]
 80087fc:	4613      	mov	r3, r2
 80087fe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008800:	88bb      	ldrh	r3, [r7, #4]
 8008802:	085b      	lsrs	r3, r3, #1
 8008804:	b29b      	uxth	r3, r3
 8008806:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008810:	88fb      	ldrh	r3, [r7, #6]
 8008812:	005a      	lsls	r2, r3, #1
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800881c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
 8008822:	e01b      	b.n	800885c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008824:	6a3b      	ldr	r3, [r7, #32]
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	b29b      	uxth	r3, r3
 800882a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	3302      	adds	r3, #2
 8008830:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	b2da      	uxtb	r2, r3
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	3301      	adds	r3, #1
 800883e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	b2da      	uxtb	r2, r3
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	3301      	adds	r3, #1
 800884e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	3302      	adds	r3, #2
 8008854:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	3b01      	subs	r3, #1
 800885a:	627b      	str	r3, [r7, #36]	; 0x24
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e0      	bne.n	8008824 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008862:	88bb      	ldrh	r3, [r7, #4]
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	b29b      	uxth	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	d007      	beq.n	800887e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	b2da      	uxtb	r2, r3
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	701a      	strb	r2, [r3, #0]
  }
}
 800887e:	bf00      	nop
 8008880:	372c      	adds	r7, #44	; 0x2c
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr

08008888 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	7c1b      	ldrb	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d115      	bne.n	80088cc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088a4:	2202      	movs	r2, #2
 80088a6:	2181      	movs	r1, #129	; 0x81
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f001 ffe0 	bl	800a86e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088b8:	2202      	movs	r2, #2
 80088ba:	2101      	movs	r1, #1
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 ffd6 	bl	800a86e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80088ca:	e012      	b.n	80088f2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80088cc:	2340      	movs	r3, #64	; 0x40
 80088ce:	2202      	movs	r2, #2
 80088d0:	2181      	movs	r1, #129	; 0x81
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 ffcb 	bl	800a86e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80088de:	2340      	movs	r3, #64	; 0x40
 80088e0:	2202      	movs	r2, #2
 80088e2:	2101      	movs	r1, #1
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 ffc2 	bl	800a86e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088f2:	2308      	movs	r3, #8
 80088f4:	2203      	movs	r2, #3
 80088f6:	2182      	movs	r1, #130	; 0x82
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 ffb8 	bl	800a86e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008904:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008908:	f002 f8d8 	bl	800aabc <USBD_static_malloc>
 800890c:	4602      	mov	r2, r0
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d102      	bne.n	8008924 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800891e:	2301      	movs	r3, #1
 8008920:	73fb      	strb	r3, [r7, #15]
 8008922:	e026      	b.n	8008972 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2200      	movs	r2, #0
 800893a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7c1b      	ldrb	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d109      	bne.n	8008962 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008958:	2101      	movs	r1, #1
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f002 f878 	bl	800aa50 <USBD_LL_PrepareReceive>
 8008960:	e007      	b.n	8008972 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008968:	2340      	movs	r3, #64	; 0x40
 800896a:	2101      	movs	r1, #1
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f002 f86f 	bl	800aa50 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008972:	7bfb      	ldrb	r3, [r7, #15]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800898c:	2181      	movs	r1, #129	; 0x81
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f001 ff93 	bl	800a8ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800899a:	2101      	movs	r1, #1
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 ff8c 	bl	800a8ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80089aa:	2182      	movs	r1, #130	; 0x82
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 ff84 	bl	800a8ba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00e      	beq.n	80089e0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089d2:	4618      	mov	r0, r3
 80089d4:	f002 f87e 	bl	800aad4 <USBD_static_free>
    pdev->pClassData = NULL;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089fa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d039      	beq.n	8008a88 <USBD_CDC_Setup+0x9e>
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d17f      	bne.n	8008b18 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d029      	beq.n	8008a74 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	b25b      	sxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da11      	bge.n	8008a4e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008a36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	88d2      	ldrh	r2, [r2, #6]
 8008a3c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a3e:	6939      	ldr	r1, [r7, #16]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	88db      	ldrh	r3, [r3, #6]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fa09 	bl	8009e5e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008a4c:	e06b      	b.n	8008b26 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	785a      	ldrb	r2, [r3, #1]
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	88db      	ldrh	r3, [r3, #6]
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008a64:	6939      	ldr	r1, [r7, #16]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	88db      	ldrh	r3, [r3, #6]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 fa24 	bl	8009eba <USBD_CtlPrepareRx>
      break;
 8008a72:	e058      	b.n	8008b26 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	7850      	ldrb	r0, [r2, #1]
 8008a80:	2200      	movs	r2, #0
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	4798      	blx	r3
      break;
 8008a86:	e04e      	b.n	8008b26 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b0b      	cmp	r3, #11
 8008a8e:	d02e      	beq.n	8008aee <USBD_CDC_Setup+0x104>
 8008a90:	2b0b      	cmp	r3, #11
 8008a92:	dc38      	bgt.n	8008b06 <USBD_CDC_Setup+0x11c>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <USBD_CDC_Setup+0xb4>
 8008a98:	2b0a      	cmp	r3, #10
 8008a9a:	d014      	beq.n	8008ac6 <USBD_CDC_Setup+0xdc>
 8008a9c:	e033      	b.n	8008b06 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d107      	bne.n	8008ab8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008aa8:	f107 030c 	add.w	r3, r7, #12
 8008aac:	2202      	movs	r2, #2
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f9d4 	bl	8009e5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ab6:	e02e      	b.n	8008b16 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 f965 	bl	8009d8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ac4:	e027      	b.n	8008b16 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d107      	bne.n	8008ae0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ad0:	f107 030f 	add.w	r3, r7, #15
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f9c0 	bl	8009e5e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ade:	e01a      	b.n	8008b16 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f951 	bl	8009d8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	75fb      	strb	r3, [r7, #23]
          break;
 8008aec:	e013      	b.n	8008b16 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d00d      	beq.n	8008b14 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 f945 	bl	8009d8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008b00:	2302      	movs	r3, #2
 8008b02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b04:	e006      	b.n	8008b14 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008b06:	6839      	ldr	r1, [r7, #0]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f93e 	bl	8009d8a <USBD_CtlError>
          ret = USBD_FAIL;
 8008b0e:	2302      	movs	r3, #2
 8008b10:	75fb      	strb	r3, [r7, #23]
          break;
 8008b12:	e000      	b.n	8008b16 <USBD_CDC_Setup+0x12c>
          break;
 8008b14:	bf00      	nop
      }
      break;
 8008b16:	e006      	b.n	8008b26 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f001 f935 	bl	8009d8a <USBD_CtlError>
      ret = USBD_FAIL;
 8008b20:	2302      	movs	r3, #2
 8008b22:	75fb      	strb	r3, [r7, #23]
      break;
 8008b24:	bf00      	nop
  }

  return ret;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b42:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b4a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d03a      	beq.n	8008bcc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	440b      	add	r3, r1
 8008b64:	331c      	adds	r3, #28
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d029      	beq.n	8008bc0 <USBD_CDC_DataIn+0x90>
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	4613      	mov	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	4413      	add	r3, r2
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	331c      	adds	r3, #28
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	78f9      	ldrb	r1, [r7, #3]
 8008b80:	68b8      	ldr	r0, [r7, #8]
 8008b82:	460b      	mov	r3, r1
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	00db      	lsls	r3, r3, #3
 8008b8a:	4403      	add	r3, r0
 8008b8c:	3338      	adds	r3, #56	; 0x38
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d110      	bne.n	8008bc0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008b9e:	78fa      	ldrb	r2, [r7, #3]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	331c      	adds	r3, #28
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008bb2:	78f9      	ldrb	r1, [r7, #3]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 ff26 	bl	800aa0a <USBD_LL_Transmit>
 8008bbe:	e003      	b.n	8008bc8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e000      	b.n	8008bce <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008bcc:	2302      	movs	r3, #2
  }
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b084      	sub	sp, #16
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
 8008bde:	460b      	mov	r3, r1
 8008be0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 ff51 	bl	800aa96 <USBD_LL_GetRxDataSize>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00d      	beq.n	8008c22 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4798      	blx	r3

    return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	e000      	b.n	8008c24 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008c22:	2302      	movs	r3, #2
  }
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c3a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d015      	beq.n	8008c72 <USBD_CDC_EP0_RxReady+0x46>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008c4c:	2bff      	cmp	r3, #255	; 0xff
 8008c4e:	d010      	beq.n	8008c72 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008c5e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008c66:	b292      	uxth	r2, r2
 8008c68:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	22ff      	movs	r2, #255	; 0xff
 8008c6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2243      	movs	r2, #67	; 0x43
 8008c88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008c8a:	4b03      	ldr	r3, [pc, #12]	; (8008c98 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	200000e8 	.word	0x200000e8

08008c9c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2243      	movs	r2, #67	; 0x43
 8008ca8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008caa:	4b03      	ldr	r3, [pc, #12]	; (8008cb8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bc80      	pop	{r7}
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	200000a4 	.word	0x200000a4

08008cbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2243      	movs	r2, #67	; 0x43
 8008cc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008cca:	4b03      	ldr	r3, [pc, #12]	; (8008cd8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	2000012c 	.word	0x2000012c

08008cdc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	220a      	movs	r2, #10
 8008ce8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008cea:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	20000060 	.word	0x20000060

08008cfc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008d06:	2302      	movs	r3, #2
 8008d08:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bc80      	pop	{r7}
 8008d26:	4770      	bx	lr

08008d28 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d46:	88fa      	ldrh	r2, [r7, #6]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	371c      	adds	r7, #28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr

08008d5a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	683a      	ldr	r2, [r7, #0]
 8008d70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bc80      	pop	{r7}
 8008d7e:	4770      	bx	lr

08008d80 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01c      	beq.n	8008dd4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d115      	bne.n	8008dd0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	2181      	movs	r1, #129	; 0x81
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fe1f 	bl	800aa0a <USBD_LL_Transmit>

      return USBD_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e002      	b.n	8008dd6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e000      	b.n	8008dd6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008dd4:	2302      	movs	r3, #2
  }
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d017      	beq.n	8008e28 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	7c1b      	ldrb	r3, [r3, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d109      	bne.n	8008e14 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 fe1f 	bl	800aa50 <USBD_LL_PrepareReceive>
 8008e12:	e007      	b.n	8008e24 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e1a:	2340      	movs	r3, #64	; 0x40
 8008e1c:	2101      	movs	r1, #1
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fe16 	bl	800aa50 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	e000      	b.n	8008e2a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008e28:	2302      	movs	r3, #2
  }
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d101      	bne.n	8008e4a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008e46:	2302      	movs	r3, #2
 8008e48:	e01a      	b.n	8008e80 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	79fa      	ldrb	r2, [r7, #7]
 8008e76:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f001 fc83 	bl	800a784 <USBD_LL_Init>

  return USBD_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3710      	adds	r7, #16
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d006      	beq.n	8008eaa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
 8008ea8:	e001      	b.n	8008eae <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008eaa:	2302      	movs	r3, #2
 8008eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bc80      	pop	{r7}
 8008eb8:	4770      	bx	lr

08008eba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 fcb8 	bl	800a838 <USBD_LL_Start>

  return USBD_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b083      	sub	sp, #12
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b084      	sub	sp, #16
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00c      	beq.n	8008f1a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	4798      	blx	r3
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fed8 	bl	8009d12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008f70:	461a      	mov	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d016      	beq.n	8008fb4 <USBD_LL_SetupStage+0x6a>
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d81c      	bhi.n	8008fc4 <USBD_LL_SetupStage+0x7a>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <USBD_LL_SetupStage+0x4a>
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d008      	beq.n	8008fa4 <USBD_LL_SetupStage+0x5a>
 8008f92:	e017      	b.n	8008fc4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f9cb 	bl	8009338 <USBD_StdDevReq>
      break;
 8008fa2:	e01a      	b.n	8008fda <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 fa2d 	bl	800940c <USBD_StdItfReq>
      break;
 8008fb2:	e012      	b.n	8008fda <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fa6d 	bl	800949c <USBD_StdEPReq>
      break;
 8008fc2:	e00a      	b.n	8008fda <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008fca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fc90 	bl	800a8f8 <USBD_LL_StallEP>
      break;
 8008fd8:	bf00      	nop
  }

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	460b      	mov	r3, r1
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d14b      	bne.n	8009090 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ffe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009006:	2b03      	cmp	r3, #3
 8009008:	d134      	bne.n	8009074 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	429a      	cmp	r2, r3
 8009014:	d919      	bls.n	800904a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	1ad2      	subs	r2, r2, r3
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800902c:	429a      	cmp	r2, r3
 800902e:	d203      	bcs.n	8009038 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009034:	b29b      	uxth	r3, r3
 8009036:	e002      	b.n	800903e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800903c:	b29b      	uxth	r3, r3
 800903e:	461a      	mov	r2, r3
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 ff57 	bl	8009ef6 <USBD_CtlContinueRx>
 8009048:	e038      	b.n	80090bc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800905c:	2b03      	cmp	r3, #3
 800905e:	d105      	bne.n	800906c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800906c:	68f8      	ldr	r0, [r7, #12]
 800906e:	f000 ff54 	bl	8009f1a <USBD_CtlSendStatus>
 8009072:	e023      	b.n	80090bc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800907a:	2b05      	cmp	r3, #5
 800907c:	d11e      	bne.n	80090bc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009086:	2100      	movs	r1, #0
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f001 fc35 	bl	800a8f8 <USBD_LL_StallEP>
 800908e:	e015      	b.n	80090bc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00d      	beq.n	80090b8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d108      	bne.n	80090b8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	7afa      	ldrb	r2, [r7, #11]
 80090b0:	4611      	mov	r1, r2
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	4798      	blx	r3
 80090b6:	e001      	b.n	80090bc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80090b8:	2302      	movs	r3, #2
 80090ba:	e000      	b.n	80090be <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	460b      	mov	r3, r1
 80090d0:	607a      	str	r2, [r7, #4]
 80090d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80090d4:	7afb      	ldrb	r3, [r7, #11]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d17f      	bne.n	80091da <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3314      	adds	r3, #20
 80090de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d15c      	bne.n	80091a4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d915      	bls.n	8009122 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	b29b      	uxth	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fec1 	bl	8009e96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009114:	2300      	movs	r3, #0
 8009116:	2200      	movs	r2, #0
 8009118:	2100      	movs	r1, #0
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f001 fc98 	bl	800aa50 <USBD_LL_PrepareReceive>
 8009120:	e04e      	b.n	80091c0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	6912      	ldr	r2, [r2, #16]
 800912a:	fbb3 f1f2 	udiv	r1, r3, r2
 800912e:	fb01 f202 	mul.w	r2, r1, r2
 8009132:	1a9b      	subs	r3, r3, r2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d11c      	bne.n	8009172 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	689a      	ldr	r2, [r3, #8]
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009140:	429a      	cmp	r2, r3
 8009142:	d316      	bcc.n	8009172 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	689a      	ldr	r2, [r3, #8]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800914e:	429a      	cmp	r2, r3
 8009150:	d20f      	bcs.n	8009172 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009152:	2200      	movs	r2, #0
 8009154:	2100      	movs	r1, #0
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fe9d 	bl	8009e96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009164:	2300      	movs	r3, #0
 8009166:	2200      	movs	r2, #0
 8009168:	2100      	movs	r1, #0
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f001 fc70 	bl	800aa50 <USBD_LL_PrepareReceive>
 8009170:	e026      	b.n	80091c0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009184:	2b03      	cmp	r3, #3
 8009186:	d105      	bne.n	8009194 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009194:	2180      	movs	r1, #128	; 0x80
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f001 fbae 	bl	800a8f8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fecf 	bl	8009f40 <USBD_CtlReceiveStatus>
 80091a2:	e00d      	b.n	80091c0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d004      	beq.n	80091b8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d103      	bne.n	80091c0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80091b8:	2180      	movs	r1, #128	; 0x80
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f001 fb9c 	bl	800a8f8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d11d      	bne.n	8009206 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fe81 	bl	8008ed2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80091d8:	e015      	b.n	8009206 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80091ec:	2b03      	cmp	r3, #3
 80091ee:	d108      	bne.n	8009202 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	7afa      	ldrb	r2, [r7, #11]
 80091fa:	4611      	mov	r1, r2
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	4798      	blx	r3
 8009200:	e001      	b.n	8009206 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009202:	2302      	movs	r3, #2
 8009204:	e000      	b.n	8009208 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009218:	2340      	movs	r3, #64	; 0x40
 800921a:	2200      	movs	r2, #0
 800921c:	2100      	movs	r1, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fb25 	bl	800a86e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2240      	movs	r2, #64	; 0x40
 8009230:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	2200      	movs	r2, #0
 8009238:	2180      	movs	r1, #128	; 0x80
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f001 fb17 	bl	800a86e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2240      	movs	r2, #64	; 0x40
 800924a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009270:	2b00      	cmp	r3, #0
 8009272:	d009      	beq.n	8009288 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	6852      	ldr	r2, [r2, #4]
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	4611      	mov	r1, r2
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	4798      	blx	r3
  }

  return USBD_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009292:	b480      	push	{r7}
 8009294:	b083      	sub	sp, #12
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	460b      	mov	r3, r1
 800929c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bc80      	pop	{r7}
 80092ae:	4770      	bx	lr

080092b0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2204      	movs	r2, #4
 80092c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bc80      	pop	{r7}
 80092d6:	4770      	bx	lr

080092d8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d105      	bne.n	80092f6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bc80      	pop	{r7}
 8009300:	4770      	bx	lr

08009302 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009310:	2b03      	cmp	r3, #3
 8009312:	d10b      	bne.n	800932c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931a:	69db      	ldr	r3, [r3, #28]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009326:	69db      	ldr	r3, [r3, #28]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	d005      	beq.n	800935e <USBD_StdDevReq+0x26>
 8009352:	2b40      	cmp	r3, #64	; 0x40
 8009354:	d84f      	bhi.n	80093f6 <USBD_StdDevReq+0xbe>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d009      	beq.n	800936e <USBD_StdDevReq+0x36>
 800935a:	2b20      	cmp	r3, #32
 800935c:	d14b      	bne.n	80093f6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	6839      	ldr	r1, [r7, #0]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3
      break;
 800936c:	e048      	b.n	8009400 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	785b      	ldrb	r3, [r3, #1]
 8009372:	2b09      	cmp	r3, #9
 8009374:	d839      	bhi.n	80093ea <USBD_StdDevReq+0xb2>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <USBD_StdDevReq+0x44>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	080093cd 	.word	0x080093cd
 8009380:	080093e1 	.word	0x080093e1
 8009384:	080093eb 	.word	0x080093eb
 8009388:	080093d7 	.word	0x080093d7
 800938c:	080093eb 	.word	0x080093eb
 8009390:	080093af 	.word	0x080093af
 8009394:	080093a5 	.word	0x080093a5
 8009398:	080093eb 	.word	0x080093eb
 800939c:	080093c3 	.word	0x080093c3
 80093a0:	080093b9 	.word	0x080093b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9dc 	bl	8009764 <USBD_GetDescriptor>
          break;
 80093ac:	e022      	b.n	80093f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fb3f 	bl	8009a34 <USBD_SetAddress>
          break;
 80093b6:	e01d      	b.n	80093f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fb7e 	bl	8009abc <USBD_SetConfig>
          break;
 80093c0:	e018      	b.n	80093f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fc07 	bl	8009bd8 <USBD_GetConfig>
          break;
 80093ca:	e013      	b.n	80093f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fc37 	bl	8009c42 <USBD_GetStatus>
          break;
 80093d4:	e00e      	b.n	80093f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fc65 	bl	8009ca8 <USBD_SetFeature>
          break;
 80093de:	e009      	b.n	80093f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fc74 	bl	8009cd0 <USBD_ClrFeature>
          break;
 80093e8:	e004      	b.n	80093f4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fccc 	bl	8009d8a <USBD_CtlError>
          break;
 80093f2:	bf00      	nop
      }
      break;
 80093f4:	e004      	b.n	8009400 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fcc6 	bl	8009d8a <USBD_CtlError>
      break;
 80093fe:	bf00      	nop
  }

  return ret;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop

0800940c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009416:	2300      	movs	r3, #0
 8009418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009422:	2b40      	cmp	r3, #64	; 0x40
 8009424:	d005      	beq.n	8009432 <USBD_StdItfReq+0x26>
 8009426:	2b40      	cmp	r3, #64	; 0x40
 8009428:	d82e      	bhi.n	8009488 <USBD_StdItfReq+0x7c>
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <USBD_StdItfReq+0x26>
 800942e:	2b20      	cmp	r3, #32
 8009430:	d12a      	bne.n	8009488 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009438:	3b01      	subs	r3, #1
 800943a:	2b02      	cmp	r3, #2
 800943c:	d81d      	bhi.n	800947a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	889b      	ldrh	r3, [r3, #4]
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b01      	cmp	r3, #1
 8009446:	d813      	bhi.n	8009470 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	4798      	blx	r3
 8009456:	4603      	mov	r3, r0
 8009458:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	88db      	ldrh	r3, [r3, #6]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d110      	bne.n	8009484 <USBD_StdItfReq+0x78>
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10d      	bne.n	8009484 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fd56 	bl	8009f1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800946e:	e009      	b.n	8009484 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc89 	bl	8009d8a <USBD_CtlError>
          break;
 8009478:	e004      	b.n	8009484 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fc84 	bl	8009d8a <USBD_CtlError>
          break;
 8009482:	e000      	b.n	8009486 <USBD_StdItfReq+0x7a>
          break;
 8009484:	bf00      	nop
      }
      break;
 8009486:	e004      	b.n	8009492 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fc7d 	bl	8009d8a <USBD_CtlError>
      break;
 8009490:	bf00      	nop
  }

  return USBD_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	889b      	ldrh	r3, [r3, #4]
 80094ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b8:	2b40      	cmp	r3, #64	; 0x40
 80094ba:	d007      	beq.n	80094cc <USBD_StdEPReq+0x30>
 80094bc:	2b40      	cmp	r3, #64	; 0x40
 80094be:	f200 8146 	bhi.w	800974e <USBD_StdEPReq+0x2b2>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <USBD_StdEPReq+0x40>
 80094c6:	2b20      	cmp	r3, #32
 80094c8:	f040 8141 	bne.w	800974e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	6839      	ldr	r1, [r7, #0]
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	4798      	blx	r3
      break;
 80094da:	e13d      	b.n	8009758 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094e4:	2b20      	cmp	r3, #32
 80094e6:	d10a      	bne.n	80094fe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	6839      	ldr	r1, [r7, #0]
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	e12d      	b.n	800975a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	2b03      	cmp	r3, #3
 8009504:	d007      	beq.n	8009516 <USBD_StdEPReq+0x7a>
 8009506:	2b03      	cmp	r3, #3
 8009508:	f300 811b 	bgt.w	8009742 <USBD_StdEPReq+0x2a6>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d072      	beq.n	80095f6 <USBD_StdEPReq+0x15a>
 8009510:	2b01      	cmp	r3, #1
 8009512:	d03a      	beq.n	800958a <USBD_StdEPReq+0xee>
 8009514:	e115      	b.n	8009742 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951c:	2b02      	cmp	r3, #2
 800951e:	d002      	beq.n	8009526 <USBD_StdEPReq+0x8a>
 8009520:	2b03      	cmp	r3, #3
 8009522:	d015      	beq.n	8009550 <USBD_StdEPReq+0xb4>
 8009524:	e02b      	b.n	800957e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00c      	beq.n	8009546 <USBD_StdEPReq+0xaa>
 800952c:	7bbb      	ldrb	r3, [r7, #14]
 800952e:	2b80      	cmp	r3, #128	; 0x80
 8009530:	d009      	beq.n	8009546 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009532:	7bbb      	ldrb	r3, [r7, #14]
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f001 f9de 	bl	800a8f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800953c:	2180      	movs	r1, #128	; 0x80
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f001 f9da 	bl	800a8f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009544:	e020      	b.n	8009588 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fc1e 	bl	8009d8a <USBD_CtlError>
              break;
 800954e:	e01b      	b.n	8009588 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	885b      	ldrh	r3, [r3, #2]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10e      	bne.n	8009576 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <USBD_StdEPReq+0xda>
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b80      	cmp	r3, #128	; 0x80
 8009562:	d008      	beq.n	8009576 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	88db      	ldrh	r3, [r3, #6]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d104      	bne.n	8009576 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800956c:	7bbb      	ldrb	r3, [r7, #14]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 f9c1 	bl	800a8f8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fccf 	bl	8009f1a <USBD_CtlSendStatus>

              break;
 800957c:	e004      	b.n	8009588 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fc02 	bl	8009d8a <USBD_CtlError>
              break;
 8009586:	bf00      	nop
          }
          break;
 8009588:	e0e0      	b.n	800974c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009590:	2b02      	cmp	r3, #2
 8009592:	d002      	beq.n	800959a <USBD_StdEPReq+0xfe>
 8009594:	2b03      	cmp	r3, #3
 8009596:	d015      	beq.n	80095c4 <USBD_StdEPReq+0x128>
 8009598:	e026      	b.n	80095e8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800959a:	7bbb      	ldrb	r3, [r7, #14]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d00c      	beq.n	80095ba <USBD_StdEPReq+0x11e>
 80095a0:	7bbb      	ldrb	r3, [r7, #14]
 80095a2:	2b80      	cmp	r3, #128	; 0x80
 80095a4:	d009      	beq.n	80095ba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f001 f9a4 	bl	800a8f8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80095b0:	2180      	movs	r1, #128	; 0x80
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 f9a0 	bl	800a8f8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095b8:	e01c      	b.n	80095f4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fbe4 	bl	8009d8a <USBD_CtlError>
              break;
 80095c2:	e017      	b.n	80095f4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	885b      	ldrh	r3, [r3, #2]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d112      	bne.n	80095f2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80095cc:	7bbb      	ldrb	r3, [r7, #14]
 80095ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 f9ab 	bl	800a936 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fc9a 	bl	8009f1a <USBD_CtlSendStatus>
              }
              break;
 80095e6:	e004      	b.n	80095f2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fbcd 	bl	8009d8a <USBD_CtlError>
              break;
 80095f0:	e000      	b.n	80095f4 <USBD_StdEPReq+0x158>
              break;
 80095f2:	bf00      	nop
          }
          break;
 80095f4:	e0aa      	b.n	800974c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d002      	beq.n	8009606 <USBD_StdEPReq+0x16a>
 8009600:	2b03      	cmp	r3, #3
 8009602:	d032      	beq.n	800966a <USBD_StdEPReq+0x1ce>
 8009604:	e097      	b.n	8009736 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <USBD_StdEPReq+0x180>
 800960c:	7bbb      	ldrb	r3, [r7, #14]
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	d004      	beq.n	800961c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fbb8 	bl	8009d8a <USBD_CtlError>
                break;
 800961a:	e091      	b.n	8009740 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800961c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	da0b      	bge.n	800963c <USBD_StdEPReq+0x1a0>
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800962a:	4613      	mov	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	3310      	adds	r3, #16
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	4413      	add	r3, r2
 8009638:	3304      	adds	r3, #4
 800963a:	e00b      	b.n	8009654 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800963c:	7bbb      	ldrb	r3, [r7, #14]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	3304      	adds	r3, #4
 8009654:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2200      	movs	r2, #0
 800965a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2202      	movs	r2, #2
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fbfb 	bl	8009e5e <USBD_CtlSendData>
              break;
 8009668:	e06a      	b.n	8009740 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800966a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800966e:	2b00      	cmp	r3, #0
 8009670:	da11      	bge.n	8009696 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	f003 020f 	and.w	r2, r3, #15
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	4613      	mov	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4413      	add	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	440b      	add	r3, r1
 8009684:	3318      	adds	r3, #24
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d117      	bne.n	80096bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fb7b 	bl	8009d8a <USBD_CtlError>
                  break;
 8009694:	e054      	b.n	8009740 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	f003 020f 	and.w	r2, r3, #15
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	440b      	add	r3, r1
 80096a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d104      	bne.n	80096bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fb68 	bl	8009d8a <USBD_CtlError>
                  break;
 80096ba:	e041      	b.n	8009740 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	da0b      	bge.n	80096dc <USBD_StdEPReq+0x240>
 80096c4:	7bbb      	ldrb	r3, [r7, #14]
 80096c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096ca:	4613      	mov	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	3310      	adds	r3, #16
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	4413      	add	r3, r2
 80096d8:	3304      	adds	r3, #4
 80096da:	e00b      	b.n	80096f4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	4413      	add	r3, r2
 80096f2:	3304      	adds	r3, #4
 80096f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <USBD_StdEPReq+0x266>
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b80      	cmp	r3, #128	; 0x80
 8009700:	d103      	bne.n	800970a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2200      	movs	r2, #0
 8009706:	601a      	str	r2, [r3, #0]
 8009708:	e00e      	b.n	8009728 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 f930 	bl	800a974 <USBD_LL_IsStallEP>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2201      	movs	r2, #1
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	e002      	b.n	8009728 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2200      	movs	r2, #0
 8009726:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2202      	movs	r2, #2
 800972c:	4619      	mov	r1, r3
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fb95 	bl	8009e5e <USBD_CtlSendData>
              break;
 8009734:	e004      	b.n	8009740 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fb26 	bl	8009d8a <USBD_CtlError>
              break;
 800973e:	bf00      	nop
          }
          break;
 8009740:	e004      	b.n	800974c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fb20 	bl	8009d8a <USBD_CtlError>
          break;
 800974a:	bf00      	nop
      }
      break;
 800974c:	e004      	b.n	8009758 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fb1a 	bl	8009d8a <USBD_CtlError>
      break;
 8009756:	bf00      	nop
  }

  return ret;
 8009758:	7bfb      	ldrb	r3, [r7, #15]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800976e:	2300      	movs	r3, #0
 8009770:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	2b06      	cmp	r3, #6
 8009786:	f200 8128 	bhi.w	80099da <USBD_GetDescriptor+0x276>
 800978a:	a201      	add	r2, pc, #4	; (adr r2, 8009790 <USBD_GetDescriptor+0x2c>)
 800978c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009790:	080097ad 	.word	0x080097ad
 8009794:	080097c5 	.word	0x080097c5
 8009798:	08009805 	.word	0x08009805
 800979c:	080099db 	.word	0x080099db
 80097a0:	080099db 	.word	0x080099db
 80097a4:	0800997b 	.word	0x0800997b
 80097a8:	080099a7 	.word	0x080099a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	7c12      	ldrb	r2, [r2, #16]
 80097b8:	f107 0108 	add.w	r1, r7, #8
 80097bc:	4610      	mov	r0, r2
 80097be:	4798      	blx	r3
 80097c0:	60f8      	str	r0, [r7, #12]
      break;
 80097c2:	e112      	b.n	80099ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	7c1b      	ldrb	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10d      	bne.n	80097e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d4:	f107 0208 	add.w	r2, r7, #8
 80097d8:	4610      	mov	r0, r2
 80097da:	4798      	blx	r3
 80097dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3301      	adds	r3, #1
 80097e2:	2202      	movs	r2, #2
 80097e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097e6:	e100      	b.n	80099ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	f107 0208 	add.w	r2, r7, #8
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
 80097f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3301      	adds	r3, #1
 80097fe:	2202      	movs	r2, #2
 8009800:	701a      	strb	r2, [r3, #0]
      break;
 8009802:	e0f2      	b.n	80099ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	885b      	ldrh	r3, [r3, #2]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b05      	cmp	r3, #5
 800980c:	f200 80ac 	bhi.w	8009968 <USBD_GetDescriptor+0x204>
 8009810:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <USBD_GetDescriptor+0xb4>)
 8009812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009816:	bf00      	nop
 8009818:	08009831 	.word	0x08009831
 800981c:	08009865 	.word	0x08009865
 8009820:	08009899 	.word	0x08009899
 8009824:	080098cd 	.word	0x080098cd
 8009828:	08009901 	.word	0x08009901
 800982c:	08009935 	.word	0x08009935
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7c12      	ldrb	r2, [r2, #16]
 8009848:	f107 0108 	add.w	r1, r7, #8
 800984c:	4610      	mov	r0, r2
 800984e:	4798      	blx	r3
 8009850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009852:	e091      	b.n	8009978 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa97 	bl	8009d8a <USBD_CtlError>
            err++;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	3301      	adds	r3, #1
 8009860:	72fb      	strb	r3, [r7, #11]
          break;
 8009862:	e089      	b.n	8009978 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	7c12      	ldrb	r2, [r2, #16]
 800987c:	f107 0108 	add.w	r1, r7, #8
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009886:	e077      	b.n	8009978 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa7d 	bl	8009d8a <USBD_CtlError>
            err++;
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	3301      	adds	r3, #1
 8009894:	72fb      	strb	r3, [r7, #11]
          break;
 8009896:	e06f      	b.n	8009978 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ba:	e05d      	b.n	8009978 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa63 	bl	8009d8a <USBD_CtlError>
            err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ca:	e055      	b.n	8009978 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	7c12      	ldrb	r2, [r2, #16]
 80098e4:	f107 0108 	add.w	r1, r7, #8
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ee:	e043      	b.n	8009978 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa49 	bl	8009d8a <USBD_CtlError>
            err++;
 80098f8:	7afb      	ldrb	r3, [r7, #11]
 80098fa:	3301      	adds	r3, #1
 80098fc:	72fb      	strb	r3, [r7, #11]
          break;
 80098fe:	e03b      	b.n	8009978 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00b      	beq.n	8009924 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	7c12      	ldrb	r2, [r2, #16]
 8009918:	f107 0108 	add.w	r1, r7, #8
 800991c:	4610      	mov	r0, r2
 800991e:	4798      	blx	r3
 8009920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009922:	e029      	b.n	8009978 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fa2f 	bl	8009d8a <USBD_CtlError>
            err++;
 800992c:	7afb      	ldrb	r3, [r7, #11]
 800992e:	3301      	adds	r3, #1
 8009930:	72fb      	strb	r3, [r7, #11]
          break;
 8009932:	e021      	b.n	8009978 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00b      	beq.n	8009958 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	7c12      	ldrb	r2, [r2, #16]
 800994c:	f107 0108 	add.w	r1, r7, #8
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009956:	e00f      	b.n	8009978 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa15 	bl	8009d8a <USBD_CtlError>
            err++;
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	3301      	adds	r3, #1
 8009964:	72fb      	strb	r3, [r7, #11]
          break;
 8009966:	e007      	b.n	8009978 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009968:	6839      	ldr	r1, [r7, #0]
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 fa0d 	bl	8009d8a <USBD_CtlError>
          err++;
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	3301      	adds	r3, #1
 8009974:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009976:	e038      	b.n	80099ea <USBD_GetDescriptor+0x286>
 8009978:	e037      	b.n	80099ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	7c1b      	ldrb	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d109      	bne.n	8009996 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	f107 0208 	add.w	r2, r7, #8
 800998e:	4610      	mov	r0, r2
 8009990:	4798      	blx	r3
 8009992:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009994:	e029      	b.n	80099ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009996:	6839      	ldr	r1, [r7, #0]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f9f6 	bl	8009d8a <USBD_CtlError>
        err++;
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	3301      	adds	r3, #1
 80099a2:	72fb      	strb	r3, [r7, #11]
      break;
 80099a4:	e021      	b.n	80099ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	7c1b      	ldrb	r3, [r3, #16]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10d      	bne.n	80099ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	f107 0208 	add.w	r2, r7, #8
 80099ba:	4610      	mov	r0, r2
 80099bc:	4798      	blx	r3
 80099be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	3301      	adds	r3, #1
 80099c4:	2207      	movs	r2, #7
 80099c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099c8:	e00f      	b.n	80099ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f9dc 	bl	8009d8a <USBD_CtlError>
        err++;
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	3301      	adds	r3, #1
 80099d6:	72fb      	strb	r3, [r7, #11]
      break;
 80099d8:	e007      	b.n	80099ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f9d4 	bl	8009d8a <USBD_CtlError>
      err++;
 80099e2:	7afb      	ldrb	r3, [r7, #11]
 80099e4:	3301      	adds	r3, #1
 80099e6:	72fb      	strb	r3, [r7, #11]
      break;
 80099e8:	bf00      	nop
  }

  if (err != 0U)
 80099ea:	7afb      	ldrb	r3, [r7, #11]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d11c      	bne.n	8009a2a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80099f0:	893b      	ldrh	r3, [r7, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d011      	beq.n	8009a1a <USBD_GetDescriptor+0x2b6>
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	88db      	ldrh	r3, [r3, #6]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00d      	beq.n	8009a1a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	88da      	ldrh	r2, [r3, #6]
 8009a02:	893b      	ldrh	r3, [r7, #8]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bf28      	it	cs
 8009a08:	4613      	movcs	r3, r2
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a0e:	893b      	ldrh	r3, [r7, #8]
 8009a10:	461a      	mov	r2, r3
 8009a12:	68f9      	ldr	r1, [r7, #12]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fa22 	bl	8009e5e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	88db      	ldrh	r3, [r3, #6]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa79 	bl	8009f1a <USBD_CtlSendStatus>
 8009a28:	e000      	b.n	8009a2c <USBD_GetDescriptor+0x2c8>
    return;
 8009a2a:	bf00      	nop
    }
  }
}
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop

08009a34 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	889b      	ldrh	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d130      	bne.n	8009aa8 <USBD_SetAddress+0x74>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	88db      	ldrh	r3, [r3, #6]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d12c      	bne.n	8009aa8 <USBD_SetAddress+0x74>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	885b      	ldrh	r3, [r3, #2]
 8009a52:	2b7f      	cmp	r3, #127	; 0x7f
 8009a54:	d828      	bhi.n	8009aa8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	885b      	ldrh	r3, [r3, #2]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d104      	bne.n	8009a76 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f98b 	bl	8009d8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a74:	e01d      	b.n	8009ab2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	7bfa      	ldrb	r2, [r7, #15]
 8009a7a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 ffa2 	bl	800a9cc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fa46 	bl	8009f1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d004      	beq.n	8009a9e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9c:	e009      	b.n	8009ab2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa6:	e004      	b.n	8009ab2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 f96d 	bl	8009d8a <USBD_CtlError>
  }
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	885b      	ldrh	r3, [r3, #2]
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	4b41      	ldr	r3, [pc, #260]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009ace:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ad0:	4b40      	ldr	r3, [pc, #256]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d904      	bls.n	8009ae2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f955 	bl	8009d8a <USBD_CtlError>
 8009ae0:	e075      	b.n	8009bce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d002      	beq.n	8009af2 <USBD_SetConfig+0x36>
 8009aec:	2b03      	cmp	r3, #3
 8009aee:	d023      	beq.n	8009b38 <USBD_SetConfig+0x7c>
 8009af0:	e062      	b.n	8009bb8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009af2:	4b38      	ldr	r3, [pc, #224]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d01a      	beq.n	8009b30 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009afa:	4b36      	ldr	r3, [pc, #216]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2203      	movs	r2, #3
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b0c:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff f9e7 	bl	8008ee6 <USBD_SetClassConfig>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d104      	bne.n	8009b28 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f932 	bl	8009d8a <USBD_CtlError>
            return;
 8009b26:	e052      	b.n	8009bce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f9f6 	bl	8009f1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b2e:	e04e      	b.n	8009bce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f9f2 	bl	8009f1a <USBD_CtlSendStatus>
        break;
 8009b36:	e04a      	b.n	8009bce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009b38:	4b26      	ldr	r3, [pc, #152]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d112      	bne.n	8009b66 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009b48:	4b22      	ldr	r3, [pc, #136]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009b52:	4b20      	ldr	r3, [pc, #128]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff f9e3 	bl	8008f24 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f9db 	bl	8009f1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009b64:	e033      	b.n	8009bce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009b66:	4b1b      	ldr	r3, [pc, #108]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d01d      	beq.n	8009bb0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff f9d1 	bl	8008f24 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009b82:	4b14      	ldr	r3, [pc, #80]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009b8c:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff f9a7 	bl	8008ee6 <USBD_SetClassConfig>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d104      	bne.n	8009ba8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009b9e:	6839      	ldr	r1, [r7, #0]
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f8f2 	bl	8009d8a <USBD_CtlError>
            return;
 8009ba6:	e012      	b.n	8009bce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f9b6 	bl	8009f1a <USBD_CtlSendStatus>
        break;
 8009bae:	e00e      	b.n	8009bce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f000 f9b2 	bl	8009f1a <USBD_CtlSendStatus>
        break;
 8009bb6:	e00a      	b.n	8009bce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f8e5 	bl	8009d8a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <USBD_SetConfig+0x118>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff f9ac 	bl	8008f24 <USBD_ClrClassConfig>
        break;
 8009bcc:	bf00      	nop
    }
  }
}
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	2000062c 	.word	0x2000062c

08009bd8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	88db      	ldrh	r3, [r3, #6]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d004      	beq.n	8009bf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f8cc 	bl	8009d8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009bf2:	e022      	b.n	8009c3a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	dc02      	bgt.n	8009c04 <USBD_GetConfig+0x2c>
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	dc03      	bgt.n	8009c0a <USBD_GetConfig+0x32>
 8009c02:	e015      	b.n	8009c30 <USBD_GetConfig+0x58>
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d00b      	beq.n	8009c20 <USBD_GetConfig+0x48>
 8009c08:	e012      	b.n	8009c30 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3308      	adds	r3, #8
 8009c14:	2201      	movs	r2, #1
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f920 	bl	8009e5e <USBD_CtlSendData>
        break;
 8009c1e:	e00c      	b.n	8009c3a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	3304      	adds	r3, #4
 8009c24:	2201      	movs	r2, #1
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f918 	bl	8009e5e <USBD_CtlSendData>
        break;
 8009c2e:	e004      	b.n	8009c3a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f8a9 	bl	8009d8a <USBD_CtlError>
        break;
 8009c38:	bf00      	nop
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c52:	3b01      	subs	r3, #1
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d81e      	bhi.n	8009c96 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	88db      	ldrh	r3, [r3, #6]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d004      	beq.n	8009c6a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f891 	bl	8009d8a <USBD_CtlError>
        break;
 8009c68:	e01a      	b.n	8009ca0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d005      	beq.n	8009c86 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f043 0202 	orr.w	r2, r3, #2
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	330c      	adds	r3, #12
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 f8e5 	bl	8009e5e <USBD_CtlSendData>
      break;
 8009c94:	e004      	b.n	8009ca0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f876 	bl	8009d8a <USBD_CtlError>
      break;
 8009c9e:	bf00      	nop
  }
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	885b      	ldrh	r3, [r3, #2]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d106      	bne.n	8009cc8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f929 	bl	8009f1a <USBD_CtlSendStatus>
  }
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d80b      	bhi.n	8009cfe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	885b      	ldrh	r3, [r3, #2]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10c      	bne.n	8009d08 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f90f 	bl	8009f1a <USBD_CtlSendStatus>
      }
      break;
 8009cfc:	e004      	b.n	8009d08 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009cfe:	6839      	ldr	r1, [r7, #0]
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f842 	bl	8009d8a <USBD_CtlError>
      break;
 8009d06:	e000      	b.n	8009d0a <USBD_ClrFeature+0x3a>
      break;
 8009d08:	bf00      	nop
  }
}
 8009d0a:	bf00      	nop
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d12:	b480      	push	{r7}
 8009d14:	b083      	sub	sp, #12
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781a      	ldrb	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	785a      	ldrb	r2, [r3, #1]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	3302      	adds	r3, #2
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	b29a      	uxth	r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	3303      	adds	r3, #3
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	4413      	add	r3, r2
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	3305      	adds	r3, #5
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	4413      	add	r3, r2
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	3306      	adds	r3, #6
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	3307      	adds	r3, #7
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	021b      	lsls	r3, r3, #8
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	4413      	add	r3, r2
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	80da      	strh	r2, [r3, #6]

}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bc80      	pop	{r7}
 8009d88:	4770      	bx	lr

08009d8a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009d94:	2180      	movs	r1, #128	; 0x80
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 fdae 	bl	800a8f8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fdaa 	bl	800a8f8 <USBD_LL_StallEP>
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009db8:	2300      	movs	r3, #0
 8009dba:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d032      	beq.n	8009e28 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f000 f834 	bl	8009e30 <USBD_GetLen>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	3301      	adds	r3, #1
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	75fa      	strb	r2, [r7, #23]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	4413      	add	r3, r2
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	7812      	ldrb	r2, [r2, #0]
 8009de6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009de8:	7dfb      	ldrb	r3, [r7, #23]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	75fa      	strb	r2, [r7, #23]
 8009dee:	461a      	mov	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	4413      	add	r3, r2
 8009df4:	2203      	movs	r2, #3
 8009df6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009df8:	e012      	b.n	8009e20 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	60fa      	str	r2, [r7, #12]
 8009e00:	7dfa      	ldrb	r2, [r7, #23]
 8009e02:	1c51      	adds	r1, r2, #1
 8009e04:	75f9      	strb	r1, [r7, #23]
 8009e06:	4611      	mov	r1, r2
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	440a      	add	r2, r1
 8009e0c:	781b      	ldrb	r3, [r3, #0]
 8009e0e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	1c5a      	adds	r2, r3, #1
 8009e14:	75fa      	strb	r2, [r7, #23]
 8009e16:	461a      	mov	r2, r3
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1e8      	bne.n	8009dfa <USBD_GetString+0x4e>
    }
  }
}
 8009e28:	bf00      	nop
 8009e2a:	3718      	adds	r7, #24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009e3c:	e005      	b.n	8009e4a <USBD_GetLen+0x1a>
  {
    len++;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
 8009e40:	3301      	adds	r3, #1
 8009e42:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3301      	adds	r3, #1
 8009e48:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1f5      	bne.n	8009e3e <USBD_GetLen+0xe>
  }

  return len;
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bc80      	pop	{r7}
 8009e5c:	4770      	bx	lr

08009e5e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b084      	sub	sp, #16
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	60b9      	str	r1, [r7, #8]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e74:	88fa      	ldrh	r2, [r7, #6]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009e7a:	88fa      	ldrh	r2, [r7, #6]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e80:	88fb      	ldrh	r3, [r7, #6]
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	2100      	movs	r1, #0
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 fdbf 	bl	800aa0a <USBD_LL_Transmit>

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ea4:	88fb      	ldrh	r3, [r7, #6]
 8009ea6:	68ba      	ldr	r2, [r7, #8]
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 fdad 	bl	800aa0a <USBD_LL_Transmit>

  return USBD_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	60f8      	str	r0, [r7, #12]
 8009ec2:	60b9      	str	r1, [r7, #8]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2203      	movs	r2, #3
 8009ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009ed8:	88fa      	ldrh	r2, [r7, #6]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ee0:	88fb      	ldrh	r3, [r7, #6]
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 fdb2 	bl	800aa50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b084      	sub	sp, #16
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	4613      	mov	r3, r2
 8009f02:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f04:	88fb      	ldrh	r3, [r7, #6]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	2100      	movs	r1, #0
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fda0 	bl	800aa50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2204      	movs	r2, #4
 8009f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fd6a 	bl	800aa0a <USBD_LL_Transmit>

  return USBD_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f50:	2300      	movs	r3, #0
 8009f52:	2200      	movs	r2, #0
 8009f54:	2100      	movs	r1, #0
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 fd7a 	bl	800aa50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	4912      	ldr	r1, [pc, #72]	; (8009fb8 <MX_USB_DEVICE_Init+0x50>)
 8009f70:	4812      	ldr	r0, [pc, #72]	; (8009fbc <MX_USB_DEVICE_Init+0x54>)
 8009f72:	f7fe ff5e 	bl	8008e32 <USBD_Init>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f7c:	f7f7 fb04 	bl	8001588 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f80:	490f      	ldr	r1, [pc, #60]	; (8009fc0 <MX_USB_DEVICE_Init+0x58>)
 8009f82:	480e      	ldr	r0, [pc, #56]	; (8009fbc <MX_USB_DEVICE_Init+0x54>)
 8009f84:	f7fe ff80 	bl	8008e88 <USBD_RegisterClass>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f8e:	f7f7 fafb 	bl	8001588 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f92:	490c      	ldr	r1, [pc, #48]	; (8009fc4 <MX_USB_DEVICE_Init+0x5c>)
 8009f94:	4809      	ldr	r0, [pc, #36]	; (8009fbc <MX_USB_DEVICE_Init+0x54>)
 8009f96:	f7fe feb1 	bl	8008cfc <USBD_CDC_RegisterInterface>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009fa0:	f7f7 faf2 	bl	8001588 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009fa4:	4805      	ldr	r0, [pc, #20]	; (8009fbc <MX_USB_DEVICE_Init+0x54>)
 8009fa6:	f7fe ff88 	bl	8008eba <USBD_Start>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d001      	beq.n	8009fb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009fb0:	f7f7 faea 	bl	8001588 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009fb4:	bf00      	nop
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	20000180 	.word	0x20000180
 8009fbc:	20000630 	.word	0x20000630
 8009fc0:	2000006c 	.word	0x2000006c
 8009fc4:	20000170 	.word	0x20000170

08009fc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4905      	ldr	r1, [pc, #20]	; (8009fe4 <CDC_Init_FS+0x1c>)
 8009fd0:	4805      	ldr	r0, [pc, #20]	; (8009fe8 <CDC_Init_FS+0x20>)
 8009fd2:	f7fe fea9 	bl	8008d28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fd6:	4905      	ldr	r1, [pc, #20]	; (8009fec <CDC_Init_FS+0x24>)
 8009fd8:	4803      	ldr	r0, [pc, #12]	; (8009fe8 <CDC_Init_FS+0x20>)
 8009fda:	f7fe febe 	bl	8008d5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	200009a8 	.word	0x200009a8
 8009fe8:	20000630 	.word	0x20000630
 8009fec:	20000968 	.word	0x20000968

08009ff0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ff4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bc80      	pop	{r7}
 8009ffc:	4770      	bx	lr
	...

0800a000 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	4603      	mov	r3, r0
 800a008:	6039      	str	r1, [r7, #0]
 800a00a:	71fb      	strb	r3, [r7, #7]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a010:	79fb      	ldrb	r3, [r7, #7]
 800a012:	2b23      	cmp	r3, #35	; 0x23
 800a014:	d84a      	bhi.n	800a0ac <CDC_Control_FS+0xac>
 800a016:	a201      	add	r2, pc, #4	; (adr r2, 800a01c <CDC_Control_FS+0x1c>)
 800a018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01c:	0800a0ad 	.word	0x0800a0ad
 800a020:	0800a0ad 	.word	0x0800a0ad
 800a024:	0800a0ad 	.word	0x0800a0ad
 800a028:	0800a0ad 	.word	0x0800a0ad
 800a02c:	0800a0ad 	.word	0x0800a0ad
 800a030:	0800a0ad 	.word	0x0800a0ad
 800a034:	0800a0ad 	.word	0x0800a0ad
 800a038:	0800a0ad 	.word	0x0800a0ad
 800a03c:	0800a0ad 	.word	0x0800a0ad
 800a040:	0800a0ad 	.word	0x0800a0ad
 800a044:	0800a0ad 	.word	0x0800a0ad
 800a048:	0800a0ad 	.word	0x0800a0ad
 800a04c:	0800a0ad 	.word	0x0800a0ad
 800a050:	0800a0ad 	.word	0x0800a0ad
 800a054:	0800a0ad 	.word	0x0800a0ad
 800a058:	0800a0ad 	.word	0x0800a0ad
 800a05c:	0800a0ad 	.word	0x0800a0ad
 800a060:	0800a0ad 	.word	0x0800a0ad
 800a064:	0800a0ad 	.word	0x0800a0ad
 800a068:	0800a0ad 	.word	0x0800a0ad
 800a06c:	0800a0ad 	.word	0x0800a0ad
 800a070:	0800a0ad 	.word	0x0800a0ad
 800a074:	0800a0ad 	.word	0x0800a0ad
 800a078:	0800a0ad 	.word	0x0800a0ad
 800a07c:	0800a0ad 	.word	0x0800a0ad
 800a080:	0800a0ad 	.word	0x0800a0ad
 800a084:	0800a0ad 	.word	0x0800a0ad
 800a088:	0800a0ad 	.word	0x0800a0ad
 800a08c:	0800a0ad 	.word	0x0800a0ad
 800a090:	0800a0ad 	.word	0x0800a0ad
 800a094:	0800a0ad 	.word	0x0800a0ad
 800a098:	0800a0ad 	.word	0x0800a0ad
 800a09c:	0800a0ad 	.word	0x0800a0ad
 800a0a0:	0800a0ad 	.word	0x0800a0ad
 800a0a4:	0800a0ad 	.word	0x0800a0ad
 800a0a8:	0800a0ad 	.word	0x0800a0ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a0ac:	bf00      	nop
  }

  return (USBD_OK);
 800a0ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bc80      	pop	{r7}
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop

0800a0bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t crc;
	int c;
//	uint8_t value;
//  HAL_StatusTypeDef OK;
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	48a1      	ldr	r0, [pc, #644]	; (800a350 <CDC_Receive_FS+0x294>)
 800a0ca:	f7fe fe46 	bl	8008d5a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0ce:	48a0      	ldr	r0, [pc, #640]	; (800a350 <CDC_Receive_FS+0x294>)
 800a0d0:	f7fe fe85 	bl	8008dde <USBD_CDC_ReceivePacket>
	BufRx[0]=BufRx[1]=BufRx[2]=BufRx[3]=0;
 800a0d4:	4b9f      	ldr	r3, [pc, #636]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	70da      	strb	r2, [r3, #3]
 800a0da:	4b9e      	ldr	r3, [pc, #632]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0dc:	78da      	ldrb	r2, [r3, #3]
 800a0de:	4b9d      	ldr	r3, [pc, #628]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0e0:	709a      	strb	r2, [r3, #2]
 800a0e2:	4b9c      	ldr	r3, [pc, #624]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0e4:	789a      	ldrb	r2, [r3, #2]
 800a0e6:	4b9b      	ldr	r3, [pc, #620]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0e8:	705a      	strb	r2, [r3, #1]
 800a0ea:	4b9a      	ldr	r3, [pc, #616]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0ec:	785a      	ldrb	r2, [r3, #1]
 800a0ee:	4b99      	ldr	r3, [pc, #612]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0f0:	701a      	strb	r2, [r3, #0]
  strlcpy((char*) BufRx, (char *) Buf, (*Len) + 1);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	4895      	ldr	r0, [pc, #596]	; (800a354 <CDC_Receive_FS+0x298>)
 800a0fe:	f001 f9fe 	bl	800b4fe <strlcpy>
	crc=BufRx[0]^BufRx[1]^BufRx[2];
 800a102:	4b94      	ldr	r3, [pc, #592]	; (800a354 <CDC_Receive_FS+0x298>)
 800a104:	781a      	ldrb	r2, [r3, #0]
 800a106:	4b93      	ldr	r3, [pc, #588]	; (800a354 <CDC_Receive_FS+0x298>)
 800a108:	785b      	ldrb	r3, [r3, #1]
 800a10a:	4053      	eors	r3, r2
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	4b91      	ldr	r3, [pc, #580]	; (800a354 <CDC_Receive_FS+0x298>)
 800a110:	789b      	ldrb	r3, [r3, #2]
 800a112:	4053      	eors	r3, r2
 800a114:	73fb      	strb	r3, [r7, #15]
	zeruj2(DataTx4,50);
 800a116:	2132      	movs	r1, #50	; 0x32
 800a118:	488f      	ldr	r0, [pc, #572]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a11a:	f7f6 ff55 	bl	8000fc8 <zeruj2>
	DataTx4[0]='$';
 800a11e:	4b8e      	ldr	r3, [pc, #568]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a120:	2224      	movs	r2, #36	; 0x24
 800a122:	701a      	strb	r2, [r3, #0]
	TX_f=0;
 800a124:	4b8d      	ldr	r3, [pc, #564]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a126:	2200      	movs	r2, #0
 800a128:	701a      	strb	r2, [r3, #0]
					if (OK==HAL_OK)
							CDC_Transmit_FS((uint8_t*)&value,1);
					} 
			}
		*/
	  if (BufRx[0]=='$' && BufRx[1]=='z' && BufRx[2]=='*' && crc==BufRx[3])
 800a12a:	4b8a      	ldr	r3, [pc, #552]	; (800a354 <CDC_Receive_FS+0x298>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b24      	cmp	r3, #36	; 0x24
 800a130:	d145      	bne.n	800a1be <CDC_Receive_FS+0x102>
 800a132:	4b88      	ldr	r3, [pc, #544]	; (800a354 <CDC_Receive_FS+0x298>)
 800a134:	785b      	ldrb	r3, [r3, #1]
 800a136:	2b7a      	cmp	r3, #122	; 0x7a
 800a138:	d141      	bne.n	800a1be <CDC_Receive_FS+0x102>
 800a13a:	4b86      	ldr	r3, [pc, #536]	; (800a354 <CDC_Receive_FS+0x298>)
 800a13c:	789b      	ldrb	r3, [r3, #2]
 800a13e:	2b2a      	cmp	r3, #42	; 0x2a
 800a140:	d13d      	bne.n	800a1be <CDC_Receive_FS+0x102>
 800a142:	4b84      	ldr	r3, [pc, #528]	; (800a354 <CDC_Receive_FS+0x298>)
 800a144:	78db      	ldrb	r3, [r3, #3]
 800a146:	7bfa      	ldrb	r2, [r7, #15]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d138      	bne.n	800a1be <CDC_Receive_FS+0x102>
			{
					zeruj();
 800a14c:	f7f6 ff24 	bl	8000f98 <zeruj>
					start=start^1;
 800a150:	4b83      	ldr	r3, [pc, #524]	; (800a360 <CDC_Receive_FS+0x2a4>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f083 0301 	eor.w	r3, r3, #1
 800a158:	4a81      	ldr	r2, [pc, #516]	; (800a360 <CDC_Receive_FS+0x2a4>)
 800a15a:	6013      	str	r3, [r2, #0]
					if (start>0)
 800a15c:	4b80      	ldr	r3, [pc, #512]	; (800a360 <CDC_Receive_FS+0x2a4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	dd0f      	ble.n	800a184 <CDC_Receive_FS+0xc8>
						{
						strcat(DataTx4,"start");
 800a164:	487c      	ldr	r0, [pc, #496]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a166:	f7f5 fff3 	bl	8000150 <strlen>
 800a16a:	4603      	mov	r3, r0
 800a16c:	461a      	mov	r2, r3
 800a16e:	4b7a      	ldr	r3, [pc, #488]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a170:	4413      	add	r3, r2
 800a172:	4a7c      	ldr	r2, [pc, #496]	; (800a364 <CDC_Receive_FS+0x2a8>)
 800a174:	6810      	ldr	r0, [r2, #0]
 800a176:	6018      	str	r0, [r3, #0]
 800a178:	8892      	ldrh	r2, [r2, #4]
 800a17a:	809a      	strh	r2, [r3, #4]
						komunikat=0;
 800a17c:	4b7a      	ldr	r3, [pc, #488]	; (800a368 <CDC_Receive_FS+0x2ac>)
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	e00c      	b.n	800a19e <CDC_Receive_FS+0xe2>
						}
					else
						strcat(DataTx4,"nostart");
 800a184:	4874      	ldr	r0, [pc, #464]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a186:	f7f5 ffe3 	bl	8000150 <strlen>
 800a18a:	4603      	mov	r3, r0
 800a18c:	461a      	mov	r2, r3
 800a18e:	4b72      	ldr	r3, [pc, #456]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a190:	4413      	add	r3, r2
 800a192:	4976      	ldr	r1, [pc, #472]	; (800a36c <CDC_Receive_FS+0x2b0>)
 800a194:	461a      	mov	r2, r3
 800a196:	460b      	mov	r3, r1
 800a198:	cb03      	ldmia	r3!, {r0, r1}
 800a19a:	6010      	str	r0, [r2, #0]
 800a19c:	6051      	str	r1, [r2, #4]
				strcat(DataTx4,"*");
 800a19e:	486e      	ldr	r0, [pc, #440]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a1a0:	f7f5 ffd6 	bl	8000150 <strlen>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	4b6b      	ldr	r3, [pc, #428]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a1aa:	4413      	add	r3, r2
 800a1ac:	4970      	ldr	r1, [pc, #448]	; (800a370 <CDC_Receive_FS+0x2b4>)
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	8013      	strh	r3, [r2, #0]
				TX_f=1;			
 800a1b6:	4b69      	ldr	r3, [pc, #420]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	701a      	strb	r2, [r3, #0]
 800a1bc:	e098      	b.n	800a2f0 <CDC_Receive_FS+0x234>
			}
		else if (BufRx[0]=='$' && BufRx[1]=='s' && BufRx[2]=='*' && crc==BufRx[3])
 800a1be:	4b65      	ldr	r3, [pc, #404]	; (800a354 <CDC_Receive_FS+0x298>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b24      	cmp	r3, #36	; 0x24
 800a1c4:	d14c      	bne.n	800a260 <CDC_Receive_FS+0x1a4>
 800a1c6:	4b63      	ldr	r3, [pc, #396]	; (800a354 <CDC_Receive_FS+0x298>)
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	2b73      	cmp	r3, #115	; 0x73
 800a1cc:	d148      	bne.n	800a260 <CDC_Receive_FS+0x1a4>
 800a1ce:	4b61      	ldr	r3, [pc, #388]	; (800a354 <CDC_Receive_FS+0x298>)
 800a1d0:	789b      	ldrb	r3, [r3, #2]
 800a1d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d4:	d144      	bne.n	800a260 <CDC_Receive_FS+0x1a4>
 800a1d6:	4b5f      	ldr	r3, [pc, #380]	; (800a354 <CDC_Receive_FS+0x298>)
 800a1d8:	78db      	ldrb	r3, [r3, #3]
 800a1da:	7bfa      	ldrb	r2, [r7, #15]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d13f      	bne.n	800a260 <CDC_Receive_FS+0x1a4>
			{
				if (scan_result==-1)
 800a1e0:	4b64      	ldr	r3, [pc, #400]	; (800a374 <CDC_Receive_FS+0x2b8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e8:	d10c      	bne.n	800a204 <CDC_Receive_FS+0x148>
					strcat(DataTx4,"fault");
 800a1ea:	485b      	ldr	r0, [pc, #364]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a1ec:	f7f5 ffb0 	bl	8000150 <strlen>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	4b58      	ldr	r3, [pc, #352]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a1f6:	4413      	add	r3, r2
 800a1f8:	4a5f      	ldr	r2, [pc, #380]	; (800a378 <CDC_Receive_FS+0x2bc>)
 800a1fa:	6810      	ldr	r0, [r2, #0]
 800a1fc:	6018      	str	r0, [r3, #0]
 800a1fe:	8892      	ldrh	r2, [r2, #4]
 800a200:	809a      	strh	r2, [r3, #4]
 800a202:	e01d      	b.n	800a240 <CDC_Receive_FS+0x184>
				else
					if (start==1)
 800a204:	4b56      	ldr	r3, [pc, #344]	; (800a360 <CDC_Receive_FS+0x2a4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d10d      	bne.n	800a228 <CDC_Receive_FS+0x16c>
						strcat(DataTx4,"scaning");
 800a20c:	4852      	ldr	r0, [pc, #328]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a20e:	f7f5 ff9f 	bl	8000150 <strlen>
 800a212:	4603      	mov	r3, r0
 800a214:	461a      	mov	r2, r3
 800a216:	4b50      	ldr	r3, [pc, #320]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a218:	4413      	add	r3, r2
 800a21a:	4958      	ldr	r1, [pc, #352]	; (800a37c <CDC_Receive_FS+0x2c0>)
 800a21c:	461a      	mov	r2, r3
 800a21e:	460b      	mov	r3, r1
 800a220:	cb03      	ldmia	r3!, {r0, r1}
 800a222:	6010      	str	r0, [r2, #0]
 800a224:	6051      	str	r1, [r2, #4]
 800a226:	e00b      	b.n	800a240 <CDC_Receive_FS+0x184>
					else
						strcat(DataTx4,"Idle");
 800a228:	484b      	ldr	r0, [pc, #300]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a22a:	f7f5 ff91 	bl	8000150 <strlen>
 800a22e:	4603      	mov	r3, r0
 800a230:	461a      	mov	r2, r3
 800a232:	4b49      	ldr	r3, [pc, #292]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a234:	4413      	add	r3, r2
 800a236:	4a52      	ldr	r2, [pc, #328]	; (800a380 <CDC_Receive_FS+0x2c4>)
 800a238:	6810      	ldr	r0, [r2, #0]
 800a23a:	6018      	str	r0, [r3, #0]
 800a23c:	7912      	ldrb	r2, [r2, #4]
 800a23e:	711a      	strb	r2, [r3, #4]
				strcat(DataTx4,"*");
 800a240:	4845      	ldr	r0, [pc, #276]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a242:	f7f5 ff85 	bl	8000150 <strlen>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
 800a24a:	4b43      	ldr	r3, [pc, #268]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a24c:	4413      	add	r3, r2
 800a24e:	4948      	ldr	r1, [pc, #288]	; (800a370 <CDC_Receive_FS+0x2b4>)
 800a250:	461a      	mov	r2, r3
 800a252:	460b      	mov	r3, r1
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	8013      	strh	r3, [r2, #0]
				TX_f=1;
 800a258:	4b40      	ldr	r3, [pc, #256]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a25a:	2201      	movs	r2, #1
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	e047      	b.n	800a2f0 <CDC_Receive_FS+0x234>
				}
		else if (BufRx[0]	=='$' && BufRx[1]=='v' && BufRx[2]=='*' && crc==BufRx[3])
 800a260:	4b3c      	ldr	r3, [pc, #240]	; (800a354 <CDC_Receive_FS+0x298>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b24      	cmp	r3, #36	; 0x24
 800a266:	d143      	bne.n	800a2f0 <CDC_Receive_FS+0x234>
 800a268:	4b3a      	ldr	r3, [pc, #232]	; (800a354 <CDC_Receive_FS+0x298>)
 800a26a:	785b      	ldrb	r3, [r3, #1]
 800a26c:	2b76      	cmp	r3, #118	; 0x76
 800a26e:	d13f      	bne.n	800a2f0 <CDC_Receive_FS+0x234>
 800a270:	4b38      	ldr	r3, [pc, #224]	; (800a354 <CDC_Receive_FS+0x298>)
 800a272:	789b      	ldrb	r3, [r3, #2]
 800a274:	2b2a      	cmp	r3, #42	; 0x2a
 800a276:	d13b      	bne.n	800a2f0 <CDC_Receive_FS+0x234>
 800a278:	4b36      	ldr	r3, [pc, #216]	; (800a354 <CDC_Receive_FS+0x298>)
 800a27a:	78db      	ldrb	r3, [r3, #3]
 800a27c:	7bfa      	ldrb	r2, [r7, #15]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d136      	bne.n	800a2f0 <CDC_Receive_FS+0x234>
			{
				zeruj2(DataTx5,50);
 800a282:	2132      	movs	r1, #50	; 0x32
 800a284:	483f      	ldr	r0, [pc, #252]	; (800a384 <CDC_Receive_FS+0x2c8>)
 800a286:	f7f6 fe9f 	bl	8000fc8 <zeruj2>
				c=snprintf(DataTx5,50, "%.2f", Volume);
 800a28a:	4b3f      	ldr	r3, [pc, #252]	; (800a388 <CDC_Receive_FS+0x2cc>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	e9cd 2300 	strd	r2, r3, [sp]
 800a294:	4a3d      	ldr	r2, [pc, #244]	; (800a38c <CDC_Receive_FS+0x2d0>)
 800a296:	2132      	movs	r1, #50	; 0x32
 800a298:	483a      	ldr	r0, [pc, #232]	; (800a384 <CDC_Receive_FS+0x2c8>)
 800a29a:	f001 f8ed 	bl	800b478 <sniprintf>
 800a29e:	60b8      	str	r0, [r7, #8]
				if (c<0 || c>20)
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	db02      	blt.n	800a2ac <CDC_Receive_FS+0x1f0>
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b14      	cmp	r3, #20
 800a2aa:	dd03      	ble.n	800a2b4 <CDC_Receive_FS+0x1f8>
					TX_f=0;
 800a2ac:	4b2b      	ldr	r3, [pc, #172]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
 800a2b2:	e002      	b.n	800a2ba <CDC_Receive_FS+0x1fe>
				else
					TX_f=1;
 800a2b4:	4b29      	ldr	r3, [pc, #164]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	701a      	strb	r2, [r3, #0]
				if (DataTx5[0]=='-')
 800a2ba:	4b32      	ldr	r3, [pc, #200]	; (800a384 <CDC_Receive_FS+0x2c8>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	2b2d      	cmp	r3, #45	; 0x2d
 800a2c0:	d103      	bne.n	800a2ca <CDC_Receive_FS+0x20e>
					TX_f=0;
 800a2c2:	4b26      	ldr	r3, [pc, #152]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	701a      	strb	r2, [r3, #0]
 800a2c8:	e002      	b.n	800a2d0 <CDC_Receive_FS+0x214>
				else
					TX_f=1;	
 800a2ca:	4b24      	ldr	r3, [pc, #144]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	701a      	strb	r2, [r3, #0]
				strcat(DataTx4,DataTx5);
 800a2d0:	492c      	ldr	r1, [pc, #176]	; (800a384 <CDC_Receive_FS+0x2c8>)
 800a2d2:	4821      	ldr	r0, [pc, #132]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a2d4:	f001 f904 	bl	800b4e0 <strcat>
				strcat(DataTx4,"*");
 800a2d8:	481f      	ldr	r0, [pc, #124]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a2da:	f7f5 ff39 	bl	8000150 <strlen>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	4b1d      	ldr	r3, [pc, #116]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a2e4:	4413      	add	r3, r2
 800a2e6:	4922      	ldr	r1, [pc, #136]	; (800a370 <CDC_Receive_FS+0x2b4>)
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	8013      	strh	r3, [r2, #0]
				}
		if (TX_f==1)
 800a2f0:	4b1a      	ldr	r3, [pc, #104]	; (800a35c <CDC_Receive_FS+0x2a0>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d126      	bne.n	800a346 <CDC_Receive_FS+0x28a>
			{
				S=rozmiar(DataTx4,50);
 800a2f8:	2132      	movs	r1, #50	; 0x32
 800a2fa:	4817      	ldr	r0, [pc, #92]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a2fc:	f7f6 fe7e 	bl	8000ffc <rozmiar>
 800a300:	4603      	mov	r3, r0
 800a302:	4a23      	ldr	r2, [pc, #140]	; (800a390 <CDC_Receive_FS+0x2d4>)
 800a304:	6013      	str	r3, [r2, #0]
				if (S<50)
 800a306:	4b22      	ldr	r3, [pc, #136]	; (800a390 <CDC_Receive_FS+0x2d4>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b31      	cmp	r3, #49	; 0x31
 800a30c:	dc1b      	bgt.n	800a346 <CDC_Receive_FS+0x28a>
						{
						checksum1=calculate_CheckSum(DataTx4, S);
 800a30e:	4b20      	ldr	r3, [pc, #128]	; (800a390 <CDC_Receive_FS+0x2d4>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4619      	mov	r1, r3
 800a314:	4810      	ldr	r0, [pc, #64]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a316:	f7f6 fd4d 	bl	8000db4 <calculate_CheckSum>
 800a31a:	4603      	mov	r3, r0
 800a31c:	4a1d      	ldr	r2, [pc, #116]	; (800a394 <CDC_Receive_FS+0x2d8>)
 800a31e:	6013      	str	r3, [r2, #0]
						strcat(DataTx4,(char*) &checksum1);
 800a320:	491c      	ldr	r1, [pc, #112]	; (800a394 <CDC_Receive_FS+0x2d8>)
 800a322:	480d      	ldr	r0, [pc, #52]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a324:	f001 f8dc 	bl	800b4e0 <strcat>
						DataTx4[S+1]=0x0A;
 800a328:	4b19      	ldr	r3, [pc, #100]	; (800a390 <CDC_Receive_FS+0x2d4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	4a0a      	ldr	r2, [pc, #40]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a330:	210a      	movs	r1, #10
 800a332:	54d1      	strb	r1, [r2, r3]
						CDC_Transmit_FS((uint8_t*)DataTx4,S+2);
 800a334:	4b16      	ldr	r3, [pc, #88]	; (800a390 <CDC_Receive_FS+0x2d4>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3302      	adds	r3, #2
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4619      	mov	r1, r3
 800a340:	4805      	ldr	r0, [pc, #20]	; (800a358 <CDC_Receive_FS+0x29c>)
 800a342:	f000 f829 	bl	800a398 <CDC_Transmit_FS>
						}
			}
  return (USBD_OK);
 800a346:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20000630 	.word	0x20000630
 800a354:	2000092c 	.word	0x2000092c
 800a358:	200008f4 	.word	0x200008f4
 800a35c:	20000962 	.word	0x20000962
 800a360:	20000614 	.word	0x20000614
 800a364:	0800ea98 	.word	0x0800ea98
 800a368:	20000610 	.word	0x20000610
 800a36c:	0800eaa0 	.word	0x0800eaa0
 800a370:	0800eaa8 	.word	0x0800eaa8
 800a374:	20000618 	.word	0x20000618
 800a378:	0800eaac 	.word	0x0800eaac
 800a37c:	0800eab4 	.word	0x0800eab4
 800a380:	0800eabc 	.word	0x0800eabc
 800a384:	20000930 	.word	0x20000930
 800a388:	20000548 	.word	0x20000548
 800a38c:	0800eac4 	.word	0x0800eac4
 800a390:	20000964 	.word	0x20000964
 800a394:	20000928 	.word	0x20000928

0800a398 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a3a8:	4b0d      	ldr	r3, [pc, #52]	; (800a3e0 <CDC_Transmit_FS+0x48>)
 800a3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e00b      	b.n	800a3d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a3be:	887b      	ldrh	r3, [r7, #2]
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4806      	ldr	r0, [pc, #24]	; (800a3e0 <CDC_Transmit_FS+0x48>)
 800a3c6:	f7fe fcaf 	bl	8008d28 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a3ca:	4805      	ldr	r0, [pc, #20]	; (800a3e0 <CDC_Transmit_FS+0x48>)
 800a3cc:	f7fe fcd8 	bl	8008d80 <USBD_CDC_TransmitPacket>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000630 	.word	0x20000630

0800a3e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	6039      	str	r1, [r7, #0]
 800a3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	2212      	movs	r2, #18
 800a3f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3f6:	4b03      	ldr	r3, [pc, #12]	; (800a404 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bc80      	pop	{r7}
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	2000019c 	.word	0x2000019c

0800a408 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	2204      	movs	r2, #4
 800a418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a41a:	4b03      	ldr	r3, [pc, #12]	; (800a428 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	bc80      	pop	{r7}
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	200001b0 	.word	0x200001b0

0800a42c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d105      	bne.n	800a44a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	4907      	ldr	r1, [pc, #28]	; (800a460 <USBD_FS_ProductStrDescriptor+0x34>)
 800a442:	4808      	ldr	r0, [pc, #32]	; (800a464 <USBD_FS_ProductStrDescriptor+0x38>)
 800a444:	f7ff fcb2 	bl	8009dac <USBD_GetString>
 800a448:	e004      	b.n	800a454 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	4904      	ldr	r1, [pc, #16]	; (800a460 <USBD_FS_ProductStrDescriptor+0x34>)
 800a44e:	4805      	ldr	r0, [pc, #20]	; (800a464 <USBD_FS_ProductStrDescriptor+0x38>)
 800a450:	f7ff fcac 	bl	8009dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a456:	4618      	mov	r0, r3
 800a458:	3708      	adds	r7, #8
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	200009e8 	.word	0x200009e8
 800a464:	0800eacc 	.word	0x0800eacc

0800a468 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	4603      	mov	r3, r0
 800a470:	6039      	str	r1, [r7, #0]
 800a472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	4904      	ldr	r1, [pc, #16]	; (800a488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a478:	4804      	ldr	r0, [pc, #16]	; (800a48c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a47a:	f7ff fc97 	bl	8009dac <USBD_GetString>
  return USBD_StrDesc;
 800a47e:	4b02      	ldr	r3, [pc, #8]	; (800a488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a480:	4618      	mov	r0, r3
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	200009e8 	.word	0x200009e8
 800a48c:	0800eae4 	.word	0x0800eae4

0800a490 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	6039      	str	r1, [r7, #0]
 800a49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	221a      	movs	r2, #26
 800a4a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4a2:	f000 f843 	bl	800a52c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a4a6:	4b02      	ldr	r3, [pc, #8]	; (800a4b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	200001b4 	.word	0x200001b4

0800a4b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d105      	bne.n	800a4d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4907      	ldr	r1, [pc, #28]	; (800a4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4ca:	4808      	ldr	r0, [pc, #32]	; (800a4ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4cc:	f7ff fc6e 	bl	8009dac <USBD_GetString>
 800a4d0:	e004      	b.n	800a4dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	4904      	ldr	r1, [pc, #16]	; (800a4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a4d6:	4805      	ldr	r0, [pc, #20]	; (800a4ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800a4d8:	f7ff fc68 	bl	8009dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4dc:	4b02      	ldr	r3, [pc, #8]	; (800a4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200009e8 	.word	0x200009e8
 800a4ec:	0800eaf8 	.word	0x0800eaf8

0800a4f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	6039      	str	r1, [r7, #0]
 800a4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d105      	bne.n	800a50e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	4907      	ldr	r1, [pc, #28]	; (800a524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a506:	4808      	ldr	r0, [pc, #32]	; (800a528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a508:	f7ff fc50 	bl	8009dac <USBD_GetString>
 800a50c:	e004      	b.n	800a518 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	4904      	ldr	r1, [pc, #16]	; (800a524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a512:	4805      	ldr	r0, [pc, #20]	; (800a528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a514:	f7ff fc4a 	bl	8009dac <USBD_GetString>
  }
  return USBD_StrDesc;
 800a518:	4b02      	ldr	r3, [pc, #8]	; (800a524 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	200009e8 	.word	0x200009e8
 800a528:	0800eb04 	.word	0x0800eb04

0800a52c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a532:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <Get_SerialNum+0x44>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a538:	4b0e      	ldr	r3, [pc, #56]	; (800a574 <Get_SerialNum+0x48>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a53e:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <Get_SerialNum+0x4c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4413      	add	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d009      	beq.n	800a566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a552:	2208      	movs	r2, #8
 800a554:	4909      	ldr	r1, [pc, #36]	; (800a57c <Get_SerialNum+0x50>)
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 f814 	bl	800a584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a55c:	2204      	movs	r2, #4
 800a55e:	4908      	ldr	r1, [pc, #32]	; (800a580 <Get_SerialNum+0x54>)
 800a560:	68b8      	ldr	r0, [r7, #8]
 800a562:	f000 f80f 	bl	800a584 <IntToUnicode>
  }
}
 800a566:	bf00      	nop
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	1ffff7e8 	.word	0x1ffff7e8
 800a574:	1ffff7ec 	.word	0x1ffff7ec
 800a578:	1ffff7f0 	.word	0x1ffff7f0
 800a57c:	200001b6 	.word	0x200001b6
 800a580:	200001c6 	.word	0x200001c6

0800a584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4613      	mov	r3, r2
 800a590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a596:	2300      	movs	r3, #0
 800a598:	75fb      	strb	r3, [r7, #23]
 800a59a:	e027      	b.n	800a5ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	0f1b      	lsrs	r3, r3, #28
 800a5a0:	2b09      	cmp	r3, #9
 800a5a2:	d80b      	bhi.n	800a5bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	0f1b      	lsrs	r3, r3, #28
 800a5a8:	b2da      	uxtb	r2, r3
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	440b      	add	r3, r1
 800a5b4:	3230      	adds	r2, #48	; 0x30
 800a5b6:	b2d2      	uxtb	r2, r2
 800a5b8:	701a      	strb	r2, [r3, #0]
 800a5ba:	e00a      	b.n	800a5d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	0f1b      	lsrs	r3, r3, #28
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	7dfb      	ldrb	r3, [r7, #23]
 800a5c4:	005b      	lsls	r3, r3, #1
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	440b      	add	r3, r1
 800a5cc:	3237      	adds	r2, #55	; 0x37
 800a5ce:	b2d2      	uxtb	r2, r2
 800a5d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	011b      	lsls	r3, r3, #4
 800a5d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	3301      	adds	r3, #1
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	75fb      	strb	r3, [r7, #23]
 800a5ec:	7dfa      	ldrb	r2, [r7, #23]
 800a5ee:	79fb      	ldrb	r3, [r7, #7]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d3d3      	bcc.n	800a59c <IntToUnicode+0x18>
  }
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	371c      	adds	r7, #28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bc80      	pop	{r7}
 800a5fe:	4770      	bx	lr

0800a600 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a0d      	ldr	r2, [pc, #52]	; (800a644 <HAL_PCD_MspInit+0x44>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d113      	bne.n	800a63a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a612:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <HAL_PCD_MspInit+0x48>)
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	4a0c      	ldr	r2, [pc, #48]	; (800a648 <HAL_PCD_MspInit+0x48>)
 800a618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a61c:	61d3      	str	r3, [r2, #28]
 800a61e:	4b0a      	ldr	r3, [pc, #40]	; (800a648 <HAL_PCD_MspInit+0x48>)
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a62a:	2200      	movs	r2, #0
 800a62c:	2100      	movs	r1, #0
 800a62e:	2014      	movs	r0, #20
 800a630:	f7f7 fb29 	bl	8001c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a634:	2014      	movs	r0, #20
 800a636:	f7f7 fb42 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a63a:	bf00      	nop
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	40005c00 	.word	0x40005c00
 800a648:	40021000 	.word	0x40021000

0800a64c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a660:	4619      	mov	r1, r3
 800a662:	4610      	mov	r0, r2
 800a664:	f7fe fc71 	bl	8008f4a <USBD_LL_SetupStage>
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a682:	78fa      	ldrb	r2, [r7, #3]
 800a684:	6879      	ldr	r1, [r7, #4]
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	00db      	lsls	r3, r3, #3
 800a68e:	440b      	add	r3, r1
 800a690:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	78fb      	ldrb	r3, [r7, #3]
 800a698:	4619      	mov	r1, r3
 800a69a:	f7fe fca3 	bl	8008fe4 <USBD_LL_DataOutStage>
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b082      	sub	sp, #8
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a6b8:	78fa      	ldrb	r2, [r7, #3]
 800a6ba:	6879      	ldr	r1, [r7, #4]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4413      	add	r3, r2
 800a6c2:	00db      	lsls	r3, r3, #3
 800a6c4:	440b      	add	r3, r1
 800a6c6:	333c      	adds	r3, #60	; 0x3c
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	f7fe fcfa 	bl	80090c6 <USBD_LL_DataInStage>
}
 800a6d2:	bf00      	nop
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b082      	sub	sp, #8
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe fe0a 	bl	8009302 <USBD_LL_SOF>
}
 800a6ee:	bf00      	nop
 800a6f0:	3708      	adds	r7, #8
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6fe:	2301      	movs	r3, #1
 800a700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d001      	beq.n	800a70e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a70a:	f7f6 ff3d 	bl	8001588 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a714:	7bfa      	ldrb	r2, [r7, #15]
 800a716:	4611      	mov	r1, r2
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe fdba 	bl	8009292 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a724:	4618      	mov	r0, r3
 800a726:	f7fe fd73 	bl	8009210 <USBD_LL_Reset>
}
 800a72a:	bf00      	nop
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe fdb4 	bl	80092b0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <HAL_PCD_SuspendCallback+0x30>)
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	4a03      	ldr	r2, [pc, #12]	; (800a764 <HAL_PCD_SuspendCallback+0x30>)
 800a756:	f043 0306 	orr.w	r3, r3, #6
 800a75a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	e000ed00 	.word	0xe000ed00

0800a768 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fdae 	bl	80092d8 <USBD_LL_Resume>
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a78c:	4a28      	ldr	r2, [pc, #160]	; (800a830 <USBD_LL_Init+0xac>)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a26      	ldr	r2, [pc, #152]	; (800a830 <USBD_LL_Init+0xac>)
 800a798:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a79c:	4b24      	ldr	r3, [pc, #144]	; (800a830 <USBD_LL_Init+0xac>)
 800a79e:	4a25      	ldr	r2, [pc, #148]	; (800a834 <USBD_LL_Init+0xb0>)
 800a7a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a7a2:	4b23      	ldr	r3, [pc, #140]	; (800a830 <USBD_LL_Init+0xac>)
 800a7a4:	2208      	movs	r2, #8
 800a7a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a7a8:	4b21      	ldr	r3, [pc, #132]	; (800a830 <USBD_LL_Init+0xac>)
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a7ae:	4b20      	ldr	r3, [pc, #128]	; (800a830 <USBD_LL_Init+0xac>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a7b4:	4b1e      	ldr	r3, [pc, #120]	; (800a830 <USBD_LL_Init+0xac>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a7ba:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <USBD_LL_Init+0xac>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a7c0:	481b      	ldr	r0, [pc, #108]	; (800a830 <USBD_LL_Init+0xac>)
 800a7c2:	f7f8 fce3 	bl	800318c <HAL_PCD_Init>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a7cc:	f7f6 fedc 	bl	8001588 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7d6:	2318      	movs	r3, #24
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2100      	movs	r1, #0
 800a7dc:	f7fa f957 	bl	8004a8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7e6:	2358      	movs	r3, #88	; 0x58
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2180      	movs	r1, #128	; 0x80
 800a7ec:	f7fa f94f 	bl	8004a8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7f6:	23c0      	movs	r3, #192	; 0xc0
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2181      	movs	r1, #129	; 0x81
 800a7fc:	f7fa f947 	bl	8004a8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a806:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a80a:	2200      	movs	r2, #0
 800a80c:	2101      	movs	r1, #1
 800a80e:	f7fa f93e 	bl	8004a8e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a81c:	2200      	movs	r2, #0
 800a81e:	2182      	movs	r1, #130	; 0x82
 800a820:	f7fa f935 	bl	8004a8e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20000be8 	.word	0x20000be8
 800a834:	40005c00 	.word	0x40005c00

0800a838 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a84e:	4618      	mov	r0, r3
 800a850:	f7f8 fda7 	bl	80033a2 <HAL_PCD_Start>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 f94e 	bl	800aafc <USBD_Get_USB_Status>
 800a860:	4603      	mov	r3, r0
 800a862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a864:	7bbb      	ldrb	r3, [r7, #14]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b084      	sub	sp, #16
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
 800a876:	4608      	mov	r0, r1
 800a878:	4611      	mov	r1, r2
 800a87a:	461a      	mov	r2, r3
 800a87c:	4603      	mov	r3, r0
 800a87e:	70fb      	strb	r3, [r7, #3]
 800a880:	460b      	mov	r3, r1
 800a882:	70bb      	strb	r3, [r7, #2]
 800a884:	4613      	mov	r3, r2
 800a886:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a896:	78bb      	ldrb	r3, [r7, #2]
 800a898:	883a      	ldrh	r2, [r7, #0]
 800a89a:	78f9      	ldrb	r1, [r7, #3]
 800a89c:	f7f8 ff1f 	bl	80036de <HAL_PCD_EP_Open>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f000 f928 	bl	800aafc <USBD_Get_USB_Status>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3710      	adds	r7, #16
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8d4:	78fa      	ldrb	r2, [r7, #3]
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7f8 ff66 	bl	80037aa <HAL_PCD_EP_Close>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 f909 	bl	800aafc <USBD_Get_USB_Status>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3710      	adds	r7, #16
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	460b      	mov	r3, r1
 800a902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a912:	78fa      	ldrb	r2, [r7, #3]
 800a914:	4611      	mov	r1, r2
 800a916:	4618      	mov	r0, r3
 800a918:	f7f9 f826 	bl	8003968 <HAL_PCD_EP_SetStall>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a920:	7bfb      	ldrb	r3, [r7, #15]
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f8ea 	bl	800aafc <USBD_Get_USB_Status>
 800a928:	4603      	mov	r3, r0
 800a92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	460b      	mov	r3, r1
 800a940:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a950:	78fa      	ldrb	r2, [r7, #3]
 800a952:	4611      	mov	r1, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f7f9 f867 	bl	8003a28 <HAL_PCD_EP_ClrStall>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	4618      	mov	r0, r3
 800a962:	f000 f8cb 	bl	800aafc <USBD_Get_USB_Status>
 800a966:	4603      	mov	r3, r0
 800a968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a96a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a986:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	da0c      	bge.n	800a9aa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a990:	78fb      	ldrb	r3, [r7, #3]
 800a992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	1c5a      	adds	r2, r3, #1
 800a99a:	4613      	mov	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	00db      	lsls	r3, r3, #3
 800a9a2:	440b      	add	r3, r1
 800a9a4:	3302      	adds	r3, #2
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	e00b      	b.n	800a9c2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9b0:	68f9      	ldr	r1, [r7, #12]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	00db      	lsls	r3, r3, #3
 800a9ba:	440b      	add	r3, r1
 800a9bc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a9c0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bc80      	pop	{r7}
 800a9ca:	4770      	bx	lr

0800a9cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9e6:	78fa      	ldrb	r2, [r7, #3]
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7f8 fe52 	bl	8003694 <HAL_PCD_SetAddress>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 f880 	bl	800aafc <USBD_Get_USB_Status>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b086      	sub	sp, #24
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	60f8      	str	r0, [r7, #12]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	461a      	mov	r2, r3
 800aa16:	460b      	mov	r3, r1
 800aa18:	72fb      	strb	r3, [r7, #11]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa2c:	893b      	ldrh	r3, [r7, #8]
 800aa2e:	7af9      	ldrb	r1, [r7, #11]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	f7f8 ff56 	bl	80038e2 <HAL_PCD_EP_Transmit>
 800aa36:	4603      	mov	r3, r0
 800aa38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa3a:	7dfb      	ldrb	r3, [r7, #23]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 f85d 	bl	800aafc <USBD_Get_USB_Status>
 800aa42:	4603      	mov	r3, r0
 800aa44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa46:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	607a      	str	r2, [r7, #4]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	72fb      	strb	r3, [r7, #11]
 800aa60:	4613      	mov	r3, r2
 800aa62:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa72:	893b      	ldrh	r3, [r7, #8]
 800aa74:	7af9      	ldrb	r1, [r7, #11]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	f7f8 fedf 	bl	800383a <HAL_PCD_EP_Receive>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 f83a 	bl	800aafc <USBD_Get_USB_Status>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3718      	adds	r7, #24
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaa8:	78fa      	ldrb	r2, [r7, #3]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7f8 ff01 	bl	80038b4 <HAL_PCD_EP_GetRxCount>
 800aab2:	4603      	mov	r3, r0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aac4:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <USBD_static_malloc+0x14>)
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bc80      	pop	{r7}
 800aace:	4770      	bx	lr
 800aad0:	20000ed4 	.word	0x20000ed4

0800aad4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]

}
 800aadc:	bf00      	nop
 800aade:	370c      	adds	r7, #12
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bc80      	pop	{r7}
 800aae4:	4770      	bx	lr

0800aae6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aaf2:	bf00      	nop
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bc80      	pop	{r7}
 800aafa:	4770      	bx	lr

0800aafc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	2b03      	cmp	r3, #3
 800ab0e:	d817      	bhi.n	800ab40 <USBD_Get_USB_Status+0x44>
 800ab10:	a201      	add	r2, pc, #4	; (adr r2, 800ab18 <USBD_Get_USB_Status+0x1c>)
 800ab12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab16:	bf00      	nop
 800ab18:	0800ab29 	.word	0x0800ab29
 800ab1c:	0800ab2f 	.word	0x0800ab2f
 800ab20:	0800ab35 	.word	0x0800ab35
 800ab24:	0800ab3b 	.word	0x0800ab3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab2c:	e00b      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	73fb      	strb	r3, [r7, #15]
    break;
 800ab32:	e008      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab34:	2301      	movs	r3, #1
 800ab36:	73fb      	strb	r3, [r7, #15]
    break;
 800ab38:	e005      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab3e:	e002      	b.n	800ab46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab40:	2302      	movs	r3, #2
 800ab42:	73fb      	strb	r3, [r7, #15]
    break;
 800ab44:	bf00      	nop
  }
  return usb_status;
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bc80      	pop	{r7}
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop

0800ab54 <__errno>:
 800ab54:	4b01      	ldr	r3, [pc, #4]	; (800ab5c <__errno+0x8>)
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	200001d0 	.word	0x200001d0

0800ab60 <__libc_init_array>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	2600      	movs	r6, #0
 800ab64:	4d0c      	ldr	r5, [pc, #48]	; (800ab98 <__libc_init_array+0x38>)
 800ab66:	4c0d      	ldr	r4, [pc, #52]	; (800ab9c <__libc_init_array+0x3c>)
 800ab68:	1b64      	subs	r4, r4, r5
 800ab6a:	10a4      	asrs	r4, r4, #2
 800ab6c:	42a6      	cmp	r6, r4
 800ab6e:	d109      	bne.n	800ab84 <__libc_init_array+0x24>
 800ab70:	f003 ff70 	bl	800ea54 <_init>
 800ab74:	2600      	movs	r6, #0
 800ab76:	4d0a      	ldr	r5, [pc, #40]	; (800aba0 <__libc_init_array+0x40>)
 800ab78:	4c0a      	ldr	r4, [pc, #40]	; (800aba4 <__libc_init_array+0x44>)
 800ab7a:	1b64      	subs	r4, r4, r5
 800ab7c:	10a4      	asrs	r4, r4, #2
 800ab7e:	42a6      	cmp	r6, r4
 800ab80:	d105      	bne.n	800ab8e <__libc_init_array+0x2e>
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab88:	4798      	blx	r3
 800ab8a:	3601      	adds	r6, #1
 800ab8c:	e7ee      	b.n	800ab6c <__libc_init_array+0xc>
 800ab8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab92:	4798      	blx	r3
 800ab94:	3601      	adds	r6, #1
 800ab96:	e7f2      	b.n	800ab7e <__libc_init_array+0x1e>
 800ab98:	0800f0e0 	.word	0x0800f0e0
 800ab9c:	0800f0e0 	.word	0x0800f0e0
 800aba0:	0800f0e0 	.word	0x0800f0e0
 800aba4:	0800f0e4 	.word	0x0800f0e4

0800aba8 <memset>:
 800aba8:	4603      	mov	r3, r0
 800abaa:	4402      	add	r2, r0
 800abac:	4293      	cmp	r3, r2
 800abae:	d100      	bne.n	800abb2 <memset+0xa>
 800abb0:	4770      	bx	lr
 800abb2:	f803 1b01 	strb.w	r1, [r3], #1
 800abb6:	e7f9      	b.n	800abac <memset+0x4>

0800abb8 <__cvt>:
 800abb8:	2b00      	cmp	r3, #0
 800abba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abbe:	461f      	mov	r7, r3
 800abc0:	bfbb      	ittet	lt
 800abc2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800abc6:	461f      	movlt	r7, r3
 800abc8:	2300      	movge	r3, #0
 800abca:	232d      	movlt	r3, #45	; 0x2d
 800abcc:	b088      	sub	sp, #32
 800abce:	4614      	mov	r4, r2
 800abd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800abd2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800abd4:	7013      	strb	r3, [r2, #0]
 800abd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800abdc:	f023 0820 	bic.w	r8, r3, #32
 800abe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800abe4:	d005      	beq.n	800abf2 <__cvt+0x3a>
 800abe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800abea:	d100      	bne.n	800abee <__cvt+0x36>
 800abec:	3501      	adds	r5, #1
 800abee:	2302      	movs	r3, #2
 800abf0:	e000      	b.n	800abf4 <__cvt+0x3c>
 800abf2:	2303      	movs	r3, #3
 800abf4:	aa07      	add	r2, sp, #28
 800abf6:	9204      	str	r2, [sp, #16]
 800abf8:	aa06      	add	r2, sp, #24
 800abfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 800abfe:	e9cd 3500 	strd	r3, r5, [sp]
 800ac02:	4622      	mov	r2, r4
 800ac04:	463b      	mov	r3, r7
 800ac06:	f000 fd1b 	bl	800b640 <_dtoa_r>
 800ac0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac0e:	4606      	mov	r6, r0
 800ac10:	d102      	bne.n	800ac18 <__cvt+0x60>
 800ac12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac14:	07db      	lsls	r3, r3, #31
 800ac16:	d522      	bpl.n	800ac5e <__cvt+0xa6>
 800ac18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac1c:	eb06 0905 	add.w	r9, r6, r5
 800ac20:	d110      	bne.n	800ac44 <__cvt+0x8c>
 800ac22:	7833      	ldrb	r3, [r6, #0]
 800ac24:	2b30      	cmp	r3, #48	; 0x30
 800ac26:	d10a      	bne.n	800ac3e <__cvt+0x86>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4639      	mov	r1, r7
 800ac30:	f7f5 feba 	bl	80009a8 <__aeabi_dcmpeq>
 800ac34:	b918      	cbnz	r0, 800ac3e <__cvt+0x86>
 800ac36:	f1c5 0501 	rsb	r5, r5, #1
 800ac3a:	f8ca 5000 	str.w	r5, [sl]
 800ac3e:	f8da 3000 	ldr.w	r3, [sl]
 800ac42:	4499      	add	r9, r3
 800ac44:	2200      	movs	r2, #0
 800ac46:	2300      	movs	r3, #0
 800ac48:	4620      	mov	r0, r4
 800ac4a:	4639      	mov	r1, r7
 800ac4c:	f7f5 feac 	bl	80009a8 <__aeabi_dcmpeq>
 800ac50:	b108      	cbz	r0, 800ac56 <__cvt+0x9e>
 800ac52:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac56:	2230      	movs	r2, #48	; 0x30
 800ac58:	9b07      	ldr	r3, [sp, #28]
 800ac5a:	454b      	cmp	r3, r9
 800ac5c:	d307      	bcc.n	800ac6e <__cvt+0xb6>
 800ac5e:	4630      	mov	r0, r6
 800ac60:	9b07      	ldr	r3, [sp, #28]
 800ac62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ac64:	1b9b      	subs	r3, r3, r6
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	b008      	add	sp, #32
 800ac6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac6e:	1c59      	adds	r1, r3, #1
 800ac70:	9107      	str	r1, [sp, #28]
 800ac72:	701a      	strb	r2, [r3, #0]
 800ac74:	e7f0      	b.n	800ac58 <__cvt+0xa0>

0800ac76 <__exponent>:
 800ac76:	4603      	mov	r3, r0
 800ac78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac7a:	2900      	cmp	r1, #0
 800ac7c:	f803 2b02 	strb.w	r2, [r3], #2
 800ac80:	bfb6      	itet	lt
 800ac82:	222d      	movlt	r2, #45	; 0x2d
 800ac84:	222b      	movge	r2, #43	; 0x2b
 800ac86:	4249      	neglt	r1, r1
 800ac88:	2909      	cmp	r1, #9
 800ac8a:	7042      	strb	r2, [r0, #1]
 800ac8c:	dd2b      	ble.n	800ace6 <__exponent+0x70>
 800ac8e:	f10d 0407 	add.w	r4, sp, #7
 800ac92:	46a4      	mov	ip, r4
 800ac94:	270a      	movs	r7, #10
 800ac96:	fb91 f6f7 	sdiv	r6, r1, r7
 800ac9a:	460a      	mov	r2, r1
 800ac9c:	46a6      	mov	lr, r4
 800ac9e:	fb07 1516 	mls	r5, r7, r6, r1
 800aca2:	2a63      	cmp	r2, #99	; 0x63
 800aca4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800aca8:	4631      	mov	r1, r6
 800acaa:	f104 34ff 	add.w	r4, r4, #4294967295
 800acae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800acb2:	dcf0      	bgt.n	800ac96 <__exponent+0x20>
 800acb4:	3130      	adds	r1, #48	; 0x30
 800acb6:	f1ae 0502 	sub.w	r5, lr, #2
 800acba:	f804 1c01 	strb.w	r1, [r4, #-1]
 800acbe:	4629      	mov	r1, r5
 800acc0:	1c44      	adds	r4, r0, #1
 800acc2:	4561      	cmp	r1, ip
 800acc4:	d30a      	bcc.n	800acdc <__exponent+0x66>
 800acc6:	f10d 0209 	add.w	r2, sp, #9
 800acca:	eba2 020e 	sub.w	r2, r2, lr
 800acce:	4565      	cmp	r5, ip
 800acd0:	bf88      	it	hi
 800acd2:	2200      	movhi	r2, #0
 800acd4:	4413      	add	r3, r2
 800acd6:	1a18      	subs	r0, r3, r0
 800acd8:	b003      	add	sp, #12
 800acda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ace0:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ace4:	e7ed      	b.n	800acc2 <__exponent+0x4c>
 800ace6:	2330      	movs	r3, #48	; 0x30
 800ace8:	3130      	adds	r1, #48	; 0x30
 800acea:	7083      	strb	r3, [r0, #2]
 800acec:	70c1      	strb	r1, [r0, #3]
 800acee:	1d03      	adds	r3, r0, #4
 800acf0:	e7f1      	b.n	800acd6 <__exponent+0x60>
	...

0800acf4 <_printf_float>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	b091      	sub	sp, #68	; 0x44
 800acfa:	460c      	mov	r4, r1
 800acfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ad00:	4616      	mov	r6, r2
 800ad02:	461f      	mov	r7, r3
 800ad04:	4605      	mov	r5, r0
 800ad06:	f001 fa89 	bl	800c21c <_localeconv_r>
 800ad0a:	6803      	ldr	r3, [r0, #0]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad10:	f7f5 fa1e 	bl	8000150 <strlen>
 800ad14:	2300      	movs	r3, #0
 800ad16:	930e      	str	r3, [sp, #56]	; 0x38
 800ad18:	f8d8 3000 	ldr.w	r3, [r8]
 800ad1c:	900a      	str	r0, [sp, #40]	; 0x28
 800ad1e:	3307      	adds	r3, #7
 800ad20:	f023 0307 	bic.w	r3, r3, #7
 800ad24:	f103 0208 	add.w	r2, r3, #8
 800ad28:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ad2c:	f8d4 b000 	ldr.w	fp, [r4]
 800ad30:	f8c8 2000 	str.w	r2, [r8]
 800ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ad3c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800ad40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ad44:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad46:	f04f 32ff 	mov.w	r2, #4294967295
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	4b9c      	ldr	r3, [pc, #624]	; (800afc0 <_printf_float+0x2cc>)
 800ad4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad50:	f7f5 fe5c 	bl	8000a0c <__aeabi_dcmpun>
 800ad54:	bb70      	cbnz	r0, 800adb4 <_printf_float+0xc0>
 800ad56:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	4b98      	ldr	r3, [pc, #608]	; (800afc0 <_printf_float+0x2cc>)
 800ad5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad60:	f7f5 fe36 	bl	80009d0 <__aeabi_dcmple>
 800ad64:	bb30      	cbnz	r0, 800adb4 <_printf_float+0xc0>
 800ad66:	2200      	movs	r2, #0
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4640      	mov	r0, r8
 800ad6c:	4651      	mov	r1, sl
 800ad6e:	f7f5 fe25 	bl	80009bc <__aeabi_dcmplt>
 800ad72:	b110      	cbz	r0, 800ad7a <_printf_float+0x86>
 800ad74:	232d      	movs	r3, #45	; 0x2d
 800ad76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7a:	4b92      	ldr	r3, [pc, #584]	; (800afc4 <_printf_float+0x2d0>)
 800ad7c:	4892      	ldr	r0, [pc, #584]	; (800afc8 <_printf_float+0x2d4>)
 800ad7e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ad82:	bf94      	ite	ls
 800ad84:	4698      	movls	r8, r3
 800ad86:	4680      	movhi	r8, r0
 800ad88:	2303      	movs	r3, #3
 800ad8a:	f04f 0a00 	mov.w	sl, #0
 800ad8e:	6123      	str	r3, [r4, #16]
 800ad90:	f02b 0304 	bic.w	r3, fp, #4
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	4633      	mov	r3, r6
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	9700      	str	r7, [sp, #0]
 800ad9e:	aa0f      	add	r2, sp, #60	; 0x3c
 800ada0:	f000 f9d4 	bl	800b14c <_printf_common>
 800ada4:	3001      	adds	r0, #1
 800ada6:	f040 8090 	bne.w	800aeca <_printf_float+0x1d6>
 800adaa:	f04f 30ff 	mov.w	r0, #4294967295
 800adae:	b011      	add	sp, #68	; 0x44
 800adb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb4:	4642      	mov	r2, r8
 800adb6:	4653      	mov	r3, sl
 800adb8:	4640      	mov	r0, r8
 800adba:	4651      	mov	r1, sl
 800adbc:	f7f5 fe26 	bl	8000a0c <__aeabi_dcmpun>
 800adc0:	b148      	cbz	r0, 800add6 <_printf_float+0xe2>
 800adc2:	f1ba 0f00 	cmp.w	sl, #0
 800adc6:	bfb8      	it	lt
 800adc8:	232d      	movlt	r3, #45	; 0x2d
 800adca:	4880      	ldr	r0, [pc, #512]	; (800afcc <_printf_float+0x2d8>)
 800adcc:	bfb8      	it	lt
 800adce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800add2:	4b7f      	ldr	r3, [pc, #508]	; (800afd0 <_printf_float+0x2dc>)
 800add4:	e7d3      	b.n	800ad7e <_printf_float+0x8a>
 800add6:	6863      	ldr	r3, [r4, #4]
 800add8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	d142      	bne.n	800ae66 <_printf_float+0x172>
 800ade0:	2306      	movs	r3, #6
 800ade2:	6063      	str	r3, [r4, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	9206      	str	r2, [sp, #24]
 800ade8:	aa0e      	add	r2, sp, #56	; 0x38
 800adea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800adee:	aa0d      	add	r2, sp, #52	; 0x34
 800adf0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800adf4:	9203      	str	r2, [sp, #12]
 800adf6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800adfa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	6863      	ldr	r3, [r4, #4]
 800ae02:	4642      	mov	r2, r8
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4628      	mov	r0, r5
 800ae08:	4653      	mov	r3, sl
 800ae0a:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae0c:	f7ff fed4 	bl	800abb8 <__cvt>
 800ae10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae12:	4680      	mov	r8, r0
 800ae14:	2947      	cmp	r1, #71	; 0x47
 800ae16:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ae18:	d108      	bne.n	800ae2c <_printf_float+0x138>
 800ae1a:	1cc8      	adds	r0, r1, #3
 800ae1c:	db02      	blt.n	800ae24 <_printf_float+0x130>
 800ae1e:	6863      	ldr	r3, [r4, #4]
 800ae20:	4299      	cmp	r1, r3
 800ae22:	dd40      	ble.n	800aea6 <_printf_float+0x1b2>
 800ae24:	f1a9 0902 	sub.w	r9, r9, #2
 800ae28:	fa5f f989 	uxtb.w	r9, r9
 800ae2c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ae30:	d81f      	bhi.n	800ae72 <_printf_float+0x17e>
 800ae32:	464a      	mov	r2, r9
 800ae34:	3901      	subs	r1, #1
 800ae36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae3a:	910d      	str	r1, [sp, #52]	; 0x34
 800ae3c:	f7ff ff1b 	bl	800ac76 <__exponent>
 800ae40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae42:	4682      	mov	sl, r0
 800ae44:	1813      	adds	r3, r2, r0
 800ae46:	2a01      	cmp	r2, #1
 800ae48:	6123      	str	r3, [r4, #16]
 800ae4a:	dc02      	bgt.n	800ae52 <_printf_float+0x15e>
 800ae4c:	6822      	ldr	r2, [r4, #0]
 800ae4e:	07d2      	lsls	r2, r2, #31
 800ae50:	d501      	bpl.n	800ae56 <_printf_float+0x162>
 800ae52:	3301      	adds	r3, #1
 800ae54:	6123      	str	r3, [r4, #16]
 800ae56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d09b      	beq.n	800ad96 <_printf_float+0xa2>
 800ae5e:	232d      	movs	r3, #45	; 0x2d
 800ae60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae64:	e797      	b.n	800ad96 <_printf_float+0xa2>
 800ae66:	2947      	cmp	r1, #71	; 0x47
 800ae68:	d1bc      	bne.n	800ade4 <_printf_float+0xf0>
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1ba      	bne.n	800ade4 <_printf_float+0xf0>
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e7b7      	b.n	800ade2 <_printf_float+0xee>
 800ae72:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ae76:	d118      	bne.n	800aeaa <_printf_float+0x1b6>
 800ae78:	2900      	cmp	r1, #0
 800ae7a:	6863      	ldr	r3, [r4, #4]
 800ae7c:	dd0b      	ble.n	800ae96 <_printf_float+0x1a2>
 800ae7e:	6121      	str	r1, [r4, #16]
 800ae80:	b913      	cbnz	r3, 800ae88 <_printf_float+0x194>
 800ae82:	6822      	ldr	r2, [r4, #0]
 800ae84:	07d0      	lsls	r0, r2, #31
 800ae86:	d502      	bpl.n	800ae8e <_printf_float+0x19a>
 800ae88:	3301      	adds	r3, #1
 800ae8a:	440b      	add	r3, r1
 800ae8c:	6123      	str	r3, [r4, #16]
 800ae8e:	f04f 0a00 	mov.w	sl, #0
 800ae92:	65a1      	str	r1, [r4, #88]	; 0x58
 800ae94:	e7df      	b.n	800ae56 <_printf_float+0x162>
 800ae96:	b913      	cbnz	r3, 800ae9e <_printf_float+0x1aa>
 800ae98:	6822      	ldr	r2, [r4, #0]
 800ae9a:	07d2      	lsls	r2, r2, #31
 800ae9c:	d501      	bpl.n	800aea2 <_printf_float+0x1ae>
 800ae9e:	3302      	adds	r3, #2
 800aea0:	e7f4      	b.n	800ae8c <_printf_float+0x198>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e7f2      	b.n	800ae8c <_printf_float+0x198>
 800aea6:	f04f 0967 	mov.w	r9, #103	; 0x67
 800aeaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeac:	4299      	cmp	r1, r3
 800aeae:	db05      	blt.n	800aebc <_printf_float+0x1c8>
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	6121      	str	r1, [r4, #16]
 800aeb4:	07d8      	lsls	r0, r3, #31
 800aeb6:	d5ea      	bpl.n	800ae8e <_printf_float+0x19a>
 800aeb8:	1c4b      	adds	r3, r1, #1
 800aeba:	e7e7      	b.n	800ae8c <_printf_float+0x198>
 800aebc:	2900      	cmp	r1, #0
 800aebe:	bfcc      	ite	gt
 800aec0:	2201      	movgt	r2, #1
 800aec2:	f1c1 0202 	rsble	r2, r1, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	e7e0      	b.n	800ae8c <_printf_float+0x198>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	055a      	lsls	r2, r3, #21
 800aece:	d407      	bmi.n	800aee0 <_printf_float+0x1ec>
 800aed0:	6923      	ldr	r3, [r4, #16]
 800aed2:	4642      	mov	r2, r8
 800aed4:	4631      	mov	r1, r6
 800aed6:	4628      	mov	r0, r5
 800aed8:	47b8      	blx	r7
 800aeda:	3001      	adds	r0, #1
 800aedc:	d12b      	bne.n	800af36 <_printf_float+0x242>
 800aede:	e764      	b.n	800adaa <_printf_float+0xb6>
 800aee0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800aee4:	f240 80dd 	bls.w	800b0a2 <_printf_float+0x3ae>
 800aee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aeec:	2200      	movs	r2, #0
 800aeee:	2300      	movs	r3, #0
 800aef0:	f7f5 fd5a 	bl	80009a8 <__aeabi_dcmpeq>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d033      	beq.n	800af60 <_printf_float+0x26c>
 800aef8:	2301      	movs	r3, #1
 800aefa:	4631      	mov	r1, r6
 800aefc:	4628      	mov	r0, r5
 800aefe:	4a35      	ldr	r2, [pc, #212]	; (800afd4 <_printf_float+0x2e0>)
 800af00:	47b8      	blx	r7
 800af02:	3001      	adds	r0, #1
 800af04:	f43f af51 	beq.w	800adaa <_printf_float+0xb6>
 800af08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800af0c:	429a      	cmp	r2, r3
 800af0e:	db02      	blt.n	800af16 <_printf_float+0x222>
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	07d8      	lsls	r0, r3, #31
 800af14:	d50f      	bpl.n	800af36 <_printf_float+0x242>
 800af16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af1a:	4631      	mov	r1, r6
 800af1c:	4628      	mov	r0, r5
 800af1e:	47b8      	blx	r7
 800af20:	3001      	adds	r0, #1
 800af22:	f43f af42 	beq.w	800adaa <_printf_float+0xb6>
 800af26:	f04f 0800 	mov.w	r8, #0
 800af2a:	f104 091a 	add.w	r9, r4, #26
 800af2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af30:	3b01      	subs	r3, #1
 800af32:	4543      	cmp	r3, r8
 800af34:	dc09      	bgt.n	800af4a <_printf_float+0x256>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	079b      	lsls	r3, r3, #30
 800af3a:	f100 8102 	bmi.w	800b142 <_printf_float+0x44e>
 800af3e:	68e0      	ldr	r0, [r4, #12]
 800af40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af42:	4298      	cmp	r0, r3
 800af44:	bfb8      	it	lt
 800af46:	4618      	movlt	r0, r3
 800af48:	e731      	b.n	800adae <_printf_float+0xba>
 800af4a:	2301      	movs	r3, #1
 800af4c:	464a      	mov	r2, r9
 800af4e:	4631      	mov	r1, r6
 800af50:	4628      	mov	r0, r5
 800af52:	47b8      	blx	r7
 800af54:	3001      	adds	r0, #1
 800af56:	f43f af28 	beq.w	800adaa <_printf_float+0xb6>
 800af5a:	f108 0801 	add.w	r8, r8, #1
 800af5e:	e7e6      	b.n	800af2e <_printf_float+0x23a>
 800af60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af62:	2b00      	cmp	r3, #0
 800af64:	dc38      	bgt.n	800afd8 <_printf_float+0x2e4>
 800af66:	2301      	movs	r3, #1
 800af68:	4631      	mov	r1, r6
 800af6a:	4628      	mov	r0, r5
 800af6c:	4a19      	ldr	r2, [pc, #100]	; (800afd4 <_printf_float+0x2e0>)
 800af6e:	47b8      	blx	r7
 800af70:	3001      	adds	r0, #1
 800af72:	f43f af1a 	beq.w	800adaa <_printf_float+0xb6>
 800af76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800af7a:	4313      	orrs	r3, r2
 800af7c:	d102      	bne.n	800af84 <_printf_float+0x290>
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	07d9      	lsls	r1, r3, #31
 800af82:	d5d8      	bpl.n	800af36 <_printf_float+0x242>
 800af84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af88:	4631      	mov	r1, r6
 800af8a:	4628      	mov	r0, r5
 800af8c:	47b8      	blx	r7
 800af8e:	3001      	adds	r0, #1
 800af90:	f43f af0b 	beq.w	800adaa <_printf_float+0xb6>
 800af94:	f04f 0900 	mov.w	r9, #0
 800af98:	f104 0a1a 	add.w	sl, r4, #26
 800af9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af9e:	425b      	negs	r3, r3
 800afa0:	454b      	cmp	r3, r9
 800afa2:	dc01      	bgt.n	800afa8 <_printf_float+0x2b4>
 800afa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa6:	e794      	b.n	800aed2 <_printf_float+0x1de>
 800afa8:	2301      	movs	r3, #1
 800afaa:	4652      	mov	r2, sl
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	47b8      	blx	r7
 800afb2:	3001      	adds	r0, #1
 800afb4:	f43f aef9 	beq.w	800adaa <_printf_float+0xb6>
 800afb8:	f109 0901 	add.w	r9, r9, #1
 800afbc:	e7ee      	b.n	800af9c <_printf_float+0x2a8>
 800afbe:	bf00      	nop
 800afc0:	7fefffff 	.word	0x7fefffff
 800afc4:	0800eb30 	.word	0x0800eb30
 800afc8:	0800eb34 	.word	0x0800eb34
 800afcc:	0800eb3c 	.word	0x0800eb3c
 800afd0:	0800eb38 	.word	0x0800eb38
 800afd4:	0800eb40 	.word	0x0800eb40
 800afd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800afdc:	429a      	cmp	r2, r3
 800afde:	bfa8      	it	ge
 800afe0:	461a      	movge	r2, r3
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	4691      	mov	r9, r2
 800afe6:	dc37      	bgt.n	800b058 <_printf_float+0x364>
 800afe8:	f04f 0b00 	mov.w	fp, #0
 800afec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aff0:	f104 021a 	add.w	r2, r4, #26
 800aff4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800aff8:	ebaa 0309 	sub.w	r3, sl, r9
 800affc:	455b      	cmp	r3, fp
 800affe:	dc33      	bgt.n	800b068 <_printf_float+0x374>
 800b000:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b004:	429a      	cmp	r2, r3
 800b006:	db3b      	blt.n	800b080 <_printf_float+0x38c>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	07da      	lsls	r2, r3, #31
 800b00c:	d438      	bmi.n	800b080 <_printf_float+0x38c>
 800b00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b010:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b012:	eba3 020a 	sub.w	r2, r3, sl
 800b016:	eba3 0901 	sub.w	r9, r3, r1
 800b01a:	4591      	cmp	r9, r2
 800b01c:	bfa8      	it	ge
 800b01e:	4691      	movge	r9, r2
 800b020:	f1b9 0f00 	cmp.w	r9, #0
 800b024:	dc34      	bgt.n	800b090 <_printf_float+0x39c>
 800b026:	f04f 0800 	mov.w	r8, #0
 800b02a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b02e:	f104 0a1a 	add.w	sl, r4, #26
 800b032:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b036:	1a9b      	subs	r3, r3, r2
 800b038:	eba3 0309 	sub.w	r3, r3, r9
 800b03c:	4543      	cmp	r3, r8
 800b03e:	f77f af7a 	ble.w	800af36 <_printf_float+0x242>
 800b042:	2301      	movs	r3, #1
 800b044:	4652      	mov	r2, sl
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f aeac 	beq.w	800adaa <_printf_float+0xb6>
 800b052:	f108 0801 	add.w	r8, r8, #1
 800b056:	e7ec      	b.n	800b032 <_printf_float+0x33e>
 800b058:	4613      	mov	r3, r2
 800b05a:	4631      	mov	r1, r6
 800b05c:	4642      	mov	r2, r8
 800b05e:	4628      	mov	r0, r5
 800b060:	47b8      	blx	r7
 800b062:	3001      	adds	r0, #1
 800b064:	d1c0      	bne.n	800afe8 <_printf_float+0x2f4>
 800b066:	e6a0      	b.n	800adaa <_printf_float+0xb6>
 800b068:	2301      	movs	r3, #1
 800b06a:	4631      	mov	r1, r6
 800b06c:	4628      	mov	r0, r5
 800b06e:	920b      	str	r2, [sp, #44]	; 0x2c
 800b070:	47b8      	blx	r7
 800b072:	3001      	adds	r0, #1
 800b074:	f43f ae99 	beq.w	800adaa <_printf_float+0xb6>
 800b078:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b07a:	f10b 0b01 	add.w	fp, fp, #1
 800b07e:	e7b9      	b.n	800aff4 <_printf_float+0x300>
 800b080:	4631      	mov	r1, r6
 800b082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b086:	4628      	mov	r0, r5
 800b088:	47b8      	blx	r7
 800b08a:	3001      	adds	r0, #1
 800b08c:	d1bf      	bne.n	800b00e <_printf_float+0x31a>
 800b08e:	e68c      	b.n	800adaa <_printf_float+0xb6>
 800b090:	464b      	mov	r3, r9
 800b092:	4631      	mov	r1, r6
 800b094:	4628      	mov	r0, r5
 800b096:	eb08 020a 	add.w	r2, r8, sl
 800b09a:	47b8      	blx	r7
 800b09c:	3001      	adds	r0, #1
 800b09e:	d1c2      	bne.n	800b026 <_printf_float+0x332>
 800b0a0:	e683      	b.n	800adaa <_printf_float+0xb6>
 800b0a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a4:	2a01      	cmp	r2, #1
 800b0a6:	dc01      	bgt.n	800b0ac <_printf_float+0x3b8>
 800b0a8:	07db      	lsls	r3, r3, #31
 800b0aa:	d537      	bpl.n	800b11c <_printf_float+0x428>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	4642      	mov	r2, r8
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	47b8      	blx	r7
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f43f ae77 	beq.w	800adaa <_printf_float+0xb6>
 800b0bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	47b8      	blx	r7
 800b0c6:	3001      	adds	r0, #1
 800b0c8:	f43f ae6f 	beq.w	800adaa <_printf_float+0xb6>
 800b0cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f7f5 fc68 	bl	80009a8 <__aeabi_dcmpeq>
 800b0d8:	b9d8      	cbnz	r0, 800b112 <_printf_float+0x41e>
 800b0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0dc:	f108 0201 	add.w	r2, r8, #1
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	47b8      	blx	r7
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	d10e      	bne.n	800b10a <_printf_float+0x416>
 800b0ec:	e65d      	b.n	800adaa <_printf_float+0xb6>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	464a      	mov	r2, r9
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	4628      	mov	r0, r5
 800b0f6:	47b8      	blx	r7
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	f43f ae56 	beq.w	800adaa <_printf_float+0xb6>
 800b0fe:	f108 0801 	add.w	r8, r8, #1
 800b102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b104:	3b01      	subs	r3, #1
 800b106:	4543      	cmp	r3, r8
 800b108:	dcf1      	bgt.n	800b0ee <_printf_float+0x3fa>
 800b10a:	4653      	mov	r3, sl
 800b10c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b110:	e6e0      	b.n	800aed4 <_printf_float+0x1e0>
 800b112:	f04f 0800 	mov.w	r8, #0
 800b116:	f104 091a 	add.w	r9, r4, #26
 800b11a:	e7f2      	b.n	800b102 <_printf_float+0x40e>
 800b11c:	2301      	movs	r3, #1
 800b11e:	4642      	mov	r2, r8
 800b120:	e7df      	b.n	800b0e2 <_printf_float+0x3ee>
 800b122:	2301      	movs	r3, #1
 800b124:	464a      	mov	r2, r9
 800b126:	4631      	mov	r1, r6
 800b128:	4628      	mov	r0, r5
 800b12a:	47b8      	blx	r7
 800b12c:	3001      	adds	r0, #1
 800b12e:	f43f ae3c 	beq.w	800adaa <_printf_float+0xb6>
 800b132:	f108 0801 	add.w	r8, r8, #1
 800b136:	68e3      	ldr	r3, [r4, #12]
 800b138:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b13a:	1a5b      	subs	r3, r3, r1
 800b13c:	4543      	cmp	r3, r8
 800b13e:	dcf0      	bgt.n	800b122 <_printf_float+0x42e>
 800b140:	e6fd      	b.n	800af3e <_printf_float+0x24a>
 800b142:	f04f 0800 	mov.w	r8, #0
 800b146:	f104 0919 	add.w	r9, r4, #25
 800b14a:	e7f4      	b.n	800b136 <_printf_float+0x442>

0800b14c <_printf_common>:
 800b14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	4616      	mov	r6, r2
 800b152:	4699      	mov	r9, r3
 800b154:	688a      	ldr	r2, [r1, #8]
 800b156:	690b      	ldr	r3, [r1, #16]
 800b158:	4607      	mov	r7, r0
 800b15a:	4293      	cmp	r3, r2
 800b15c:	bfb8      	it	lt
 800b15e:	4613      	movlt	r3, r2
 800b160:	6033      	str	r3, [r6, #0]
 800b162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b166:	460c      	mov	r4, r1
 800b168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b16c:	b10a      	cbz	r2, 800b172 <_printf_common+0x26>
 800b16e:	3301      	adds	r3, #1
 800b170:	6033      	str	r3, [r6, #0]
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	0699      	lsls	r1, r3, #26
 800b176:	bf42      	ittt	mi
 800b178:	6833      	ldrmi	r3, [r6, #0]
 800b17a:	3302      	addmi	r3, #2
 800b17c:	6033      	strmi	r3, [r6, #0]
 800b17e:	6825      	ldr	r5, [r4, #0]
 800b180:	f015 0506 	ands.w	r5, r5, #6
 800b184:	d106      	bne.n	800b194 <_printf_common+0x48>
 800b186:	f104 0a19 	add.w	sl, r4, #25
 800b18a:	68e3      	ldr	r3, [r4, #12]
 800b18c:	6832      	ldr	r2, [r6, #0]
 800b18e:	1a9b      	subs	r3, r3, r2
 800b190:	42ab      	cmp	r3, r5
 800b192:	dc28      	bgt.n	800b1e6 <_printf_common+0x9a>
 800b194:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b198:	1e13      	subs	r3, r2, #0
 800b19a:	6822      	ldr	r2, [r4, #0]
 800b19c:	bf18      	it	ne
 800b19e:	2301      	movne	r3, #1
 800b1a0:	0692      	lsls	r2, r2, #26
 800b1a2:	d42d      	bmi.n	800b200 <_printf_common+0xb4>
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1ac:	47c0      	blx	r8
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	d020      	beq.n	800b1f4 <_printf_common+0xa8>
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	68e5      	ldr	r5, [r4, #12]
 800b1b6:	f003 0306 	and.w	r3, r3, #6
 800b1ba:	2b04      	cmp	r3, #4
 800b1bc:	bf18      	it	ne
 800b1be:	2500      	movne	r5, #0
 800b1c0:	6832      	ldr	r2, [r6, #0]
 800b1c2:	f04f 0600 	mov.w	r6, #0
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	bf08      	it	eq
 800b1ca:	1aad      	subeq	r5, r5, r2
 800b1cc:	6922      	ldr	r2, [r4, #16]
 800b1ce:	bf08      	it	eq
 800b1d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	bfc4      	itt	gt
 800b1d8:	1a9b      	subgt	r3, r3, r2
 800b1da:	18ed      	addgt	r5, r5, r3
 800b1dc:	341a      	adds	r4, #26
 800b1de:	42b5      	cmp	r5, r6
 800b1e0:	d11a      	bne.n	800b218 <_printf_common+0xcc>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	e008      	b.n	800b1f8 <_printf_common+0xac>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	4638      	mov	r0, r7
 800b1ee:	47c0      	blx	r8
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d103      	bne.n	800b1fc <_printf_common+0xb0>
 800b1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fc:	3501      	adds	r5, #1
 800b1fe:	e7c4      	b.n	800b18a <_printf_common+0x3e>
 800b200:	2030      	movs	r0, #48	; 0x30
 800b202:	18e1      	adds	r1, r4, r3
 800b204:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b20e:	4422      	add	r2, r4
 800b210:	3302      	adds	r3, #2
 800b212:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b216:	e7c5      	b.n	800b1a4 <_printf_common+0x58>
 800b218:	2301      	movs	r3, #1
 800b21a:	4622      	mov	r2, r4
 800b21c:	4649      	mov	r1, r9
 800b21e:	4638      	mov	r0, r7
 800b220:	47c0      	blx	r8
 800b222:	3001      	adds	r0, #1
 800b224:	d0e6      	beq.n	800b1f4 <_printf_common+0xa8>
 800b226:	3601      	adds	r6, #1
 800b228:	e7d9      	b.n	800b1de <_printf_common+0x92>
	...

0800b22c <_printf_i>:
 800b22c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b230:	7e0f      	ldrb	r7, [r1, #24]
 800b232:	4691      	mov	r9, r2
 800b234:	2f78      	cmp	r7, #120	; 0x78
 800b236:	4680      	mov	r8, r0
 800b238:	460c      	mov	r4, r1
 800b23a:	469a      	mov	sl, r3
 800b23c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b23e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b242:	d807      	bhi.n	800b254 <_printf_i+0x28>
 800b244:	2f62      	cmp	r7, #98	; 0x62
 800b246:	d80a      	bhi.n	800b25e <_printf_i+0x32>
 800b248:	2f00      	cmp	r7, #0
 800b24a:	f000 80d9 	beq.w	800b400 <_printf_i+0x1d4>
 800b24e:	2f58      	cmp	r7, #88	; 0x58
 800b250:	f000 80a4 	beq.w	800b39c <_printf_i+0x170>
 800b254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b258:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b25c:	e03a      	b.n	800b2d4 <_printf_i+0xa8>
 800b25e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b262:	2b15      	cmp	r3, #21
 800b264:	d8f6      	bhi.n	800b254 <_printf_i+0x28>
 800b266:	a101      	add	r1, pc, #4	; (adr r1, 800b26c <_printf_i+0x40>)
 800b268:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b26c:	0800b2c5 	.word	0x0800b2c5
 800b270:	0800b2d9 	.word	0x0800b2d9
 800b274:	0800b255 	.word	0x0800b255
 800b278:	0800b255 	.word	0x0800b255
 800b27c:	0800b255 	.word	0x0800b255
 800b280:	0800b255 	.word	0x0800b255
 800b284:	0800b2d9 	.word	0x0800b2d9
 800b288:	0800b255 	.word	0x0800b255
 800b28c:	0800b255 	.word	0x0800b255
 800b290:	0800b255 	.word	0x0800b255
 800b294:	0800b255 	.word	0x0800b255
 800b298:	0800b3e7 	.word	0x0800b3e7
 800b29c:	0800b309 	.word	0x0800b309
 800b2a0:	0800b3c9 	.word	0x0800b3c9
 800b2a4:	0800b255 	.word	0x0800b255
 800b2a8:	0800b255 	.word	0x0800b255
 800b2ac:	0800b409 	.word	0x0800b409
 800b2b0:	0800b255 	.word	0x0800b255
 800b2b4:	0800b309 	.word	0x0800b309
 800b2b8:	0800b255 	.word	0x0800b255
 800b2bc:	0800b255 	.word	0x0800b255
 800b2c0:	0800b3d1 	.word	0x0800b3d1
 800b2c4:	682b      	ldr	r3, [r5, #0]
 800b2c6:	1d1a      	adds	r2, r3, #4
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	602a      	str	r2, [r5, #0]
 800b2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e0a4      	b.n	800b422 <_printf_i+0x1f6>
 800b2d8:	6820      	ldr	r0, [r4, #0]
 800b2da:	6829      	ldr	r1, [r5, #0]
 800b2dc:	0606      	lsls	r6, r0, #24
 800b2de:	f101 0304 	add.w	r3, r1, #4
 800b2e2:	d50a      	bpl.n	800b2fa <_printf_i+0xce>
 800b2e4:	680e      	ldr	r6, [r1, #0]
 800b2e6:	602b      	str	r3, [r5, #0]
 800b2e8:	2e00      	cmp	r6, #0
 800b2ea:	da03      	bge.n	800b2f4 <_printf_i+0xc8>
 800b2ec:	232d      	movs	r3, #45	; 0x2d
 800b2ee:	4276      	negs	r6, r6
 800b2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2f4:	230a      	movs	r3, #10
 800b2f6:	485e      	ldr	r0, [pc, #376]	; (800b470 <_printf_i+0x244>)
 800b2f8:	e019      	b.n	800b32e <_printf_i+0x102>
 800b2fa:	680e      	ldr	r6, [r1, #0]
 800b2fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	bf18      	it	ne
 800b304:	b236      	sxthne	r6, r6
 800b306:	e7ef      	b.n	800b2e8 <_printf_i+0xbc>
 800b308:	682b      	ldr	r3, [r5, #0]
 800b30a:	6820      	ldr	r0, [r4, #0]
 800b30c:	1d19      	adds	r1, r3, #4
 800b30e:	6029      	str	r1, [r5, #0]
 800b310:	0601      	lsls	r1, r0, #24
 800b312:	d501      	bpl.n	800b318 <_printf_i+0xec>
 800b314:	681e      	ldr	r6, [r3, #0]
 800b316:	e002      	b.n	800b31e <_printf_i+0xf2>
 800b318:	0646      	lsls	r6, r0, #25
 800b31a:	d5fb      	bpl.n	800b314 <_printf_i+0xe8>
 800b31c:	881e      	ldrh	r6, [r3, #0]
 800b31e:	2f6f      	cmp	r7, #111	; 0x6f
 800b320:	bf0c      	ite	eq
 800b322:	2308      	moveq	r3, #8
 800b324:	230a      	movne	r3, #10
 800b326:	4852      	ldr	r0, [pc, #328]	; (800b470 <_printf_i+0x244>)
 800b328:	2100      	movs	r1, #0
 800b32a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b32e:	6865      	ldr	r5, [r4, #4]
 800b330:	2d00      	cmp	r5, #0
 800b332:	bfa8      	it	ge
 800b334:	6821      	ldrge	r1, [r4, #0]
 800b336:	60a5      	str	r5, [r4, #8]
 800b338:	bfa4      	itt	ge
 800b33a:	f021 0104 	bicge.w	r1, r1, #4
 800b33e:	6021      	strge	r1, [r4, #0]
 800b340:	b90e      	cbnz	r6, 800b346 <_printf_i+0x11a>
 800b342:	2d00      	cmp	r5, #0
 800b344:	d04d      	beq.n	800b3e2 <_printf_i+0x1b6>
 800b346:	4615      	mov	r5, r2
 800b348:	fbb6 f1f3 	udiv	r1, r6, r3
 800b34c:	fb03 6711 	mls	r7, r3, r1, r6
 800b350:	5dc7      	ldrb	r7, [r0, r7]
 800b352:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b356:	4637      	mov	r7, r6
 800b358:	42bb      	cmp	r3, r7
 800b35a:	460e      	mov	r6, r1
 800b35c:	d9f4      	bls.n	800b348 <_printf_i+0x11c>
 800b35e:	2b08      	cmp	r3, #8
 800b360:	d10b      	bne.n	800b37a <_printf_i+0x14e>
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	07de      	lsls	r6, r3, #31
 800b366:	d508      	bpl.n	800b37a <_printf_i+0x14e>
 800b368:	6923      	ldr	r3, [r4, #16]
 800b36a:	6861      	ldr	r1, [r4, #4]
 800b36c:	4299      	cmp	r1, r3
 800b36e:	bfde      	ittt	le
 800b370:	2330      	movle	r3, #48	; 0x30
 800b372:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b376:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b37a:	1b52      	subs	r2, r2, r5
 800b37c:	6122      	str	r2, [r4, #16]
 800b37e:	464b      	mov	r3, r9
 800b380:	4621      	mov	r1, r4
 800b382:	4640      	mov	r0, r8
 800b384:	f8cd a000 	str.w	sl, [sp]
 800b388:	aa03      	add	r2, sp, #12
 800b38a:	f7ff fedf 	bl	800b14c <_printf_common>
 800b38e:	3001      	adds	r0, #1
 800b390:	d14c      	bne.n	800b42c <_printf_i+0x200>
 800b392:	f04f 30ff 	mov.w	r0, #4294967295
 800b396:	b004      	add	sp, #16
 800b398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b39c:	4834      	ldr	r0, [pc, #208]	; (800b470 <_printf_i+0x244>)
 800b39e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b3a2:	6829      	ldr	r1, [r5, #0]
 800b3a4:	6823      	ldr	r3, [r4, #0]
 800b3a6:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3aa:	6029      	str	r1, [r5, #0]
 800b3ac:	061d      	lsls	r5, r3, #24
 800b3ae:	d514      	bpl.n	800b3da <_printf_i+0x1ae>
 800b3b0:	07df      	lsls	r7, r3, #31
 800b3b2:	bf44      	itt	mi
 800b3b4:	f043 0320 	orrmi.w	r3, r3, #32
 800b3b8:	6023      	strmi	r3, [r4, #0]
 800b3ba:	b91e      	cbnz	r6, 800b3c4 <_printf_i+0x198>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	f023 0320 	bic.w	r3, r3, #32
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	2310      	movs	r3, #16
 800b3c6:	e7af      	b.n	800b328 <_printf_i+0xfc>
 800b3c8:	6823      	ldr	r3, [r4, #0]
 800b3ca:	f043 0320 	orr.w	r3, r3, #32
 800b3ce:	6023      	str	r3, [r4, #0]
 800b3d0:	2378      	movs	r3, #120	; 0x78
 800b3d2:	4828      	ldr	r0, [pc, #160]	; (800b474 <_printf_i+0x248>)
 800b3d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b3d8:	e7e3      	b.n	800b3a2 <_printf_i+0x176>
 800b3da:	0659      	lsls	r1, r3, #25
 800b3dc:	bf48      	it	mi
 800b3de:	b2b6      	uxthmi	r6, r6
 800b3e0:	e7e6      	b.n	800b3b0 <_printf_i+0x184>
 800b3e2:	4615      	mov	r5, r2
 800b3e4:	e7bb      	b.n	800b35e <_printf_i+0x132>
 800b3e6:	682b      	ldr	r3, [r5, #0]
 800b3e8:	6826      	ldr	r6, [r4, #0]
 800b3ea:	1d18      	adds	r0, r3, #4
 800b3ec:	6961      	ldr	r1, [r4, #20]
 800b3ee:	6028      	str	r0, [r5, #0]
 800b3f0:	0635      	lsls	r5, r6, #24
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	d501      	bpl.n	800b3fa <_printf_i+0x1ce>
 800b3f6:	6019      	str	r1, [r3, #0]
 800b3f8:	e002      	b.n	800b400 <_printf_i+0x1d4>
 800b3fa:	0670      	lsls	r0, r6, #25
 800b3fc:	d5fb      	bpl.n	800b3f6 <_printf_i+0x1ca>
 800b3fe:	8019      	strh	r1, [r3, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	4615      	mov	r5, r2
 800b404:	6123      	str	r3, [r4, #16]
 800b406:	e7ba      	b.n	800b37e <_printf_i+0x152>
 800b408:	682b      	ldr	r3, [r5, #0]
 800b40a:	2100      	movs	r1, #0
 800b40c:	1d1a      	adds	r2, r3, #4
 800b40e:	602a      	str	r2, [r5, #0]
 800b410:	681d      	ldr	r5, [r3, #0]
 800b412:	6862      	ldr	r2, [r4, #4]
 800b414:	4628      	mov	r0, r5
 800b416:	f000 ff0d 	bl	800c234 <memchr>
 800b41a:	b108      	cbz	r0, 800b420 <_printf_i+0x1f4>
 800b41c:	1b40      	subs	r0, r0, r5
 800b41e:	6060      	str	r0, [r4, #4]
 800b420:	6863      	ldr	r3, [r4, #4]
 800b422:	6123      	str	r3, [r4, #16]
 800b424:	2300      	movs	r3, #0
 800b426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b42a:	e7a8      	b.n	800b37e <_printf_i+0x152>
 800b42c:	462a      	mov	r2, r5
 800b42e:	4649      	mov	r1, r9
 800b430:	4640      	mov	r0, r8
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	47d0      	blx	sl
 800b436:	3001      	adds	r0, #1
 800b438:	d0ab      	beq.n	800b392 <_printf_i+0x166>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	079b      	lsls	r3, r3, #30
 800b43e:	d413      	bmi.n	800b468 <_printf_i+0x23c>
 800b440:	68e0      	ldr	r0, [r4, #12]
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	4298      	cmp	r0, r3
 800b446:	bfb8      	it	lt
 800b448:	4618      	movlt	r0, r3
 800b44a:	e7a4      	b.n	800b396 <_printf_i+0x16a>
 800b44c:	2301      	movs	r3, #1
 800b44e:	4632      	mov	r2, r6
 800b450:	4649      	mov	r1, r9
 800b452:	4640      	mov	r0, r8
 800b454:	47d0      	blx	sl
 800b456:	3001      	adds	r0, #1
 800b458:	d09b      	beq.n	800b392 <_printf_i+0x166>
 800b45a:	3501      	adds	r5, #1
 800b45c:	68e3      	ldr	r3, [r4, #12]
 800b45e:	9903      	ldr	r1, [sp, #12]
 800b460:	1a5b      	subs	r3, r3, r1
 800b462:	42ab      	cmp	r3, r5
 800b464:	dcf2      	bgt.n	800b44c <_printf_i+0x220>
 800b466:	e7eb      	b.n	800b440 <_printf_i+0x214>
 800b468:	2500      	movs	r5, #0
 800b46a:	f104 0619 	add.w	r6, r4, #25
 800b46e:	e7f5      	b.n	800b45c <_printf_i+0x230>
 800b470:	0800eb42 	.word	0x0800eb42
 800b474:	0800eb53 	.word	0x0800eb53

0800b478 <sniprintf>:
 800b478:	b40c      	push	{r2, r3}
 800b47a:	b530      	push	{r4, r5, lr}
 800b47c:	4b17      	ldr	r3, [pc, #92]	; (800b4dc <sniprintf+0x64>)
 800b47e:	1e0c      	subs	r4, r1, #0
 800b480:	681d      	ldr	r5, [r3, #0]
 800b482:	b09d      	sub	sp, #116	; 0x74
 800b484:	da08      	bge.n	800b498 <sniprintf+0x20>
 800b486:	238b      	movs	r3, #139	; 0x8b
 800b488:	f04f 30ff 	mov.w	r0, #4294967295
 800b48c:	602b      	str	r3, [r5, #0]
 800b48e:	b01d      	add	sp, #116	; 0x74
 800b490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b494:	b002      	add	sp, #8
 800b496:	4770      	bx	lr
 800b498:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b49c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4a0:	bf0c      	ite	eq
 800b4a2:	4623      	moveq	r3, r4
 800b4a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	9307      	str	r3, [sp, #28]
 800b4ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b4b0:	9002      	str	r0, [sp, #8]
 800b4b2:	9006      	str	r0, [sp, #24]
 800b4b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	ab21      	add	r3, sp, #132	; 0x84
 800b4bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b4be:	a902      	add	r1, sp, #8
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	f001 fba1 	bl	800cc08 <_svfiprintf_r>
 800b4c6:	1c43      	adds	r3, r0, #1
 800b4c8:	bfbc      	itt	lt
 800b4ca:	238b      	movlt	r3, #139	; 0x8b
 800b4cc:	602b      	strlt	r3, [r5, #0]
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d0dd      	beq.n	800b48e <sniprintf+0x16>
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	9b02      	ldr	r3, [sp, #8]
 800b4d6:	701a      	strb	r2, [r3, #0]
 800b4d8:	e7d9      	b.n	800b48e <sniprintf+0x16>
 800b4da:	bf00      	nop
 800b4dc:	200001d0 	.word	0x200001d0

0800b4e0 <strcat>:
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	b510      	push	{r4, lr}
 800b4e4:	7814      	ldrb	r4, [r2, #0]
 800b4e6:	4613      	mov	r3, r2
 800b4e8:	3201      	adds	r2, #1
 800b4ea:	2c00      	cmp	r4, #0
 800b4ec:	d1fa      	bne.n	800b4e4 <strcat+0x4>
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4f8:	2a00      	cmp	r2, #0
 800b4fa:	d1f9      	bne.n	800b4f0 <strcat+0x10>
 800b4fc:	bd10      	pop	{r4, pc}

0800b4fe <strlcpy>:
 800b4fe:	460b      	mov	r3, r1
 800b500:	b510      	push	{r4, lr}
 800b502:	b162      	cbz	r2, 800b51e <strlcpy+0x20>
 800b504:	3a01      	subs	r2, #1
 800b506:	d008      	beq.n	800b51a <strlcpy+0x1c>
 800b508:	f813 4b01 	ldrb.w	r4, [r3], #1
 800b50c:	f800 4b01 	strb.w	r4, [r0], #1
 800b510:	2c00      	cmp	r4, #0
 800b512:	d1f7      	bne.n	800b504 <strlcpy+0x6>
 800b514:	1a58      	subs	r0, r3, r1
 800b516:	3801      	subs	r0, #1
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	2200      	movs	r2, #0
 800b51c:	7002      	strb	r2, [r0, #0]
 800b51e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b522:	2a00      	cmp	r2, #0
 800b524:	d1fb      	bne.n	800b51e <strlcpy+0x20>
 800b526:	e7f5      	b.n	800b514 <strlcpy+0x16>

0800b528 <quorem>:
 800b528:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	6903      	ldr	r3, [r0, #16]
 800b52e:	690c      	ldr	r4, [r1, #16]
 800b530:	4607      	mov	r7, r0
 800b532:	42a3      	cmp	r3, r4
 800b534:	f2c0 8082 	blt.w	800b63c <quorem+0x114>
 800b538:	3c01      	subs	r4, #1
 800b53a:	f100 0514 	add.w	r5, r0, #20
 800b53e:	f101 0814 	add.w	r8, r1, #20
 800b542:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b54c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b550:	3301      	adds	r3, #1
 800b552:	429a      	cmp	r2, r3
 800b554:	fbb2 f6f3 	udiv	r6, r2, r3
 800b558:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b55c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b560:	d331      	bcc.n	800b5c6 <quorem+0x9e>
 800b562:	f04f 0e00 	mov.w	lr, #0
 800b566:	4640      	mov	r0, r8
 800b568:	46ac      	mov	ip, r5
 800b56a:	46f2      	mov	sl, lr
 800b56c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b570:	b293      	uxth	r3, r2
 800b572:	fb06 e303 	mla	r3, r6, r3, lr
 800b576:	0c12      	lsrs	r2, r2, #16
 800b578:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	fb06 e202 	mla	r2, r6, r2, lr
 800b582:	ebaa 0303 	sub.w	r3, sl, r3
 800b586:	f8dc a000 	ldr.w	sl, [ip]
 800b58a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b58e:	fa1f fa8a 	uxth.w	sl, sl
 800b592:	4453      	add	r3, sl
 800b594:	f8dc a000 	ldr.w	sl, [ip]
 800b598:	b292      	uxth	r2, r2
 800b59a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b59e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5a8:	4581      	cmp	r9, r0
 800b5aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5ae:	f84c 3b04 	str.w	r3, [ip], #4
 800b5b2:	d2db      	bcs.n	800b56c <quorem+0x44>
 800b5b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5b8:	b92b      	cbnz	r3, 800b5c6 <quorem+0x9e>
 800b5ba:	9b01      	ldr	r3, [sp, #4]
 800b5bc:	3b04      	subs	r3, #4
 800b5be:	429d      	cmp	r5, r3
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	d32f      	bcc.n	800b624 <quorem+0xfc>
 800b5c4:	613c      	str	r4, [r7, #16]
 800b5c6:	4638      	mov	r0, r7
 800b5c8:	f001 f8ce 	bl	800c768 <__mcmp>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	db25      	blt.n	800b61c <quorem+0xf4>
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	f04f 0c00 	mov.w	ip, #0
 800b5d6:	3601      	adds	r6, #1
 800b5d8:	f858 1b04 	ldr.w	r1, [r8], #4
 800b5dc:	f8d0 e000 	ldr.w	lr, [r0]
 800b5e0:	b28b      	uxth	r3, r1
 800b5e2:	ebac 0303 	sub.w	r3, ip, r3
 800b5e6:	fa1f f28e 	uxth.w	r2, lr
 800b5ea:	4413      	add	r3, r2
 800b5ec:	0c0a      	lsrs	r2, r1, #16
 800b5ee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b5f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5fc:	45c1      	cmp	r9, r8
 800b5fe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b602:	f840 3b04 	str.w	r3, [r0], #4
 800b606:	d2e7      	bcs.n	800b5d8 <quorem+0xb0>
 800b608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b60c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b610:	b922      	cbnz	r2, 800b61c <quorem+0xf4>
 800b612:	3b04      	subs	r3, #4
 800b614:	429d      	cmp	r5, r3
 800b616:	461a      	mov	r2, r3
 800b618:	d30a      	bcc.n	800b630 <quorem+0x108>
 800b61a:	613c      	str	r4, [r7, #16]
 800b61c:	4630      	mov	r0, r6
 800b61e:	b003      	add	sp, #12
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b624:	6812      	ldr	r2, [r2, #0]
 800b626:	3b04      	subs	r3, #4
 800b628:	2a00      	cmp	r2, #0
 800b62a:	d1cb      	bne.n	800b5c4 <quorem+0x9c>
 800b62c:	3c01      	subs	r4, #1
 800b62e:	e7c6      	b.n	800b5be <quorem+0x96>
 800b630:	6812      	ldr	r2, [r2, #0]
 800b632:	3b04      	subs	r3, #4
 800b634:	2a00      	cmp	r2, #0
 800b636:	d1f0      	bne.n	800b61a <quorem+0xf2>
 800b638:	3c01      	subs	r4, #1
 800b63a:	e7eb      	b.n	800b614 <quorem+0xec>
 800b63c:	2000      	movs	r0, #0
 800b63e:	e7ee      	b.n	800b61e <quorem+0xf6>

0800b640 <_dtoa_r>:
 800b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	4616      	mov	r6, r2
 800b646:	461f      	mov	r7, r3
 800b648:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b64a:	b099      	sub	sp, #100	; 0x64
 800b64c:	4605      	mov	r5, r0
 800b64e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b652:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b656:	b974      	cbnz	r4, 800b676 <_dtoa_r+0x36>
 800b658:	2010      	movs	r0, #16
 800b65a:	f000 fde3 	bl	800c224 <malloc>
 800b65e:	4602      	mov	r2, r0
 800b660:	6268      	str	r0, [r5, #36]	; 0x24
 800b662:	b920      	cbnz	r0, 800b66e <_dtoa_r+0x2e>
 800b664:	21ea      	movs	r1, #234	; 0xea
 800b666:	4ba8      	ldr	r3, [pc, #672]	; (800b908 <_dtoa_r+0x2c8>)
 800b668:	48a8      	ldr	r0, [pc, #672]	; (800b90c <_dtoa_r+0x2cc>)
 800b66a:	f001 fbdd 	bl	800ce28 <__assert_func>
 800b66e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b672:	6004      	str	r4, [r0, #0]
 800b674:	60c4      	str	r4, [r0, #12]
 800b676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b678:	6819      	ldr	r1, [r3, #0]
 800b67a:	b151      	cbz	r1, 800b692 <_dtoa_r+0x52>
 800b67c:	685a      	ldr	r2, [r3, #4]
 800b67e:	2301      	movs	r3, #1
 800b680:	4093      	lsls	r3, r2
 800b682:	604a      	str	r2, [r1, #4]
 800b684:	608b      	str	r3, [r1, #8]
 800b686:	4628      	mov	r0, r5
 800b688:	f000 fe30 	bl	800c2ec <_Bfree>
 800b68c:	2200      	movs	r2, #0
 800b68e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	1e3b      	subs	r3, r7, #0
 800b694:	bfaf      	iteee	ge
 800b696:	2300      	movge	r3, #0
 800b698:	2201      	movlt	r2, #1
 800b69a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b69e:	9305      	strlt	r3, [sp, #20]
 800b6a0:	bfa8      	it	ge
 800b6a2:	f8c8 3000 	strge.w	r3, [r8]
 800b6a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b6aa:	4b99      	ldr	r3, [pc, #612]	; (800b910 <_dtoa_r+0x2d0>)
 800b6ac:	bfb8      	it	lt
 800b6ae:	f8c8 2000 	strlt.w	r2, [r8]
 800b6b2:	ea33 0309 	bics.w	r3, r3, r9
 800b6b6:	d119      	bne.n	800b6ec <_dtoa_r+0xac>
 800b6b8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b6bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6c4:	4333      	orrs	r3, r6
 800b6c6:	f000 857f 	beq.w	800c1c8 <_dtoa_r+0xb88>
 800b6ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6cc:	b953      	cbnz	r3, 800b6e4 <_dtoa_r+0xa4>
 800b6ce:	4b91      	ldr	r3, [pc, #580]	; (800b914 <_dtoa_r+0x2d4>)
 800b6d0:	e022      	b.n	800b718 <_dtoa_r+0xd8>
 800b6d2:	4b91      	ldr	r3, [pc, #580]	; (800b918 <_dtoa_r+0x2d8>)
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b6da:	6013      	str	r3, [r2, #0]
 800b6dc:	9803      	ldr	r0, [sp, #12]
 800b6de:	b019      	add	sp, #100	; 0x64
 800b6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e4:	4b8b      	ldr	r3, [pc, #556]	; (800b914 <_dtoa_r+0x2d4>)
 800b6e6:	9303      	str	r3, [sp, #12]
 800b6e8:	3303      	adds	r3, #3
 800b6ea:	e7f5      	b.n	800b6d8 <_dtoa_r+0x98>
 800b6ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b6f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b6f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	f7f5 f954 	bl	80009a8 <__aeabi_dcmpeq>
 800b700:	4680      	mov	r8, r0
 800b702:	b158      	cbz	r0, 800b71c <_dtoa_r+0xdc>
 800b704:	2301      	movs	r3, #1
 800b706:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b708:	6013      	str	r3, [r2, #0]
 800b70a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 8558 	beq.w	800c1c2 <_dtoa_r+0xb82>
 800b712:	4882      	ldr	r0, [pc, #520]	; (800b91c <_dtoa_r+0x2dc>)
 800b714:	6018      	str	r0, [r3, #0]
 800b716:	1e43      	subs	r3, r0, #1
 800b718:	9303      	str	r3, [sp, #12]
 800b71a:	e7df      	b.n	800b6dc <_dtoa_r+0x9c>
 800b71c:	ab16      	add	r3, sp, #88	; 0x58
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	ab17      	add	r3, sp, #92	; 0x5c
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	4628      	mov	r0, r5
 800b726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b72a:	f001 f8c5 	bl	800c8b8 <__d2b>
 800b72e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b732:	4683      	mov	fp, r0
 800b734:	2c00      	cmp	r4, #0
 800b736:	d07f      	beq.n	800b838 <_dtoa_r+0x1f8>
 800b738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b73e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b746:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b74a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b74e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b752:	2200      	movs	r2, #0
 800b754:	4b72      	ldr	r3, [pc, #456]	; (800b920 <_dtoa_r+0x2e0>)
 800b756:	f7f4 fd07 	bl	8000168 <__aeabi_dsub>
 800b75a:	a365      	add	r3, pc, #404	; (adr r3, 800b8f0 <_dtoa_r+0x2b0>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f4 feba 	bl	80004d8 <__aeabi_dmul>
 800b764:	a364      	add	r3, pc, #400	; (adr r3, 800b8f8 <_dtoa_r+0x2b8>)
 800b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76a:	f7f4 fcff 	bl	800016c <__adddf3>
 800b76e:	4606      	mov	r6, r0
 800b770:	4620      	mov	r0, r4
 800b772:	460f      	mov	r7, r1
 800b774:	f7f4 fe46 	bl	8000404 <__aeabi_i2d>
 800b778:	a361      	add	r3, pc, #388	; (adr r3, 800b900 <_dtoa_r+0x2c0>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7f4 feab 	bl	80004d8 <__aeabi_dmul>
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	4630      	mov	r0, r6
 800b788:	4639      	mov	r1, r7
 800b78a:	f7f4 fcef 	bl	800016c <__adddf3>
 800b78e:	4606      	mov	r6, r0
 800b790:	460f      	mov	r7, r1
 800b792:	f7f5 f951 	bl	8000a38 <__aeabi_d2iz>
 800b796:	2200      	movs	r2, #0
 800b798:	4682      	mov	sl, r0
 800b79a:	2300      	movs	r3, #0
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f5 f90c 	bl	80009bc <__aeabi_dcmplt>
 800b7a4:	b148      	cbz	r0, 800b7ba <_dtoa_r+0x17a>
 800b7a6:	4650      	mov	r0, sl
 800b7a8:	f7f4 fe2c 	bl	8000404 <__aeabi_i2d>
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	f7f5 f8fa 	bl	80009a8 <__aeabi_dcmpeq>
 800b7b4:	b908      	cbnz	r0, 800b7ba <_dtoa_r+0x17a>
 800b7b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7ba:	f1ba 0f16 	cmp.w	sl, #22
 800b7be:	d858      	bhi.n	800b872 <_dtoa_r+0x232>
 800b7c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b7c4:	4b57      	ldr	r3, [pc, #348]	; (800b924 <_dtoa_r+0x2e4>)
 800b7c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ce:	f7f5 f8f5 	bl	80009bc <__aeabi_dcmplt>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d04f      	beq.n	800b876 <_dtoa_r+0x236>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b7e0:	1b1c      	subs	r4, r3, r4
 800b7e2:	1e63      	subs	r3, r4, #1
 800b7e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e6:	bf49      	itett	mi
 800b7e8:	f1c4 0301 	rsbmi	r3, r4, #1
 800b7ec:	2300      	movpl	r3, #0
 800b7ee:	9306      	strmi	r3, [sp, #24]
 800b7f0:	2300      	movmi	r3, #0
 800b7f2:	bf54      	ite	pl
 800b7f4:	9306      	strpl	r3, [sp, #24]
 800b7f6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b7f8:	f1ba 0f00 	cmp.w	sl, #0
 800b7fc:	db3d      	blt.n	800b87a <_dtoa_r+0x23a>
 800b7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b800:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b804:	4453      	add	r3, sl
 800b806:	9309      	str	r3, [sp, #36]	; 0x24
 800b808:	2300      	movs	r3, #0
 800b80a:	930a      	str	r3, [sp, #40]	; 0x28
 800b80c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b80e:	2b09      	cmp	r3, #9
 800b810:	f200 808c 	bhi.w	800b92c <_dtoa_r+0x2ec>
 800b814:	2b05      	cmp	r3, #5
 800b816:	bfc4      	itt	gt
 800b818:	3b04      	subgt	r3, #4
 800b81a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b81c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b81e:	bfc8      	it	gt
 800b820:	2400      	movgt	r4, #0
 800b822:	f1a3 0302 	sub.w	r3, r3, #2
 800b826:	bfd8      	it	le
 800b828:	2401      	movle	r4, #1
 800b82a:	2b03      	cmp	r3, #3
 800b82c:	f200 808a 	bhi.w	800b944 <_dtoa_r+0x304>
 800b830:	e8df f003 	tbb	[pc, r3]
 800b834:	5b4d4f2d 	.word	0x5b4d4f2d
 800b838:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b83c:	441c      	add	r4, r3
 800b83e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b842:	2b20      	cmp	r3, #32
 800b844:	bfc3      	ittte	gt
 800b846:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b84a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b84e:	fa09 f303 	lslgt.w	r3, r9, r3
 800b852:	f1c3 0320 	rsble	r3, r3, #32
 800b856:	bfc6      	itte	gt
 800b858:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b85c:	4318      	orrgt	r0, r3
 800b85e:	fa06 f003 	lslle.w	r0, r6, r3
 800b862:	f7f4 fdbf 	bl	80003e4 <__aeabi_ui2d>
 800b866:	2301      	movs	r3, #1
 800b868:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b86c:	3c01      	subs	r4, #1
 800b86e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b870:	e76f      	b.n	800b752 <_dtoa_r+0x112>
 800b872:	2301      	movs	r3, #1
 800b874:	e7b2      	b.n	800b7dc <_dtoa_r+0x19c>
 800b876:	900f      	str	r0, [sp, #60]	; 0x3c
 800b878:	e7b1      	b.n	800b7de <_dtoa_r+0x19e>
 800b87a:	9b06      	ldr	r3, [sp, #24]
 800b87c:	eba3 030a 	sub.w	r3, r3, sl
 800b880:	9306      	str	r3, [sp, #24]
 800b882:	f1ca 0300 	rsb	r3, sl, #0
 800b886:	930a      	str	r3, [sp, #40]	; 0x28
 800b888:	2300      	movs	r3, #0
 800b88a:	930e      	str	r3, [sp, #56]	; 0x38
 800b88c:	e7be      	b.n	800b80c <_dtoa_r+0x1cc>
 800b88e:	2300      	movs	r3, #0
 800b890:	930b      	str	r3, [sp, #44]	; 0x2c
 800b892:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b894:	2b00      	cmp	r3, #0
 800b896:	dc58      	bgt.n	800b94a <_dtoa_r+0x30a>
 800b898:	f04f 0901 	mov.w	r9, #1
 800b89c:	464b      	mov	r3, r9
 800b89e:	f8cd 9020 	str.w	r9, [sp, #32]
 800b8a2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b8aa:	6042      	str	r2, [r0, #4]
 800b8ac:	2204      	movs	r2, #4
 800b8ae:	f102 0614 	add.w	r6, r2, #20
 800b8b2:	429e      	cmp	r6, r3
 800b8b4:	6841      	ldr	r1, [r0, #4]
 800b8b6:	d94e      	bls.n	800b956 <_dtoa_r+0x316>
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	f000 fcd7 	bl	800c26c <_Balloc>
 800b8be:	9003      	str	r0, [sp, #12]
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d14c      	bne.n	800b95e <_dtoa_r+0x31e>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b8ca:	4b17      	ldr	r3, [pc, #92]	; (800b928 <_dtoa_r+0x2e8>)
 800b8cc:	e6cc      	b.n	800b668 <_dtoa_r+0x28>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e7de      	b.n	800b890 <_dtoa_r+0x250>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b8d8:	eb0a 0903 	add.w	r9, sl, r3
 800b8dc:	f109 0301 	add.w	r3, r9, #1
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	9308      	str	r3, [sp, #32]
 800b8e4:	bfb8      	it	lt
 800b8e6:	2301      	movlt	r3, #1
 800b8e8:	e7dd      	b.n	800b8a6 <_dtoa_r+0x266>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e7f2      	b.n	800b8d4 <_dtoa_r+0x294>
 800b8ee:	bf00      	nop
 800b8f0:	636f4361 	.word	0x636f4361
 800b8f4:	3fd287a7 	.word	0x3fd287a7
 800b8f8:	8b60c8b3 	.word	0x8b60c8b3
 800b8fc:	3fc68a28 	.word	0x3fc68a28
 800b900:	509f79fb 	.word	0x509f79fb
 800b904:	3fd34413 	.word	0x3fd34413
 800b908:	0800eb71 	.word	0x0800eb71
 800b90c:	0800eb88 	.word	0x0800eb88
 800b910:	7ff00000 	.word	0x7ff00000
 800b914:	0800eb6d 	.word	0x0800eb6d
 800b918:	0800eb64 	.word	0x0800eb64
 800b91c:	0800eb41 	.word	0x0800eb41
 800b920:	3ff80000 	.word	0x3ff80000
 800b924:	0800ec78 	.word	0x0800ec78
 800b928:	0800ebe3 	.word	0x0800ebe3
 800b92c:	2401      	movs	r4, #1
 800b92e:	2300      	movs	r3, #0
 800b930:	940b      	str	r4, [sp, #44]	; 0x2c
 800b932:	9322      	str	r3, [sp, #136]	; 0x88
 800b934:	f04f 39ff 	mov.w	r9, #4294967295
 800b938:	2200      	movs	r2, #0
 800b93a:	2312      	movs	r3, #18
 800b93c:	f8cd 9020 	str.w	r9, [sp, #32]
 800b940:	9223      	str	r2, [sp, #140]	; 0x8c
 800b942:	e7b0      	b.n	800b8a6 <_dtoa_r+0x266>
 800b944:	2301      	movs	r3, #1
 800b946:	930b      	str	r3, [sp, #44]	; 0x2c
 800b948:	e7f4      	b.n	800b934 <_dtoa_r+0x2f4>
 800b94a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b94e:	464b      	mov	r3, r9
 800b950:	f8cd 9020 	str.w	r9, [sp, #32]
 800b954:	e7a7      	b.n	800b8a6 <_dtoa_r+0x266>
 800b956:	3101      	adds	r1, #1
 800b958:	6041      	str	r1, [r0, #4]
 800b95a:	0052      	lsls	r2, r2, #1
 800b95c:	e7a7      	b.n	800b8ae <_dtoa_r+0x26e>
 800b95e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b960:	9a03      	ldr	r2, [sp, #12]
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	9b08      	ldr	r3, [sp, #32]
 800b966:	2b0e      	cmp	r3, #14
 800b968:	f200 80a8 	bhi.w	800babc <_dtoa_r+0x47c>
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	f000 80a5 	beq.w	800babc <_dtoa_r+0x47c>
 800b972:	f1ba 0f00 	cmp.w	sl, #0
 800b976:	dd34      	ble.n	800b9e2 <_dtoa_r+0x3a2>
 800b978:	4a9a      	ldr	r2, [pc, #616]	; (800bbe4 <_dtoa_r+0x5a4>)
 800b97a:	f00a 030f 	and.w	r3, sl, #15
 800b97e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b982:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b986:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b98a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b98e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b992:	d016      	beq.n	800b9c2 <_dtoa_r+0x382>
 800b994:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b998:	4b93      	ldr	r3, [pc, #588]	; (800bbe8 <_dtoa_r+0x5a8>)
 800b99a:	2703      	movs	r7, #3
 800b99c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9a0:	f7f4 fec4 	bl	800072c <__aeabi_ddiv>
 800b9a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9a8:	f004 040f 	and.w	r4, r4, #15
 800b9ac:	4e8e      	ldr	r6, [pc, #568]	; (800bbe8 <_dtoa_r+0x5a8>)
 800b9ae:	b954      	cbnz	r4, 800b9c6 <_dtoa_r+0x386>
 800b9b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b8:	f7f4 feb8 	bl	800072c <__aeabi_ddiv>
 800b9bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b9c0:	e029      	b.n	800ba16 <_dtoa_r+0x3d6>
 800b9c2:	2702      	movs	r7, #2
 800b9c4:	e7f2      	b.n	800b9ac <_dtoa_r+0x36c>
 800b9c6:	07e1      	lsls	r1, r4, #31
 800b9c8:	d508      	bpl.n	800b9dc <_dtoa_r+0x39c>
 800b9ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b9ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9d2:	f7f4 fd81 	bl	80004d8 <__aeabi_dmul>
 800b9d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b9da:	3701      	adds	r7, #1
 800b9dc:	1064      	asrs	r4, r4, #1
 800b9de:	3608      	adds	r6, #8
 800b9e0:	e7e5      	b.n	800b9ae <_dtoa_r+0x36e>
 800b9e2:	f000 80a5 	beq.w	800bb30 <_dtoa_r+0x4f0>
 800b9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9ea:	f1ca 0400 	rsb	r4, sl, #0
 800b9ee:	4b7d      	ldr	r3, [pc, #500]	; (800bbe4 <_dtoa_r+0x5a4>)
 800b9f0:	f004 020f 	and.w	r2, r4, #15
 800b9f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f7f4 fd6c 	bl	80004d8 <__aeabi_dmul>
 800ba00:	2702      	movs	r7, #2
 800ba02:	2300      	movs	r3, #0
 800ba04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba08:	4e77      	ldr	r6, [pc, #476]	; (800bbe8 <_dtoa_r+0x5a8>)
 800ba0a:	1124      	asrs	r4, r4, #4
 800ba0c:	2c00      	cmp	r4, #0
 800ba0e:	f040 8084 	bne.w	800bb1a <_dtoa_r+0x4da>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d1d2      	bne.n	800b9bc <_dtoa_r+0x37c>
 800ba16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f000 808b 	beq.w	800bb34 <_dtoa_r+0x4f4>
 800ba1e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ba22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ba26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4b6f      	ldr	r3, [pc, #444]	; (800bbec <_dtoa_r+0x5ac>)
 800ba2e:	f7f4 ffc5 	bl	80009bc <__aeabi_dcmplt>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d07e      	beq.n	800bb34 <_dtoa_r+0x4f4>
 800ba36:	9b08      	ldr	r3, [sp, #32]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d07b      	beq.n	800bb34 <_dtoa_r+0x4f4>
 800ba3c:	f1b9 0f00 	cmp.w	r9, #0
 800ba40:	dd38      	ble.n	800bab4 <_dtoa_r+0x474>
 800ba42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ba46:	2200      	movs	r2, #0
 800ba48:	4b69      	ldr	r3, [pc, #420]	; (800bbf0 <_dtoa_r+0x5b0>)
 800ba4a:	f7f4 fd45 	bl	80004d8 <__aeabi_dmul>
 800ba4e:	464c      	mov	r4, r9
 800ba50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba54:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ba58:	3701      	adds	r7, #1
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	f7f4 fcd2 	bl	8000404 <__aeabi_i2d>
 800ba60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba64:	f7f4 fd38 	bl	80004d8 <__aeabi_dmul>
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4b62      	ldr	r3, [pc, #392]	; (800bbf4 <_dtoa_r+0x5b4>)
 800ba6c:	f7f4 fb7e 	bl	800016c <__adddf3>
 800ba70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ba74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ba78:	9611      	str	r6, [sp, #68]	; 0x44
 800ba7a:	2c00      	cmp	r4, #0
 800ba7c:	d15d      	bne.n	800bb3a <_dtoa_r+0x4fa>
 800ba7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba82:	2200      	movs	r2, #0
 800ba84:	4b5c      	ldr	r3, [pc, #368]	; (800bbf8 <_dtoa_r+0x5b8>)
 800ba86:	f7f4 fb6f 	bl	8000168 <__aeabi_dsub>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ba92:	4633      	mov	r3, r6
 800ba94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba96:	f7f4 ffaf 	bl	80009f8 <__aeabi_dcmpgt>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	f040 829c 	bne.w	800bfd8 <_dtoa_r+0x998>
 800baa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800baa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baa6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800baaa:	f7f4 ff87 	bl	80009bc <__aeabi_dcmplt>
 800baae:	2800      	cmp	r0, #0
 800bab0:	f040 8290 	bne.w	800bfd4 <_dtoa_r+0x994>
 800bab4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bab8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800babc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f2c0 8152 	blt.w	800bd68 <_dtoa_r+0x728>
 800bac4:	f1ba 0f0e 	cmp.w	sl, #14
 800bac8:	f300 814e 	bgt.w	800bd68 <_dtoa_r+0x728>
 800bacc:	4b45      	ldr	r3, [pc, #276]	; (800bbe4 <_dtoa_r+0x5a4>)
 800bace:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bad2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bad6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bada:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800badc:	2b00      	cmp	r3, #0
 800bade:	f280 80db 	bge.w	800bc98 <_dtoa_r+0x658>
 800bae2:	9b08      	ldr	r3, [sp, #32]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f300 80d7 	bgt.w	800bc98 <_dtoa_r+0x658>
 800baea:	f040 8272 	bne.w	800bfd2 <_dtoa_r+0x992>
 800baee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baf2:	2200      	movs	r2, #0
 800baf4:	4b40      	ldr	r3, [pc, #256]	; (800bbf8 <_dtoa_r+0x5b8>)
 800baf6:	f7f4 fcef 	bl	80004d8 <__aeabi_dmul>
 800bafa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bafe:	f7f4 ff71 	bl	80009e4 <__aeabi_dcmpge>
 800bb02:	9c08      	ldr	r4, [sp, #32]
 800bb04:	4626      	mov	r6, r4
 800bb06:	2800      	cmp	r0, #0
 800bb08:	f040 8248 	bne.w	800bf9c <_dtoa_r+0x95c>
 800bb0c:	2331      	movs	r3, #49	; 0x31
 800bb0e:	9f03      	ldr	r7, [sp, #12]
 800bb10:	f10a 0a01 	add.w	sl, sl, #1
 800bb14:	f807 3b01 	strb.w	r3, [r7], #1
 800bb18:	e244      	b.n	800bfa4 <_dtoa_r+0x964>
 800bb1a:	07e2      	lsls	r2, r4, #31
 800bb1c:	d505      	bpl.n	800bb2a <_dtoa_r+0x4ea>
 800bb1e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb22:	f7f4 fcd9 	bl	80004d8 <__aeabi_dmul>
 800bb26:	2301      	movs	r3, #1
 800bb28:	3701      	adds	r7, #1
 800bb2a:	1064      	asrs	r4, r4, #1
 800bb2c:	3608      	adds	r6, #8
 800bb2e:	e76d      	b.n	800ba0c <_dtoa_r+0x3cc>
 800bb30:	2702      	movs	r7, #2
 800bb32:	e770      	b.n	800ba16 <_dtoa_r+0x3d6>
 800bb34:	46d0      	mov	r8, sl
 800bb36:	9c08      	ldr	r4, [sp, #32]
 800bb38:	e78f      	b.n	800ba5a <_dtoa_r+0x41a>
 800bb3a:	9903      	ldr	r1, [sp, #12]
 800bb3c:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <_dtoa_r+0x5a4>)
 800bb3e:	4421      	add	r1, r4
 800bb40:	9112      	str	r1, [sp, #72]	; 0x48
 800bb42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb48:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bb4c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb50:	2900      	cmp	r1, #0
 800bb52:	d055      	beq.n	800bc00 <_dtoa_r+0x5c0>
 800bb54:	2000      	movs	r0, #0
 800bb56:	4929      	ldr	r1, [pc, #164]	; (800bbfc <_dtoa_r+0x5bc>)
 800bb58:	f7f4 fde8 	bl	800072c <__aeabi_ddiv>
 800bb5c:	463b      	mov	r3, r7
 800bb5e:	4632      	mov	r2, r6
 800bb60:	f7f4 fb02 	bl	8000168 <__aeabi_dsub>
 800bb64:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bb68:	9f03      	ldr	r7, [sp, #12]
 800bb6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb6e:	f7f4 ff63 	bl	8000a38 <__aeabi_d2iz>
 800bb72:	4604      	mov	r4, r0
 800bb74:	f7f4 fc46 	bl	8000404 <__aeabi_i2d>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb80:	f7f4 faf2 	bl	8000168 <__aeabi_dsub>
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	3430      	adds	r4, #48	; 0x30
 800bb8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb92:	f807 4b01 	strb.w	r4, [r7], #1
 800bb96:	f7f4 ff11 	bl	80009bc <__aeabi_dcmplt>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d174      	bne.n	800bc88 <_dtoa_r+0x648>
 800bb9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bba2:	2000      	movs	r0, #0
 800bba4:	4911      	ldr	r1, [pc, #68]	; (800bbec <_dtoa_r+0x5ac>)
 800bba6:	f7f4 fadf 	bl	8000168 <__aeabi_dsub>
 800bbaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bbae:	f7f4 ff05 	bl	80009bc <__aeabi_dcmplt>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	f040 80b7 	bne.w	800bd26 <_dtoa_r+0x6e6>
 800bbb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbba:	429f      	cmp	r7, r3
 800bbbc:	f43f af7a 	beq.w	800bab4 <_dtoa_r+0x474>
 800bbc0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <_dtoa_r+0x5b0>)
 800bbc8:	f7f4 fc86 	bl	80004d8 <__aeabi_dmul>
 800bbcc:	2200      	movs	r2, #0
 800bbce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bbd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbd6:	4b06      	ldr	r3, [pc, #24]	; (800bbf0 <_dtoa_r+0x5b0>)
 800bbd8:	f7f4 fc7e 	bl	80004d8 <__aeabi_dmul>
 800bbdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbe0:	e7c3      	b.n	800bb6a <_dtoa_r+0x52a>
 800bbe2:	bf00      	nop
 800bbe4:	0800ec78 	.word	0x0800ec78
 800bbe8:	0800ec50 	.word	0x0800ec50
 800bbec:	3ff00000 	.word	0x3ff00000
 800bbf0:	40240000 	.word	0x40240000
 800bbf4:	401c0000 	.word	0x401c0000
 800bbf8:	40140000 	.word	0x40140000
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 fc68 	bl	80004d8 <__aeabi_dmul>
 800bc08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc0e:	9c03      	ldr	r4, [sp, #12]
 800bc10:	9314      	str	r3, [sp, #80]	; 0x50
 800bc12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc16:	f7f4 ff0f 	bl	8000a38 <__aeabi_d2iz>
 800bc1a:	9015      	str	r0, [sp, #84]	; 0x54
 800bc1c:	f7f4 fbf2 	bl	8000404 <__aeabi_i2d>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc28:	f7f4 fa9e 	bl	8000168 <__aeabi_dsub>
 800bc2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc2e:	4606      	mov	r6, r0
 800bc30:	3330      	adds	r3, #48	; 0x30
 800bc32:	f804 3b01 	strb.w	r3, [r4], #1
 800bc36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc38:	460f      	mov	r7, r1
 800bc3a:	429c      	cmp	r4, r3
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	d124      	bne.n	800bc8c <_dtoa_r+0x64c>
 800bc42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc46:	4bb0      	ldr	r3, [pc, #704]	; (800bf08 <_dtoa_r+0x8c8>)
 800bc48:	f7f4 fa90 	bl	800016c <__adddf3>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fed0 	bl	80009f8 <__aeabi_dcmpgt>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d163      	bne.n	800bd24 <_dtoa_r+0x6e4>
 800bc5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc60:	2000      	movs	r0, #0
 800bc62:	49a9      	ldr	r1, [pc, #676]	; (800bf08 <_dtoa_r+0x8c8>)
 800bc64:	f7f4 fa80 	bl	8000168 <__aeabi_dsub>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	4639      	mov	r1, r7
 800bc70:	f7f4 fea4 	bl	80009bc <__aeabi_dcmplt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f43f af1d 	beq.w	800bab4 <_dtoa_r+0x474>
 800bc7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bc7c:	1e7b      	subs	r3, r7, #1
 800bc7e:	9314      	str	r3, [sp, #80]	; 0x50
 800bc80:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bc84:	2b30      	cmp	r3, #48	; 0x30
 800bc86:	d0f8      	beq.n	800bc7a <_dtoa_r+0x63a>
 800bc88:	46c2      	mov	sl, r8
 800bc8a:	e03b      	b.n	800bd04 <_dtoa_r+0x6c4>
 800bc8c:	4b9f      	ldr	r3, [pc, #636]	; (800bf0c <_dtoa_r+0x8cc>)
 800bc8e:	f7f4 fc23 	bl	80004d8 <__aeabi_dmul>
 800bc92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc96:	e7bc      	b.n	800bc12 <_dtoa_r+0x5d2>
 800bc98:	9f03      	ldr	r7, [sp, #12]
 800bc9a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bc9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 fd41 	bl	800072c <__aeabi_ddiv>
 800bcaa:	f7f4 fec5 	bl	8000a38 <__aeabi_d2iz>
 800bcae:	4604      	mov	r4, r0
 800bcb0:	f7f4 fba8 	bl	8000404 <__aeabi_i2d>
 800bcb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcb8:	f7f4 fc0e 	bl	80004d8 <__aeabi_dmul>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	f7f4 fa50 	bl	8000168 <__aeabi_dsub>
 800bcc8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bccc:	f807 6b01 	strb.w	r6, [r7], #1
 800bcd0:	9e03      	ldr	r6, [sp, #12]
 800bcd2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800bcd6:	1bbe      	subs	r6, r7, r6
 800bcd8:	45b4      	cmp	ip, r6
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	d136      	bne.n	800bd4e <_dtoa_r+0x70e>
 800bce0:	f7f4 fa44 	bl	800016c <__adddf3>
 800bce4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bce8:	4680      	mov	r8, r0
 800bcea:	4689      	mov	r9, r1
 800bcec:	f7f4 fe84 	bl	80009f8 <__aeabi_dcmpgt>
 800bcf0:	bb58      	cbnz	r0, 800bd4a <_dtoa_r+0x70a>
 800bcf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	4649      	mov	r1, r9
 800bcfa:	f7f4 fe55 	bl	80009a8 <__aeabi_dcmpeq>
 800bcfe:	b108      	cbz	r0, 800bd04 <_dtoa_r+0x6c4>
 800bd00:	07e1      	lsls	r1, r4, #31
 800bd02:	d422      	bmi.n	800bd4a <_dtoa_r+0x70a>
 800bd04:	4628      	mov	r0, r5
 800bd06:	4659      	mov	r1, fp
 800bd08:	f000 faf0 	bl	800c2ec <_Bfree>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	703b      	strb	r3, [r7, #0]
 800bd10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd12:	f10a 0001 	add.w	r0, sl, #1
 800bd16:	6018      	str	r0, [r3, #0]
 800bd18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f43f acde 	beq.w	800b6dc <_dtoa_r+0x9c>
 800bd20:	601f      	str	r7, [r3, #0]
 800bd22:	e4db      	b.n	800b6dc <_dtoa_r+0x9c>
 800bd24:	4627      	mov	r7, r4
 800bd26:	463b      	mov	r3, r7
 800bd28:	461f      	mov	r7, r3
 800bd2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd2e:	2a39      	cmp	r2, #57	; 0x39
 800bd30:	d107      	bne.n	800bd42 <_dtoa_r+0x702>
 800bd32:	9a03      	ldr	r2, [sp, #12]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d1f7      	bne.n	800bd28 <_dtoa_r+0x6e8>
 800bd38:	2230      	movs	r2, #48	; 0x30
 800bd3a:	9903      	ldr	r1, [sp, #12]
 800bd3c:	f108 0801 	add.w	r8, r8, #1
 800bd40:	700a      	strb	r2, [r1, #0]
 800bd42:	781a      	ldrb	r2, [r3, #0]
 800bd44:	3201      	adds	r2, #1
 800bd46:	701a      	strb	r2, [r3, #0]
 800bd48:	e79e      	b.n	800bc88 <_dtoa_r+0x648>
 800bd4a:	46d0      	mov	r8, sl
 800bd4c:	e7eb      	b.n	800bd26 <_dtoa_r+0x6e6>
 800bd4e:	2200      	movs	r2, #0
 800bd50:	4b6e      	ldr	r3, [pc, #440]	; (800bf0c <_dtoa_r+0x8cc>)
 800bd52:	f7f4 fbc1 	bl	80004d8 <__aeabi_dmul>
 800bd56:	2200      	movs	r2, #0
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	4689      	mov	r9, r1
 800bd5e:	f7f4 fe23 	bl	80009a8 <__aeabi_dcmpeq>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d09b      	beq.n	800bc9e <_dtoa_r+0x65e>
 800bd66:	e7cd      	b.n	800bd04 <_dtoa_r+0x6c4>
 800bd68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	f000 80d0 	beq.w	800bf10 <_dtoa_r+0x8d0>
 800bd70:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bd72:	2a01      	cmp	r2, #1
 800bd74:	f300 80ae 	bgt.w	800bed4 <_dtoa_r+0x894>
 800bd78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd7a:	2a00      	cmp	r2, #0
 800bd7c:	f000 80a6 	beq.w	800becc <_dtoa_r+0x88c>
 800bd80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd86:	9f06      	ldr	r7, [sp, #24]
 800bd88:	9a06      	ldr	r2, [sp, #24]
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	441a      	add	r2, r3
 800bd8e:	9206      	str	r2, [sp, #24]
 800bd90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd92:	4628      	mov	r0, r5
 800bd94:	441a      	add	r2, r3
 800bd96:	9209      	str	r2, [sp, #36]	; 0x24
 800bd98:	f000 fb5e 	bl	800c458 <__i2b>
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	2f00      	cmp	r7, #0
 800bda0:	dd0c      	ble.n	800bdbc <_dtoa_r+0x77c>
 800bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	dd09      	ble.n	800bdbc <_dtoa_r+0x77c>
 800bda8:	42bb      	cmp	r3, r7
 800bdaa:	bfa8      	it	ge
 800bdac:	463b      	movge	r3, r7
 800bdae:	9a06      	ldr	r2, [sp, #24]
 800bdb0:	1aff      	subs	r7, r7, r3
 800bdb2:	1ad2      	subs	r2, r2, r3
 800bdb4:	9206      	str	r2, [sp, #24]
 800bdb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	9309      	str	r3, [sp, #36]	; 0x24
 800bdbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdbe:	b1f3      	cbz	r3, 800bdfe <_dtoa_r+0x7be>
 800bdc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 80a8 	beq.w	800bf18 <_dtoa_r+0x8d8>
 800bdc8:	2c00      	cmp	r4, #0
 800bdca:	dd10      	ble.n	800bdee <_dtoa_r+0x7ae>
 800bdcc:	4631      	mov	r1, r6
 800bdce:	4622      	mov	r2, r4
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	f000 fbff 	bl	800c5d4 <__pow5mult>
 800bdd6:	465a      	mov	r2, fp
 800bdd8:	4601      	mov	r1, r0
 800bdda:	4606      	mov	r6, r0
 800bddc:	4628      	mov	r0, r5
 800bdde:	f000 fb51 	bl	800c484 <__multiply>
 800bde2:	4680      	mov	r8, r0
 800bde4:	4659      	mov	r1, fp
 800bde6:	4628      	mov	r0, r5
 800bde8:	f000 fa80 	bl	800c2ec <_Bfree>
 800bdec:	46c3      	mov	fp, r8
 800bdee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf0:	1b1a      	subs	r2, r3, r4
 800bdf2:	d004      	beq.n	800bdfe <_dtoa_r+0x7be>
 800bdf4:	4659      	mov	r1, fp
 800bdf6:	4628      	mov	r0, r5
 800bdf8:	f000 fbec 	bl	800c5d4 <__pow5mult>
 800bdfc:	4683      	mov	fp, r0
 800bdfe:	2101      	movs	r1, #1
 800be00:	4628      	mov	r0, r5
 800be02:	f000 fb29 	bl	800c458 <__i2b>
 800be06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be08:	4604      	mov	r4, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f340 8086 	ble.w	800bf1c <_dtoa_r+0x8dc>
 800be10:	461a      	mov	r2, r3
 800be12:	4601      	mov	r1, r0
 800be14:	4628      	mov	r0, r5
 800be16:	f000 fbdd 	bl	800c5d4 <__pow5mult>
 800be1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be1c:	4604      	mov	r4, r0
 800be1e:	2b01      	cmp	r3, #1
 800be20:	dd7f      	ble.n	800bf22 <_dtoa_r+0x8e2>
 800be22:	f04f 0800 	mov.w	r8, #0
 800be26:	6923      	ldr	r3, [r4, #16]
 800be28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be2c:	6918      	ldr	r0, [r3, #16]
 800be2e:	f000 fac5 	bl	800c3bc <__hi0bits>
 800be32:	f1c0 0020 	rsb	r0, r0, #32
 800be36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be38:	4418      	add	r0, r3
 800be3a:	f010 001f 	ands.w	r0, r0, #31
 800be3e:	f000 8092 	beq.w	800bf66 <_dtoa_r+0x926>
 800be42:	f1c0 0320 	rsb	r3, r0, #32
 800be46:	2b04      	cmp	r3, #4
 800be48:	f340 808a 	ble.w	800bf60 <_dtoa_r+0x920>
 800be4c:	f1c0 001c 	rsb	r0, r0, #28
 800be50:	9b06      	ldr	r3, [sp, #24]
 800be52:	4407      	add	r7, r0
 800be54:	4403      	add	r3, r0
 800be56:	9306      	str	r3, [sp, #24]
 800be58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be5a:	4403      	add	r3, r0
 800be5c:	9309      	str	r3, [sp, #36]	; 0x24
 800be5e:	9b06      	ldr	r3, [sp, #24]
 800be60:	2b00      	cmp	r3, #0
 800be62:	dd05      	ble.n	800be70 <_dtoa_r+0x830>
 800be64:	4659      	mov	r1, fp
 800be66:	461a      	mov	r2, r3
 800be68:	4628      	mov	r0, r5
 800be6a:	f000 fc0d 	bl	800c688 <__lshift>
 800be6e:	4683      	mov	fp, r0
 800be70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be72:	2b00      	cmp	r3, #0
 800be74:	dd05      	ble.n	800be82 <_dtoa_r+0x842>
 800be76:	4621      	mov	r1, r4
 800be78:	461a      	mov	r2, r3
 800be7a:	4628      	mov	r0, r5
 800be7c:	f000 fc04 	bl	800c688 <__lshift>
 800be80:	4604      	mov	r4, r0
 800be82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be84:	2b00      	cmp	r3, #0
 800be86:	d070      	beq.n	800bf6a <_dtoa_r+0x92a>
 800be88:	4621      	mov	r1, r4
 800be8a:	4658      	mov	r0, fp
 800be8c:	f000 fc6c 	bl	800c768 <__mcmp>
 800be90:	2800      	cmp	r0, #0
 800be92:	da6a      	bge.n	800bf6a <_dtoa_r+0x92a>
 800be94:	2300      	movs	r3, #0
 800be96:	4659      	mov	r1, fp
 800be98:	220a      	movs	r2, #10
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 fa48 	bl	800c330 <__multadd>
 800bea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bea2:	4683      	mov	fp, r0
 800bea4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 8194 	beq.w	800c1d6 <_dtoa_r+0xb96>
 800beae:	4631      	mov	r1, r6
 800beb0:	2300      	movs	r3, #0
 800beb2:	220a      	movs	r2, #10
 800beb4:	4628      	mov	r0, r5
 800beb6:	f000 fa3b 	bl	800c330 <__multadd>
 800beba:	f1b9 0f00 	cmp.w	r9, #0
 800bebe:	4606      	mov	r6, r0
 800bec0:	f300 8093 	bgt.w	800bfea <_dtoa_r+0x9aa>
 800bec4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	dc57      	bgt.n	800bf7a <_dtoa_r+0x93a>
 800beca:	e08e      	b.n	800bfea <_dtoa_r+0x9aa>
 800becc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bed2:	e757      	b.n	800bd84 <_dtoa_r+0x744>
 800bed4:	9b08      	ldr	r3, [sp, #32]
 800bed6:	1e5c      	subs	r4, r3, #1
 800bed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beda:	42a3      	cmp	r3, r4
 800bedc:	bfb7      	itett	lt
 800bede:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bee0:	1b1c      	subge	r4, r3, r4
 800bee2:	1ae2      	sublt	r2, r4, r3
 800bee4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bee6:	bfbe      	ittt	lt
 800bee8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800beea:	189b      	addlt	r3, r3, r2
 800beec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800beee:	9b08      	ldr	r3, [sp, #32]
 800bef0:	bfb8      	it	lt
 800bef2:	2400      	movlt	r4, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bfbb      	ittet	lt
 800bef8:	9b06      	ldrlt	r3, [sp, #24]
 800befa:	9a08      	ldrlt	r2, [sp, #32]
 800befc:	9f06      	ldrge	r7, [sp, #24]
 800befe:	1a9f      	sublt	r7, r3, r2
 800bf00:	bfac      	ite	ge
 800bf02:	9b08      	ldrge	r3, [sp, #32]
 800bf04:	2300      	movlt	r3, #0
 800bf06:	e73f      	b.n	800bd88 <_dtoa_r+0x748>
 800bf08:	3fe00000 	.word	0x3fe00000
 800bf0c:	40240000 	.word	0x40240000
 800bf10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bf12:	9f06      	ldr	r7, [sp, #24]
 800bf14:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bf16:	e742      	b.n	800bd9e <_dtoa_r+0x75e>
 800bf18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf1a:	e76b      	b.n	800bdf4 <_dtoa_r+0x7b4>
 800bf1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	dc19      	bgt.n	800bf56 <_dtoa_r+0x916>
 800bf22:	9b04      	ldr	r3, [sp, #16]
 800bf24:	b9bb      	cbnz	r3, 800bf56 <_dtoa_r+0x916>
 800bf26:	9b05      	ldr	r3, [sp, #20]
 800bf28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf2c:	b99b      	cbnz	r3, 800bf56 <_dtoa_r+0x916>
 800bf2e:	9b05      	ldr	r3, [sp, #20]
 800bf30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf34:	0d1b      	lsrs	r3, r3, #20
 800bf36:	051b      	lsls	r3, r3, #20
 800bf38:	b183      	cbz	r3, 800bf5c <_dtoa_r+0x91c>
 800bf3a:	f04f 0801 	mov.w	r8, #1
 800bf3e:	9b06      	ldr	r3, [sp, #24]
 800bf40:	3301      	adds	r3, #1
 800bf42:	9306      	str	r3, [sp, #24]
 800bf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf46:	3301      	adds	r3, #1
 800bf48:	9309      	str	r3, [sp, #36]	; 0x24
 800bf4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f47f af6a 	bne.w	800be26 <_dtoa_r+0x7e6>
 800bf52:	2001      	movs	r0, #1
 800bf54:	e76f      	b.n	800be36 <_dtoa_r+0x7f6>
 800bf56:	f04f 0800 	mov.w	r8, #0
 800bf5a:	e7f6      	b.n	800bf4a <_dtoa_r+0x90a>
 800bf5c:	4698      	mov	r8, r3
 800bf5e:	e7f4      	b.n	800bf4a <_dtoa_r+0x90a>
 800bf60:	f43f af7d 	beq.w	800be5e <_dtoa_r+0x81e>
 800bf64:	4618      	mov	r0, r3
 800bf66:	301c      	adds	r0, #28
 800bf68:	e772      	b.n	800be50 <_dtoa_r+0x810>
 800bf6a:	9b08      	ldr	r3, [sp, #32]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dc36      	bgt.n	800bfde <_dtoa_r+0x99e>
 800bf70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	dd33      	ble.n	800bfde <_dtoa_r+0x99e>
 800bf76:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	d10d      	bne.n	800bf9c <_dtoa_r+0x95c>
 800bf80:	4621      	mov	r1, r4
 800bf82:	464b      	mov	r3, r9
 800bf84:	2205      	movs	r2, #5
 800bf86:	4628      	mov	r0, r5
 800bf88:	f000 f9d2 	bl	800c330 <__multadd>
 800bf8c:	4601      	mov	r1, r0
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4658      	mov	r0, fp
 800bf92:	f000 fbe9 	bl	800c768 <__mcmp>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	f73f adb8 	bgt.w	800bb0c <_dtoa_r+0x4cc>
 800bf9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bf9e:	9f03      	ldr	r7, [sp, #12]
 800bfa0:	ea6f 0a03 	mvn.w	sl, r3
 800bfa4:	f04f 0800 	mov.w	r8, #0
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 f99e 	bl	800c2ec <_Bfree>
 800bfb0:	2e00      	cmp	r6, #0
 800bfb2:	f43f aea7 	beq.w	800bd04 <_dtoa_r+0x6c4>
 800bfb6:	f1b8 0f00 	cmp.w	r8, #0
 800bfba:	d005      	beq.n	800bfc8 <_dtoa_r+0x988>
 800bfbc:	45b0      	cmp	r8, r6
 800bfbe:	d003      	beq.n	800bfc8 <_dtoa_r+0x988>
 800bfc0:	4641      	mov	r1, r8
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f000 f992 	bl	800c2ec <_Bfree>
 800bfc8:	4631      	mov	r1, r6
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 f98e 	bl	800c2ec <_Bfree>
 800bfd0:	e698      	b.n	800bd04 <_dtoa_r+0x6c4>
 800bfd2:	2400      	movs	r4, #0
 800bfd4:	4626      	mov	r6, r4
 800bfd6:	e7e1      	b.n	800bf9c <_dtoa_r+0x95c>
 800bfd8:	46c2      	mov	sl, r8
 800bfda:	4626      	mov	r6, r4
 800bfdc:	e596      	b.n	800bb0c <_dtoa_r+0x4cc>
 800bfde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 80fd 	beq.w	800c1e4 <_dtoa_r+0xba4>
 800bfea:	2f00      	cmp	r7, #0
 800bfec:	dd05      	ble.n	800bffa <_dtoa_r+0x9ba>
 800bfee:	4631      	mov	r1, r6
 800bff0:	463a      	mov	r2, r7
 800bff2:	4628      	mov	r0, r5
 800bff4:	f000 fb48 	bl	800c688 <__lshift>
 800bff8:	4606      	mov	r6, r0
 800bffa:	f1b8 0f00 	cmp.w	r8, #0
 800bffe:	d05c      	beq.n	800c0ba <_dtoa_r+0xa7a>
 800c000:	4628      	mov	r0, r5
 800c002:	6871      	ldr	r1, [r6, #4]
 800c004:	f000 f932 	bl	800c26c <_Balloc>
 800c008:	4607      	mov	r7, r0
 800c00a:	b928      	cbnz	r0, 800c018 <_dtoa_r+0x9d8>
 800c00c:	4602      	mov	r2, r0
 800c00e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c012:	4b7f      	ldr	r3, [pc, #508]	; (800c210 <_dtoa_r+0xbd0>)
 800c014:	f7ff bb28 	b.w	800b668 <_dtoa_r+0x28>
 800c018:	6932      	ldr	r2, [r6, #16]
 800c01a:	f106 010c 	add.w	r1, r6, #12
 800c01e:	3202      	adds	r2, #2
 800c020:	0092      	lsls	r2, r2, #2
 800c022:	300c      	adds	r0, #12
 800c024:	f000 f914 	bl	800c250 <memcpy>
 800c028:	2201      	movs	r2, #1
 800c02a:	4639      	mov	r1, r7
 800c02c:	4628      	mov	r0, r5
 800c02e:	f000 fb2b 	bl	800c688 <__lshift>
 800c032:	46b0      	mov	r8, r6
 800c034:	4606      	mov	r6, r0
 800c036:	9b03      	ldr	r3, [sp, #12]
 800c038:	3301      	adds	r3, #1
 800c03a:	9308      	str	r3, [sp, #32]
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	444b      	add	r3, r9
 800c040:	930a      	str	r3, [sp, #40]	; 0x28
 800c042:	9b04      	ldr	r3, [sp, #16]
 800c044:	f003 0301 	and.w	r3, r3, #1
 800c048:	9309      	str	r3, [sp, #36]	; 0x24
 800c04a:	9b08      	ldr	r3, [sp, #32]
 800c04c:	4621      	mov	r1, r4
 800c04e:	3b01      	subs	r3, #1
 800c050:	4658      	mov	r0, fp
 800c052:	9304      	str	r3, [sp, #16]
 800c054:	f7ff fa68 	bl	800b528 <quorem>
 800c058:	4603      	mov	r3, r0
 800c05a:	4641      	mov	r1, r8
 800c05c:	3330      	adds	r3, #48	; 0x30
 800c05e:	9006      	str	r0, [sp, #24]
 800c060:	4658      	mov	r0, fp
 800c062:	930b      	str	r3, [sp, #44]	; 0x2c
 800c064:	f000 fb80 	bl	800c768 <__mcmp>
 800c068:	4632      	mov	r2, r6
 800c06a:	4681      	mov	r9, r0
 800c06c:	4621      	mov	r1, r4
 800c06e:	4628      	mov	r0, r5
 800c070:	f000 fb96 	bl	800c7a0 <__mdiff>
 800c074:	68c2      	ldr	r2, [r0, #12]
 800c076:	4607      	mov	r7, r0
 800c078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c07a:	bb02      	cbnz	r2, 800c0be <_dtoa_r+0xa7e>
 800c07c:	4601      	mov	r1, r0
 800c07e:	4658      	mov	r0, fp
 800c080:	f000 fb72 	bl	800c768 <__mcmp>
 800c084:	4602      	mov	r2, r0
 800c086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c088:	4639      	mov	r1, r7
 800c08a:	4628      	mov	r0, r5
 800c08c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c090:	f000 f92c 	bl	800c2ec <_Bfree>
 800c094:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c098:	9f08      	ldr	r7, [sp, #32]
 800c09a:	ea43 0102 	orr.w	r1, r3, r2
 800c09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0a4:	d10d      	bne.n	800c0c2 <_dtoa_r+0xa82>
 800c0a6:	2b39      	cmp	r3, #57	; 0x39
 800c0a8:	d029      	beq.n	800c0fe <_dtoa_r+0xabe>
 800c0aa:	f1b9 0f00 	cmp.w	r9, #0
 800c0ae:	dd01      	ble.n	800c0b4 <_dtoa_r+0xa74>
 800c0b0:	9b06      	ldr	r3, [sp, #24]
 800c0b2:	3331      	adds	r3, #49	; 0x31
 800c0b4:	9a04      	ldr	r2, [sp, #16]
 800c0b6:	7013      	strb	r3, [r2, #0]
 800c0b8:	e776      	b.n	800bfa8 <_dtoa_r+0x968>
 800c0ba:	4630      	mov	r0, r6
 800c0bc:	e7b9      	b.n	800c032 <_dtoa_r+0x9f2>
 800c0be:	2201      	movs	r2, #1
 800c0c0:	e7e2      	b.n	800c088 <_dtoa_r+0xa48>
 800c0c2:	f1b9 0f00 	cmp.w	r9, #0
 800c0c6:	db06      	blt.n	800c0d6 <_dtoa_r+0xa96>
 800c0c8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c0ca:	ea41 0909 	orr.w	r9, r1, r9
 800c0ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0d0:	ea59 0101 	orrs.w	r1, r9, r1
 800c0d4:	d120      	bne.n	800c118 <_dtoa_r+0xad8>
 800c0d6:	2a00      	cmp	r2, #0
 800c0d8:	ddec      	ble.n	800c0b4 <_dtoa_r+0xa74>
 800c0da:	4659      	mov	r1, fp
 800c0dc:	2201      	movs	r2, #1
 800c0de:	4628      	mov	r0, r5
 800c0e0:	9308      	str	r3, [sp, #32]
 800c0e2:	f000 fad1 	bl	800c688 <__lshift>
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4683      	mov	fp, r0
 800c0ea:	f000 fb3d 	bl	800c768 <__mcmp>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	9b08      	ldr	r3, [sp, #32]
 800c0f2:	dc02      	bgt.n	800c0fa <_dtoa_r+0xaba>
 800c0f4:	d1de      	bne.n	800c0b4 <_dtoa_r+0xa74>
 800c0f6:	07da      	lsls	r2, r3, #31
 800c0f8:	d5dc      	bpl.n	800c0b4 <_dtoa_r+0xa74>
 800c0fa:	2b39      	cmp	r3, #57	; 0x39
 800c0fc:	d1d8      	bne.n	800c0b0 <_dtoa_r+0xa70>
 800c0fe:	2339      	movs	r3, #57	; 0x39
 800c100:	9a04      	ldr	r2, [sp, #16]
 800c102:	7013      	strb	r3, [r2, #0]
 800c104:	463b      	mov	r3, r7
 800c106:	461f      	mov	r7, r3
 800c108:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	2a39      	cmp	r2, #57	; 0x39
 800c110:	d050      	beq.n	800c1b4 <_dtoa_r+0xb74>
 800c112:	3201      	adds	r2, #1
 800c114:	701a      	strb	r2, [r3, #0]
 800c116:	e747      	b.n	800bfa8 <_dtoa_r+0x968>
 800c118:	2a00      	cmp	r2, #0
 800c11a:	dd03      	ble.n	800c124 <_dtoa_r+0xae4>
 800c11c:	2b39      	cmp	r3, #57	; 0x39
 800c11e:	d0ee      	beq.n	800c0fe <_dtoa_r+0xabe>
 800c120:	3301      	adds	r3, #1
 800c122:	e7c7      	b.n	800c0b4 <_dtoa_r+0xa74>
 800c124:	9a08      	ldr	r2, [sp, #32]
 800c126:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c128:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c12c:	428a      	cmp	r2, r1
 800c12e:	d02a      	beq.n	800c186 <_dtoa_r+0xb46>
 800c130:	4659      	mov	r1, fp
 800c132:	2300      	movs	r3, #0
 800c134:	220a      	movs	r2, #10
 800c136:	4628      	mov	r0, r5
 800c138:	f000 f8fa 	bl	800c330 <__multadd>
 800c13c:	45b0      	cmp	r8, r6
 800c13e:	4683      	mov	fp, r0
 800c140:	f04f 0300 	mov.w	r3, #0
 800c144:	f04f 020a 	mov.w	r2, #10
 800c148:	4641      	mov	r1, r8
 800c14a:	4628      	mov	r0, r5
 800c14c:	d107      	bne.n	800c15e <_dtoa_r+0xb1e>
 800c14e:	f000 f8ef 	bl	800c330 <__multadd>
 800c152:	4680      	mov	r8, r0
 800c154:	4606      	mov	r6, r0
 800c156:	9b08      	ldr	r3, [sp, #32]
 800c158:	3301      	adds	r3, #1
 800c15a:	9308      	str	r3, [sp, #32]
 800c15c:	e775      	b.n	800c04a <_dtoa_r+0xa0a>
 800c15e:	f000 f8e7 	bl	800c330 <__multadd>
 800c162:	4631      	mov	r1, r6
 800c164:	4680      	mov	r8, r0
 800c166:	2300      	movs	r3, #0
 800c168:	220a      	movs	r2, #10
 800c16a:	4628      	mov	r0, r5
 800c16c:	f000 f8e0 	bl	800c330 <__multadd>
 800c170:	4606      	mov	r6, r0
 800c172:	e7f0      	b.n	800c156 <_dtoa_r+0xb16>
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	bfcc      	ite	gt
 800c17a:	464f      	movgt	r7, r9
 800c17c:	2701      	movle	r7, #1
 800c17e:	f04f 0800 	mov.w	r8, #0
 800c182:	9a03      	ldr	r2, [sp, #12]
 800c184:	4417      	add	r7, r2
 800c186:	4659      	mov	r1, fp
 800c188:	2201      	movs	r2, #1
 800c18a:	4628      	mov	r0, r5
 800c18c:	9308      	str	r3, [sp, #32]
 800c18e:	f000 fa7b 	bl	800c688 <__lshift>
 800c192:	4621      	mov	r1, r4
 800c194:	4683      	mov	fp, r0
 800c196:	f000 fae7 	bl	800c768 <__mcmp>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	dcb2      	bgt.n	800c104 <_dtoa_r+0xac4>
 800c19e:	d102      	bne.n	800c1a6 <_dtoa_r+0xb66>
 800c1a0:	9b08      	ldr	r3, [sp, #32]
 800c1a2:	07db      	lsls	r3, r3, #31
 800c1a4:	d4ae      	bmi.n	800c104 <_dtoa_r+0xac4>
 800c1a6:	463b      	mov	r3, r7
 800c1a8:	461f      	mov	r7, r3
 800c1aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1ae:	2a30      	cmp	r2, #48	; 0x30
 800c1b0:	d0fa      	beq.n	800c1a8 <_dtoa_r+0xb68>
 800c1b2:	e6f9      	b.n	800bfa8 <_dtoa_r+0x968>
 800c1b4:	9a03      	ldr	r2, [sp, #12]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d1a5      	bne.n	800c106 <_dtoa_r+0xac6>
 800c1ba:	2331      	movs	r3, #49	; 0x31
 800c1bc:	f10a 0a01 	add.w	sl, sl, #1
 800c1c0:	e779      	b.n	800c0b6 <_dtoa_r+0xa76>
 800c1c2:	4b14      	ldr	r3, [pc, #80]	; (800c214 <_dtoa_r+0xbd4>)
 800c1c4:	f7ff baa8 	b.w	800b718 <_dtoa_r+0xd8>
 800c1c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f47f aa81 	bne.w	800b6d2 <_dtoa_r+0x92>
 800c1d0:	4b11      	ldr	r3, [pc, #68]	; (800c218 <_dtoa_r+0xbd8>)
 800c1d2:	f7ff baa1 	b.w	800b718 <_dtoa_r+0xd8>
 800c1d6:	f1b9 0f00 	cmp.w	r9, #0
 800c1da:	dc03      	bgt.n	800c1e4 <_dtoa_r+0xba4>
 800c1dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	f73f aecb 	bgt.w	800bf7a <_dtoa_r+0x93a>
 800c1e4:	9f03      	ldr	r7, [sp, #12]
 800c1e6:	4621      	mov	r1, r4
 800c1e8:	4658      	mov	r0, fp
 800c1ea:	f7ff f99d 	bl	800b528 <quorem>
 800c1ee:	9a03      	ldr	r2, [sp, #12]
 800c1f0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c1f4:	f807 3b01 	strb.w	r3, [r7], #1
 800c1f8:	1aba      	subs	r2, r7, r2
 800c1fa:	4591      	cmp	r9, r2
 800c1fc:	ddba      	ble.n	800c174 <_dtoa_r+0xb34>
 800c1fe:	4659      	mov	r1, fp
 800c200:	2300      	movs	r3, #0
 800c202:	220a      	movs	r2, #10
 800c204:	4628      	mov	r0, r5
 800c206:	f000 f893 	bl	800c330 <__multadd>
 800c20a:	4683      	mov	fp, r0
 800c20c:	e7eb      	b.n	800c1e6 <_dtoa_r+0xba6>
 800c20e:	bf00      	nop
 800c210:	0800ebe3 	.word	0x0800ebe3
 800c214:	0800eb40 	.word	0x0800eb40
 800c218:	0800eb64 	.word	0x0800eb64

0800c21c <_localeconv_r>:
 800c21c:	4800      	ldr	r0, [pc, #0]	; (800c220 <_localeconv_r+0x4>)
 800c21e:	4770      	bx	lr
 800c220:	20000324 	.word	0x20000324

0800c224 <malloc>:
 800c224:	4b02      	ldr	r3, [pc, #8]	; (800c230 <malloc+0xc>)
 800c226:	4601      	mov	r1, r0
 800c228:	6818      	ldr	r0, [r3, #0]
 800c22a:	f000 bc1d 	b.w	800ca68 <_malloc_r>
 800c22e:	bf00      	nop
 800c230:	200001d0 	.word	0x200001d0

0800c234 <memchr>:
 800c234:	4603      	mov	r3, r0
 800c236:	b510      	push	{r4, lr}
 800c238:	b2c9      	uxtb	r1, r1
 800c23a:	4402      	add	r2, r0
 800c23c:	4293      	cmp	r3, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	d101      	bne.n	800c246 <memchr+0x12>
 800c242:	2000      	movs	r0, #0
 800c244:	e003      	b.n	800c24e <memchr+0x1a>
 800c246:	7804      	ldrb	r4, [r0, #0]
 800c248:	3301      	adds	r3, #1
 800c24a:	428c      	cmp	r4, r1
 800c24c:	d1f6      	bne.n	800c23c <memchr+0x8>
 800c24e:	bd10      	pop	{r4, pc}

0800c250 <memcpy>:
 800c250:	440a      	add	r2, r1
 800c252:	4291      	cmp	r1, r2
 800c254:	f100 33ff 	add.w	r3, r0, #4294967295
 800c258:	d100      	bne.n	800c25c <memcpy+0xc>
 800c25a:	4770      	bx	lr
 800c25c:	b510      	push	{r4, lr}
 800c25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c262:	4291      	cmp	r1, r2
 800c264:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c268:	d1f9      	bne.n	800c25e <memcpy+0xe>
 800c26a:	bd10      	pop	{r4, pc}

0800c26c <_Balloc>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	b976      	cbnz	r6, 800c294 <_Balloc+0x28>
 800c276:	2010      	movs	r0, #16
 800c278:	f7ff ffd4 	bl	800c224 <malloc>
 800c27c:	4602      	mov	r2, r0
 800c27e:	6260      	str	r0, [r4, #36]	; 0x24
 800c280:	b920      	cbnz	r0, 800c28c <_Balloc+0x20>
 800c282:	2166      	movs	r1, #102	; 0x66
 800c284:	4b17      	ldr	r3, [pc, #92]	; (800c2e4 <_Balloc+0x78>)
 800c286:	4818      	ldr	r0, [pc, #96]	; (800c2e8 <_Balloc+0x7c>)
 800c288:	f000 fdce 	bl	800ce28 <__assert_func>
 800c28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c290:	6006      	str	r6, [r0, #0]
 800c292:	60c6      	str	r6, [r0, #12]
 800c294:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c296:	68f3      	ldr	r3, [r6, #12]
 800c298:	b183      	cbz	r3, 800c2bc <_Balloc+0x50>
 800c29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2a2:	b9b8      	cbnz	r0, 800c2d4 <_Balloc+0x68>
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2aa:	1d72      	adds	r2, r6, #5
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	0092      	lsls	r2, r2, #2
 800c2b0:	f000 fb5e 	bl	800c970 <_calloc_r>
 800c2b4:	b160      	cbz	r0, 800c2d0 <_Balloc+0x64>
 800c2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ba:	e00e      	b.n	800c2da <_Balloc+0x6e>
 800c2bc:	2221      	movs	r2, #33	; 0x21
 800c2be:	2104      	movs	r1, #4
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fb55 	bl	800c970 <_calloc_r>
 800c2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c8:	60f0      	str	r0, [r6, #12]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e4      	bne.n	800c29a <_Balloc+0x2e>
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	6802      	ldr	r2, [r0, #0]
 800c2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2e0:	e7f7      	b.n	800c2d2 <_Balloc+0x66>
 800c2e2:	bf00      	nop
 800c2e4:	0800eb71 	.word	0x0800eb71
 800c2e8:	0800ebf4 	.word	0x0800ebf4

0800c2ec <_Bfree>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	b976      	cbnz	r6, 800c314 <_Bfree+0x28>
 800c2f6:	2010      	movs	r0, #16
 800c2f8:	f7ff ff94 	bl	800c224 <malloc>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	6268      	str	r0, [r5, #36]	; 0x24
 800c300:	b920      	cbnz	r0, 800c30c <_Bfree+0x20>
 800c302:	218a      	movs	r1, #138	; 0x8a
 800c304:	4b08      	ldr	r3, [pc, #32]	; (800c328 <_Bfree+0x3c>)
 800c306:	4809      	ldr	r0, [pc, #36]	; (800c32c <_Bfree+0x40>)
 800c308:	f000 fd8e 	bl	800ce28 <__assert_func>
 800c30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c310:	6006      	str	r6, [r0, #0]
 800c312:	60c6      	str	r6, [r0, #12]
 800c314:	b13c      	cbz	r4, 800c326 <_Bfree+0x3a>
 800c316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c318:	6862      	ldr	r2, [r4, #4]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c320:	6021      	str	r1, [r4, #0]
 800c322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c326:	bd70      	pop	{r4, r5, r6, pc}
 800c328:	0800eb71 	.word	0x0800eb71
 800c32c:	0800ebf4 	.word	0x0800ebf4

0800c330 <__multadd>:
 800c330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c334:	4607      	mov	r7, r0
 800c336:	460c      	mov	r4, r1
 800c338:	461e      	mov	r6, r3
 800c33a:	2000      	movs	r0, #0
 800c33c:	690d      	ldr	r5, [r1, #16]
 800c33e:	f101 0c14 	add.w	ip, r1, #20
 800c342:	f8dc 3000 	ldr.w	r3, [ip]
 800c346:	3001      	adds	r0, #1
 800c348:	b299      	uxth	r1, r3
 800c34a:	fb02 6101 	mla	r1, r2, r1, r6
 800c34e:	0c1e      	lsrs	r6, r3, #16
 800c350:	0c0b      	lsrs	r3, r1, #16
 800c352:	fb02 3306 	mla	r3, r2, r6, r3
 800c356:	b289      	uxth	r1, r1
 800c358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c35c:	4285      	cmp	r5, r0
 800c35e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c362:	f84c 1b04 	str.w	r1, [ip], #4
 800c366:	dcec      	bgt.n	800c342 <__multadd+0x12>
 800c368:	b30e      	cbz	r6, 800c3ae <__multadd+0x7e>
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	42ab      	cmp	r3, r5
 800c36e:	dc19      	bgt.n	800c3a4 <__multadd+0x74>
 800c370:	6861      	ldr	r1, [r4, #4]
 800c372:	4638      	mov	r0, r7
 800c374:	3101      	adds	r1, #1
 800c376:	f7ff ff79 	bl	800c26c <_Balloc>
 800c37a:	4680      	mov	r8, r0
 800c37c:	b928      	cbnz	r0, 800c38a <__multadd+0x5a>
 800c37e:	4602      	mov	r2, r0
 800c380:	21b5      	movs	r1, #181	; 0xb5
 800c382:	4b0c      	ldr	r3, [pc, #48]	; (800c3b4 <__multadd+0x84>)
 800c384:	480c      	ldr	r0, [pc, #48]	; (800c3b8 <__multadd+0x88>)
 800c386:	f000 fd4f 	bl	800ce28 <__assert_func>
 800c38a:	6922      	ldr	r2, [r4, #16]
 800c38c:	f104 010c 	add.w	r1, r4, #12
 800c390:	3202      	adds	r2, #2
 800c392:	0092      	lsls	r2, r2, #2
 800c394:	300c      	adds	r0, #12
 800c396:	f7ff ff5b 	bl	800c250 <memcpy>
 800c39a:	4621      	mov	r1, r4
 800c39c:	4638      	mov	r0, r7
 800c39e:	f7ff ffa5 	bl	800c2ec <_Bfree>
 800c3a2:	4644      	mov	r4, r8
 800c3a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3a8:	3501      	adds	r5, #1
 800c3aa:	615e      	str	r6, [r3, #20]
 800c3ac:	6125      	str	r5, [r4, #16]
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b4:	0800ebe3 	.word	0x0800ebe3
 800c3b8:	0800ebf4 	.word	0x0800ebf4

0800c3bc <__hi0bits>:
 800c3bc:	0c02      	lsrs	r2, r0, #16
 800c3be:	0412      	lsls	r2, r2, #16
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	b9ca      	cbnz	r2, 800c3f8 <__hi0bits+0x3c>
 800c3c4:	0403      	lsls	r3, r0, #16
 800c3c6:	2010      	movs	r0, #16
 800c3c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c3cc:	bf04      	itt	eq
 800c3ce:	021b      	lsleq	r3, r3, #8
 800c3d0:	3008      	addeq	r0, #8
 800c3d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c3d6:	bf04      	itt	eq
 800c3d8:	011b      	lsleq	r3, r3, #4
 800c3da:	3004      	addeq	r0, #4
 800c3dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c3e0:	bf04      	itt	eq
 800c3e2:	009b      	lsleq	r3, r3, #2
 800c3e4:	3002      	addeq	r0, #2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	db05      	blt.n	800c3f6 <__hi0bits+0x3a>
 800c3ea:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c3ee:	f100 0001 	add.w	r0, r0, #1
 800c3f2:	bf08      	it	eq
 800c3f4:	2020      	moveq	r0, #32
 800c3f6:	4770      	bx	lr
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e7e5      	b.n	800c3c8 <__hi0bits+0xc>

0800c3fc <__lo0bits>:
 800c3fc:	6803      	ldr	r3, [r0, #0]
 800c3fe:	4602      	mov	r2, r0
 800c400:	f013 0007 	ands.w	r0, r3, #7
 800c404:	d00b      	beq.n	800c41e <__lo0bits+0x22>
 800c406:	07d9      	lsls	r1, r3, #31
 800c408:	d421      	bmi.n	800c44e <__lo0bits+0x52>
 800c40a:	0798      	lsls	r0, r3, #30
 800c40c:	bf49      	itett	mi
 800c40e:	085b      	lsrmi	r3, r3, #1
 800c410:	089b      	lsrpl	r3, r3, #2
 800c412:	2001      	movmi	r0, #1
 800c414:	6013      	strmi	r3, [r2, #0]
 800c416:	bf5c      	itt	pl
 800c418:	2002      	movpl	r0, #2
 800c41a:	6013      	strpl	r3, [r2, #0]
 800c41c:	4770      	bx	lr
 800c41e:	b299      	uxth	r1, r3
 800c420:	b909      	cbnz	r1, 800c426 <__lo0bits+0x2a>
 800c422:	2010      	movs	r0, #16
 800c424:	0c1b      	lsrs	r3, r3, #16
 800c426:	b2d9      	uxtb	r1, r3
 800c428:	b909      	cbnz	r1, 800c42e <__lo0bits+0x32>
 800c42a:	3008      	adds	r0, #8
 800c42c:	0a1b      	lsrs	r3, r3, #8
 800c42e:	0719      	lsls	r1, r3, #28
 800c430:	bf04      	itt	eq
 800c432:	091b      	lsreq	r3, r3, #4
 800c434:	3004      	addeq	r0, #4
 800c436:	0799      	lsls	r1, r3, #30
 800c438:	bf04      	itt	eq
 800c43a:	089b      	lsreq	r3, r3, #2
 800c43c:	3002      	addeq	r0, #2
 800c43e:	07d9      	lsls	r1, r3, #31
 800c440:	d403      	bmi.n	800c44a <__lo0bits+0x4e>
 800c442:	085b      	lsrs	r3, r3, #1
 800c444:	f100 0001 	add.w	r0, r0, #1
 800c448:	d003      	beq.n	800c452 <__lo0bits+0x56>
 800c44a:	6013      	str	r3, [r2, #0]
 800c44c:	4770      	bx	lr
 800c44e:	2000      	movs	r0, #0
 800c450:	4770      	bx	lr
 800c452:	2020      	movs	r0, #32
 800c454:	4770      	bx	lr
	...

0800c458 <__i2b>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	460c      	mov	r4, r1
 800c45c:	2101      	movs	r1, #1
 800c45e:	f7ff ff05 	bl	800c26c <_Balloc>
 800c462:	4602      	mov	r2, r0
 800c464:	b928      	cbnz	r0, 800c472 <__i2b+0x1a>
 800c466:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c46a:	4b04      	ldr	r3, [pc, #16]	; (800c47c <__i2b+0x24>)
 800c46c:	4804      	ldr	r0, [pc, #16]	; (800c480 <__i2b+0x28>)
 800c46e:	f000 fcdb 	bl	800ce28 <__assert_func>
 800c472:	2301      	movs	r3, #1
 800c474:	6144      	str	r4, [r0, #20]
 800c476:	6103      	str	r3, [r0, #16]
 800c478:	bd10      	pop	{r4, pc}
 800c47a:	bf00      	nop
 800c47c:	0800ebe3 	.word	0x0800ebe3
 800c480:	0800ebf4 	.word	0x0800ebf4

0800c484 <__multiply>:
 800c484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c488:	4691      	mov	r9, r2
 800c48a:	690a      	ldr	r2, [r1, #16]
 800c48c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c490:	460c      	mov	r4, r1
 800c492:	429a      	cmp	r2, r3
 800c494:	bfbe      	ittt	lt
 800c496:	460b      	movlt	r3, r1
 800c498:	464c      	movlt	r4, r9
 800c49a:	4699      	movlt	r9, r3
 800c49c:	6927      	ldr	r7, [r4, #16]
 800c49e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4a2:	68a3      	ldr	r3, [r4, #8]
 800c4a4:	6861      	ldr	r1, [r4, #4]
 800c4a6:	eb07 060a 	add.w	r6, r7, sl
 800c4aa:	42b3      	cmp	r3, r6
 800c4ac:	b085      	sub	sp, #20
 800c4ae:	bfb8      	it	lt
 800c4b0:	3101      	addlt	r1, #1
 800c4b2:	f7ff fedb 	bl	800c26c <_Balloc>
 800c4b6:	b930      	cbnz	r0, 800c4c6 <__multiply+0x42>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	f240 115d 	movw	r1, #349	; 0x15d
 800c4be:	4b43      	ldr	r3, [pc, #268]	; (800c5cc <__multiply+0x148>)
 800c4c0:	4843      	ldr	r0, [pc, #268]	; (800c5d0 <__multiply+0x14c>)
 800c4c2:	f000 fcb1 	bl	800ce28 <__assert_func>
 800c4c6:	f100 0514 	add.w	r5, r0, #20
 800c4ca:	462b      	mov	r3, r5
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4d2:	4543      	cmp	r3, r8
 800c4d4:	d321      	bcc.n	800c51a <__multiply+0x96>
 800c4d6:	f104 0314 	add.w	r3, r4, #20
 800c4da:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4de:	f109 0314 	add.w	r3, r9, #20
 800c4e2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4e6:	9202      	str	r2, [sp, #8]
 800c4e8:	1b3a      	subs	r2, r7, r4
 800c4ea:	3a15      	subs	r2, #21
 800c4ec:	f022 0203 	bic.w	r2, r2, #3
 800c4f0:	3204      	adds	r2, #4
 800c4f2:	f104 0115 	add.w	r1, r4, #21
 800c4f6:	428f      	cmp	r7, r1
 800c4f8:	bf38      	it	cc
 800c4fa:	2204      	movcc	r2, #4
 800c4fc:	9201      	str	r2, [sp, #4]
 800c4fe:	9a02      	ldr	r2, [sp, #8]
 800c500:	9303      	str	r3, [sp, #12]
 800c502:	429a      	cmp	r2, r3
 800c504:	d80c      	bhi.n	800c520 <__multiply+0x9c>
 800c506:	2e00      	cmp	r6, #0
 800c508:	dd03      	ble.n	800c512 <__multiply+0x8e>
 800c50a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d059      	beq.n	800c5c6 <__multiply+0x142>
 800c512:	6106      	str	r6, [r0, #16]
 800c514:	b005      	add	sp, #20
 800c516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51a:	f843 2b04 	str.w	r2, [r3], #4
 800c51e:	e7d8      	b.n	800c4d2 <__multiply+0x4e>
 800c520:	f8b3 a000 	ldrh.w	sl, [r3]
 800c524:	f1ba 0f00 	cmp.w	sl, #0
 800c528:	d023      	beq.n	800c572 <__multiply+0xee>
 800c52a:	46a9      	mov	r9, r5
 800c52c:	f04f 0c00 	mov.w	ip, #0
 800c530:	f104 0e14 	add.w	lr, r4, #20
 800c534:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c538:	f8d9 1000 	ldr.w	r1, [r9]
 800c53c:	fa1f fb82 	uxth.w	fp, r2
 800c540:	b289      	uxth	r1, r1
 800c542:	fb0a 110b 	mla	r1, sl, fp, r1
 800c546:	4461      	add	r1, ip
 800c548:	f8d9 c000 	ldr.w	ip, [r9]
 800c54c:	0c12      	lsrs	r2, r2, #16
 800c54e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c552:	fb0a c202 	mla	r2, sl, r2, ip
 800c556:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c55a:	b289      	uxth	r1, r1
 800c55c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c560:	4577      	cmp	r7, lr
 800c562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c566:	f849 1b04 	str.w	r1, [r9], #4
 800c56a:	d8e3      	bhi.n	800c534 <__multiply+0xb0>
 800c56c:	9a01      	ldr	r2, [sp, #4]
 800c56e:	f845 c002 	str.w	ip, [r5, r2]
 800c572:	9a03      	ldr	r2, [sp, #12]
 800c574:	3304      	adds	r3, #4
 800c576:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c57a:	f1b9 0f00 	cmp.w	r9, #0
 800c57e:	d020      	beq.n	800c5c2 <__multiply+0x13e>
 800c580:	46ae      	mov	lr, r5
 800c582:	f04f 0a00 	mov.w	sl, #0
 800c586:	6829      	ldr	r1, [r5, #0]
 800c588:	f104 0c14 	add.w	ip, r4, #20
 800c58c:	f8bc b000 	ldrh.w	fp, [ip]
 800c590:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c594:	b289      	uxth	r1, r1
 800c596:	fb09 220b 	mla	r2, r9, fp, r2
 800c59a:	4492      	add	sl, r2
 800c59c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5a0:	f84e 1b04 	str.w	r1, [lr], #4
 800c5a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5a8:	f8be 1000 	ldrh.w	r1, [lr]
 800c5ac:	0c12      	lsrs	r2, r2, #16
 800c5ae:	fb09 1102 	mla	r1, r9, r2, r1
 800c5b2:	4567      	cmp	r7, ip
 800c5b4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5bc:	d8e6      	bhi.n	800c58c <__multiply+0x108>
 800c5be:	9a01      	ldr	r2, [sp, #4]
 800c5c0:	50a9      	str	r1, [r5, r2]
 800c5c2:	3504      	adds	r5, #4
 800c5c4:	e79b      	b.n	800c4fe <__multiply+0x7a>
 800c5c6:	3e01      	subs	r6, #1
 800c5c8:	e79d      	b.n	800c506 <__multiply+0x82>
 800c5ca:	bf00      	nop
 800c5cc:	0800ebe3 	.word	0x0800ebe3
 800c5d0:	0800ebf4 	.word	0x0800ebf4

0800c5d4 <__pow5mult>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	4615      	mov	r5, r2
 800c5da:	f012 0203 	ands.w	r2, r2, #3
 800c5de:	4606      	mov	r6, r0
 800c5e0:	460f      	mov	r7, r1
 800c5e2:	d007      	beq.n	800c5f4 <__pow5mult+0x20>
 800c5e4:	4c25      	ldr	r4, [pc, #148]	; (800c67c <__pow5mult+0xa8>)
 800c5e6:	3a01      	subs	r2, #1
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5ee:	f7ff fe9f 	bl	800c330 <__multadd>
 800c5f2:	4607      	mov	r7, r0
 800c5f4:	10ad      	asrs	r5, r5, #2
 800c5f6:	d03d      	beq.n	800c674 <__pow5mult+0xa0>
 800c5f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c5fa:	b97c      	cbnz	r4, 800c61c <__pow5mult+0x48>
 800c5fc:	2010      	movs	r0, #16
 800c5fe:	f7ff fe11 	bl	800c224 <malloc>
 800c602:	4602      	mov	r2, r0
 800c604:	6270      	str	r0, [r6, #36]	; 0x24
 800c606:	b928      	cbnz	r0, 800c614 <__pow5mult+0x40>
 800c608:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c60c:	4b1c      	ldr	r3, [pc, #112]	; (800c680 <__pow5mult+0xac>)
 800c60e:	481d      	ldr	r0, [pc, #116]	; (800c684 <__pow5mult+0xb0>)
 800c610:	f000 fc0a 	bl	800ce28 <__assert_func>
 800c614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c618:	6004      	str	r4, [r0, #0]
 800c61a:	60c4      	str	r4, [r0, #12]
 800c61c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c624:	b94c      	cbnz	r4, 800c63a <__pow5mult+0x66>
 800c626:	f240 2171 	movw	r1, #625	; 0x271
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ff14 	bl	800c458 <__i2b>
 800c630:	2300      	movs	r3, #0
 800c632:	4604      	mov	r4, r0
 800c634:	f8c8 0008 	str.w	r0, [r8, #8]
 800c638:	6003      	str	r3, [r0, #0]
 800c63a:	f04f 0900 	mov.w	r9, #0
 800c63e:	07eb      	lsls	r3, r5, #31
 800c640:	d50a      	bpl.n	800c658 <__pow5mult+0x84>
 800c642:	4639      	mov	r1, r7
 800c644:	4622      	mov	r2, r4
 800c646:	4630      	mov	r0, r6
 800c648:	f7ff ff1c 	bl	800c484 <__multiply>
 800c64c:	4680      	mov	r8, r0
 800c64e:	4639      	mov	r1, r7
 800c650:	4630      	mov	r0, r6
 800c652:	f7ff fe4b 	bl	800c2ec <_Bfree>
 800c656:	4647      	mov	r7, r8
 800c658:	106d      	asrs	r5, r5, #1
 800c65a:	d00b      	beq.n	800c674 <__pow5mult+0xa0>
 800c65c:	6820      	ldr	r0, [r4, #0]
 800c65e:	b938      	cbnz	r0, 800c670 <__pow5mult+0x9c>
 800c660:	4622      	mov	r2, r4
 800c662:	4621      	mov	r1, r4
 800c664:	4630      	mov	r0, r6
 800c666:	f7ff ff0d 	bl	800c484 <__multiply>
 800c66a:	6020      	str	r0, [r4, #0]
 800c66c:	f8c0 9000 	str.w	r9, [r0]
 800c670:	4604      	mov	r4, r0
 800c672:	e7e4      	b.n	800c63e <__pow5mult+0x6a>
 800c674:	4638      	mov	r0, r7
 800c676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c67a:	bf00      	nop
 800c67c:	0800ed40 	.word	0x0800ed40
 800c680:	0800eb71 	.word	0x0800eb71
 800c684:	0800ebf4 	.word	0x0800ebf4

0800c688 <__lshift>:
 800c688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c68c:	460c      	mov	r4, r1
 800c68e:	4607      	mov	r7, r0
 800c690:	4691      	mov	r9, r2
 800c692:	6923      	ldr	r3, [r4, #16]
 800c694:	6849      	ldr	r1, [r1, #4]
 800c696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c69a:	68a3      	ldr	r3, [r4, #8]
 800c69c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6a0:	f108 0601 	add.w	r6, r8, #1
 800c6a4:	42b3      	cmp	r3, r6
 800c6a6:	db0b      	blt.n	800c6c0 <__lshift+0x38>
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff fddf 	bl	800c26c <_Balloc>
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b948      	cbnz	r0, 800c6c6 <__lshift+0x3e>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6b8:	4b29      	ldr	r3, [pc, #164]	; (800c760 <__lshift+0xd8>)
 800c6ba:	482a      	ldr	r0, [pc, #168]	; (800c764 <__lshift+0xdc>)
 800c6bc:	f000 fbb4 	bl	800ce28 <__assert_func>
 800c6c0:	3101      	adds	r1, #1
 800c6c2:	005b      	lsls	r3, r3, #1
 800c6c4:	e7ee      	b.n	800c6a4 <__lshift+0x1c>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f100 0114 	add.w	r1, r0, #20
 800c6cc:	f100 0210 	add.w	r2, r0, #16
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	4553      	cmp	r3, sl
 800c6d4:	db37      	blt.n	800c746 <__lshift+0xbe>
 800c6d6:	6920      	ldr	r0, [r4, #16]
 800c6d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6dc:	f104 0314 	add.w	r3, r4, #20
 800c6e0:	f019 091f 	ands.w	r9, r9, #31
 800c6e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c6ec:	d02f      	beq.n	800c74e <__lshift+0xc6>
 800c6ee:	468a      	mov	sl, r1
 800c6f0:	f04f 0c00 	mov.w	ip, #0
 800c6f4:	f1c9 0e20 	rsb	lr, r9, #32
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	fa02 f209 	lsl.w	r2, r2, r9
 800c6fe:	ea42 020c 	orr.w	r2, r2, ip
 800c702:	f84a 2b04 	str.w	r2, [sl], #4
 800c706:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70a:	4298      	cmp	r0, r3
 800c70c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c710:	d8f2      	bhi.n	800c6f8 <__lshift+0x70>
 800c712:	1b03      	subs	r3, r0, r4
 800c714:	3b15      	subs	r3, #21
 800c716:	f023 0303 	bic.w	r3, r3, #3
 800c71a:	3304      	adds	r3, #4
 800c71c:	f104 0215 	add.w	r2, r4, #21
 800c720:	4290      	cmp	r0, r2
 800c722:	bf38      	it	cc
 800c724:	2304      	movcc	r3, #4
 800c726:	f841 c003 	str.w	ip, [r1, r3]
 800c72a:	f1bc 0f00 	cmp.w	ip, #0
 800c72e:	d001      	beq.n	800c734 <__lshift+0xac>
 800c730:	f108 0602 	add.w	r6, r8, #2
 800c734:	3e01      	subs	r6, #1
 800c736:	4638      	mov	r0, r7
 800c738:	4621      	mov	r1, r4
 800c73a:	612e      	str	r6, [r5, #16]
 800c73c:	f7ff fdd6 	bl	800c2ec <_Bfree>
 800c740:	4628      	mov	r0, r5
 800c742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c746:	f842 0f04 	str.w	r0, [r2, #4]!
 800c74a:	3301      	adds	r3, #1
 800c74c:	e7c1      	b.n	800c6d2 <__lshift+0x4a>
 800c74e:	3904      	subs	r1, #4
 800c750:	f853 2b04 	ldr.w	r2, [r3], #4
 800c754:	4298      	cmp	r0, r3
 800c756:	f841 2f04 	str.w	r2, [r1, #4]!
 800c75a:	d8f9      	bhi.n	800c750 <__lshift+0xc8>
 800c75c:	e7ea      	b.n	800c734 <__lshift+0xac>
 800c75e:	bf00      	nop
 800c760:	0800ebe3 	.word	0x0800ebe3
 800c764:	0800ebf4 	.word	0x0800ebf4

0800c768 <__mcmp>:
 800c768:	4603      	mov	r3, r0
 800c76a:	690a      	ldr	r2, [r1, #16]
 800c76c:	6900      	ldr	r0, [r0, #16]
 800c76e:	b530      	push	{r4, r5, lr}
 800c770:	1a80      	subs	r0, r0, r2
 800c772:	d10d      	bne.n	800c790 <__mcmp+0x28>
 800c774:	3314      	adds	r3, #20
 800c776:	3114      	adds	r1, #20
 800c778:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c77c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c784:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c788:	4295      	cmp	r5, r2
 800c78a:	d002      	beq.n	800c792 <__mcmp+0x2a>
 800c78c:	d304      	bcc.n	800c798 <__mcmp+0x30>
 800c78e:	2001      	movs	r0, #1
 800c790:	bd30      	pop	{r4, r5, pc}
 800c792:	42a3      	cmp	r3, r4
 800c794:	d3f4      	bcc.n	800c780 <__mcmp+0x18>
 800c796:	e7fb      	b.n	800c790 <__mcmp+0x28>
 800c798:	f04f 30ff 	mov.w	r0, #4294967295
 800c79c:	e7f8      	b.n	800c790 <__mcmp+0x28>
	...

0800c7a0 <__mdiff>:
 800c7a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	460d      	mov	r5, r1
 800c7a6:	4607      	mov	r7, r0
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	4614      	mov	r4, r2
 800c7ae:	f7ff ffdb 	bl	800c768 <__mcmp>
 800c7b2:	1e06      	subs	r6, r0, #0
 800c7b4:	d111      	bne.n	800c7da <__mdiff+0x3a>
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff fd57 	bl	800c26c <_Balloc>
 800c7be:	4602      	mov	r2, r0
 800c7c0:	b928      	cbnz	r0, 800c7ce <__mdiff+0x2e>
 800c7c2:	f240 2132 	movw	r1, #562	; 0x232
 800c7c6:	4b3a      	ldr	r3, [pc, #232]	; (800c8b0 <__mdiff+0x110>)
 800c7c8:	483a      	ldr	r0, [pc, #232]	; (800c8b4 <__mdiff+0x114>)
 800c7ca:	f000 fb2d 	bl	800ce28 <__assert_func>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7da:	bfa4      	itt	ge
 800c7dc:	4623      	movge	r3, r4
 800c7de:	462c      	movge	r4, r5
 800c7e0:	4638      	mov	r0, r7
 800c7e2:	6861      	ldr	r1, [r4, #4]
 800c7e4:	bfa6      	itte	ge
 800c7e6:	461d      	movge	r5, r3
 800c7e8:	2600      	movge	r6, #0
 800c7ea:	2601      	movlt	r6, #1
 800c7ec:	f7ff fd3e 	bl	800c26c <_Balloc>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	b918      	cbnz	r0, 800c7fc <__mdiff+0x5c>
 800c7f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c7f8:	4b2d      	ldr	r3, [pc, #180]	; (800c8b0 <__mdiff+0x110>)
 800c7fa:	e7e5      	b.n	800c7c8 <__mdiff+0x28>
 800c7fc:	f102 0814 	add.w	r8, r2, #20
 800c800:	46c2      	mov	sl, r8
 800c802:	f04f 0c00 	mov.w	ip, #0
 800c806:	6927      	ldr	r7, [r4, #16]
 800c808:	60c6      	str	r6, [r0, #12]
 800c80a:	692e      	ldr	r6, [r5, #16]
 800c80c:	f104 0014 	add.w	r0, r4, #20
 800c810:	f105 0914 	add.w	r9, r5, #20
 800c814:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c818:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c81c:	3410      	adds	r4, #16
 800c81e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c822:	f859 3b04 	ldr.w	r3, [r9], #4
 800c826:	fa1f f18b 	uxth.w	r1, fp
 800c82a:	448c      	add	ip, r1
 800c82c:	b299      	uxth	r1, r3
 800c82e:	0c1b      	lsrs	r3, r3, #16
 800c830:	ebac 0101 	sub.w	r1, ip, r1
 800c834:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c838:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c83c:	b289      	uxth	r1, r1
 800c83e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c842:	454e      	cmp	r6, r9
 800c844:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c848:	f84a 3b04 	str.w	r3, [sl], #4
 800c84c:	d8e7      	bhi.n	800c81e <__mdiff+0x7e>
 800c84e:	1b73      	subs	r3, r6, r5
 800c850:	3b15      	subs	r3, #21
 800c852:	f023 0303 	bic.w	r3, r3, #3
 800c856:	3515      	adds	r5, #21
 800c858:	3304      	adds	r3, #4
 800c85a:	42ae      	cmp	r6, r5
 800c85c:	bf38      	it	cc
 800c85e:	2304      	movcc	r3, #4
 800c860:	4418      	add	r0, r3
 800c862:	4443      	add	r3, r8
 800c864:	461e      	mov	r6, r3
 800c866:	4605      	mov	r5, r0
 800c868:	4575      	cmp	r5, lr
 800c86a:	d30e      	bcc.n	800c88a <__mdiff+0xea>
 800c86c:	f10e 0103 	add.w	r1, lr, #3
 800c870:	1a09      	subs	r1, r1, r0
 800c872:	f021 0103 	bic.w	r1, r1, #3
 800c876:	3803      	subs	r0, #3
 800c878:	4586      	cmp	lr, r0
 800c87a:	bf38      	it	cc
 800c87c:	2100      	movcc	r1, #0
 800c87e:	4419      	add	r1, r3
 800c880:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c884:	b18b      	cbz	r3, 800c8aa <__mdiff+0x10a>
 800c886:	6117      	str	r7, [r2, #16]
 800c888:	e7a4      	b.n	800c7d4 <__mdiff+0x34>
 800c88a:	f855 8b04 	ldr.w	r8, [r5], #4
 800c88e:	fa1f f188 	uxth.w	r1, r8
 800c892:	4461      	add	r1, ip
 800c894:	140c      	asrs	r4, r1, #16
 800c896:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c89a:	b289      	uxth	r1, r1
 800c89c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c8a0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c8a4:	f846 1b04 	str.w	r1, [r6], #4
 800c8a8:	e7de      	b.n	800c868 <__mdiff+0xc8>
 800c8aa:	3f01      	subs	r7, #1
 800c8ac:	e7e8      	b.n	800c880 <__mdiff+0xe0>
 800c8ae:	bf00      	nop
 800c8b0:	0800ebe3 	.word	0x0800ebe3
 800c8b4:	0800ebf4 	.word	0x0800ebf4

0800c8b8 <__d2b>:
 800c8b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c8bc:	2101      	movs	r1, #1
 800c8be:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c8c2:	4690      	mov	r8, r2
 800c8c4:	461d      	mov	r5, r3
 800c8c6:	f7ff fcd1 	bl	800c26c <_Balloc>
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	b930      	cbnz	r0, 800c8dc <__d2b+0x24>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	f240 310a 	movw	r1, #778	; 0x30a
 800c8d4:	4b24      	ldr	r3, [pc, #144]	; (800c968 <__d2b+0xb0>)
 800c8d6:	4825      	ldr	r0, [pc, #148]	; (800c96c <__d2b+0xb4>)
 800c8d8:	f000 faa6 	bl	800ce28 <__assert_func>
 800c8dc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c8e0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c8e4:	bb2d      	cbnz	r5, 800c932 <__d2b+0x7a>
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	f1b8 0300 	subs.w	r3, r8, #0
 800c8ec:	d026      	beq.n	800c93c <__d2b+0x84>
 800c8ee:	4668      	mov	r0, sp
 800c8f0:	9300      	str	r3, [sp, #0]
 800c8f2:	f7ff fd83 	bl	800c3fc <__lo0bits>
 800c8f6:	9900      	ldr	r1, [sp, #0]
 800c8f8:	b1f0      	cbz	r0, 800c938 <__d2b+0x80>
 800c8fa:	9a01      	ldr	r2, [sp, #4]
 800c8fc:	f1c0 0320 	rsb	r3, r0, #32
 800c900:	fa02 f303 	lsl.w	r3, r2, r3
 800c904:	430b      	orrs	r3, r1
 800c906:	40c2      	lsrs	r2, r0
 800c908:	6163      	str	r3, [r4, #20]
 800c90a:	9201      	str	r2, [sp, #4]
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bf14      	ite	ne
 800c912:	2102      	movne	r1, #2
 800c914:	2101      	moveq	r1, #1
 800c916:	61a3      	str	r3, [r4, #24]
 800c918:	6121      	str	r1, [r4, #16]
 800c91a:	b1c5      	cbz	r5, 800c94e <__d2b+0x96>
 800c91c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c920:	4405      	add	r5, r0
 800c922:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c926:	603d      	str	r5, [r7, #0]
 800c928:	6030      	str	r0, [r6, #0]
 800c92a:	4620      	mov	r0, r4
 800c92c:	b002      	add	sp, #8
 800c92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c936:	e7d6      	b.n	800c8e6 <__d2b+0x2e>
 800c938:	6161      	str	r1, [r4, #20]
 800c93a:	e7e7      	b.n	800c90c <__d2b+0x54>
 800c93c:	a801      	add	r0, sp, #4
 800c93e:	f7ff fd5d 	bl	800c3fc <__lo0bits>
 800c942:	2101      	movs	r1, #1
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	6121      	str	r1, [r4, #16]
 800c948:	6163      	str	r3, [r4, #20]
 800c94a:	3020      	adds	r0, #32
 800c94c:	e7e5      	b.n	800c91a <__d2b+0x62>
 800c94e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c952:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c956:	6038      	str	r0, [r7, #0]
 800c958:	6918      	ldr	r0, [r3, #16]
 800c95a:	f7ff fd2f 	bl	800c3bc <__hi0bits>
 800c95e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c962:	6031      	str	r1, [r6, #0]
 800c964:	e7e1      	b.n	800c92a <__d2b+0x72>
 800c966:	bf00      	nop
 800c968:	0800ebe3 	.word	0x0800ebe3
 800c96c:	0800ebf4 	.word	0x0800ebf4

0800c970 <_calloc_r>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	fba1 5402 	umull	r5, r4, r1, r2
 800c976:	b934      	cbnz	r4, 800c986 <_calloc_r+0x16>
 800c978:	4629      	mov	r1, r5
 800c97a:	f000 f875 	bl	800ca68 <_malloc_r>
 800c97e:	4606      	mov	r6, r0
 800c980:	b928      	cbnz	r0, 800c98e <_calloc_r+0x1e>
 800c982:	4630      	mov	r0, r6
 800c984:	bd70      	pop	{r4, r5, r6, pc}
 800c986:	220c      	movs	r2, #12
 800c988:	2600      	movs	r6, #0
 800c98a:	6002      	str	r2, [r0, #0]
 800c98c:	e7f9      	b.n	800c982 <_calloc_r+0x12>
 800c98e:	462a      	mov	r2, r5
 800c990:	4621      	mov	r1, r4
 800c992:	f7fe f909 	bl	800aba8 <memset>
 800c996:	e7f4      	b.n	800c982 <_calloc_r+0x12>

0800c998 <_free_r>:
 800c998:	b538      	push	{r3, r4, r5, lr}
 800c99a:	4605      	mov	r5, r0
 800c99c:	2900      	cmp	r1, #0
 800c99e:	d040      	beq.n	800ca22 <_free_r+0x8a>
 800c9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a4:	1f0c      	subs	r4, r1, #4
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	bfb8      	it	lt
 800c9aa:	18e4      	addlt	r4, r4, r3
 800c9ac:	f000 fa98 	bl	800cee0 <__malloc_lock>
 800c9b0:	4a1c      	ldr	r2, [pc, #112]	; (800ca24 <_free_r+0x8c>)
 800c9b2:	6813      	ldr	r3, [r2, #0]
 800c9b4:	b933      	cbnz	r3, 800c9c4 <_free_r+0x2c>
 800c9b6:	6063      	str	r3, [r4, #4]
 800c9b8:	6014      	str	r4, [r2, #0]
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9c0:	f000 ba94 	b.w	800ceec <__malloc_unlock>
 800c9c4:	42a3      	cmp	r3, r4
 800c9c6:	d908      	bls.n	800c9da <_free_r+0x42>
 800c9c8:	6820      	ldr	r0, [r4, #0]
 800c9ca:	1821      	adds	r1, r4, r0
 800c9cc:	428b      	cmp	r3, r1
 800c9ce:	bf01      	itttt	eq
 800c9d0:	6819      	ldreq	r1, [r3, #0]
 800c9d2:	685b      	ldreq	r3, [r3, #4]
 800c9d4:	1809      	addeq	r1, r1, r0
 800c9d6:	6021      	streq	r1, [r4, #0]
 800c9d8:	e7ed      	b.n	800c9b6 <_free_r+0x1e>
 800c9da:	461a      	mov	r2, r3
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	b10b      	cbz	r3, 800c9e4 <_free_r+0x4c>
 800c9e0:	42a3      	cmp	r3, r4
 800c9e2:	d9fa      	bls.n	800c9da <_free_r+0x42>
 800c9e4:	6811      	ldr	r1, [r2, #0]
 800c9e6:	1850      	adds	r0, r2, r1
 800c9e8:	42a0      	cmp	r0, r4
 800c9ea:	d10b      	bne.n	800ca04 <_free_r+0x6c>
 800c9ec:	6820      	ldr	r0, [r4, #0]
 800c9ee:	4401      	add	r1, r0
 800c9f0:	1850      	adds	r0, r2, r1
 800c9f2:	4283      	cmp	r3, r0
 800c9f4:	6011      	str	r1, [r2, #0]
 800c9f6:	d1e0      	bne.n	800c9ba <_free_r+0x22>
 800c9f8:	6818      	ldr	r0, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	4401      	add	r1, r0
 800c9fe:	6011      	str	r1, [r2, #0]
 800ca00:	6053      	str	r3, [r2, #4]
 800ca02:	e7da      	b.n	800c9ba <_free_r+0x22>
 800ca04:	d902      	bls.n	800ca0c <_free_r+0x74>
 800ca06:	230c      	movs	r3, #12
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	e7d6      	b.n	800c9ba <_free_r+0x22>
 800ca0c:	6820      	ldr	r0, [r4, #0]
 800ca0e:	1821      	adds	r1, r4, r0
 800ca10:	428b      	cmp	r3, r1
 800ca12:	bf01      	itttt	eq
 800ca14:	6819      	ldreq	r1, [r3, #0]
 800ca16:	685b      	ldreq	r3, [r3, #4]
 800ca18:	1809      	addeq	r1, r1, r0
 800ca1a:	6021      	streq	r1, [r4, #0]
 800ca1c:	6063      	str	r3, [r4, #4]
 800ca1e:	6054      	str	r4, [r2, #4]
 800ca20:	e7cb      	b.n	800c9ba <_free_r+0x22>
 800ca22:	bd38      	pop	{r3, r4, r5, pc}
 800ca24:	200010f4 	.word	0x200010f4

0800ca28 <sbrk_aligned>:
 800ca28:	b570      	push	{r4, r5, r6, lr}
 800ca2a:	4e0e      	ldr	r6, [pc, #56]	; (800ca64 <sbrk_aligned+0x3c>)
 800ca2c:	460c      	mov	r4, r1
 800ca2e:	6831      	ldr	r1, [r6, #0]
 800ca30:	4605      	mov	r5, r0
 800ca32:	b911      	cbnz	r1, 800ca3a <sbrk_aligned+0x12>
 800ca34:	f000 f9e8 	bl	800ce08 <_sbrk_r>
 800ca38:	6030      	str	r0, [r6, #0]
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f000 f9e3 	bl	800ce08 <_sbrk_r>
 800ca42:	1c43      	adds	r3, r0, #1
 800ca44:	d00a      	beq.n	800ca5c <sbrk_aligned+0x34>
 800ca46:	1cc4      	adds	r4, r0, #3
 800ca48:	f024 0403 	bic.w	r4, r4, #3
 800ca4c:	42a0      	cmp	r0, r4
 800ca4e:	d007      	beq.n	800ca60 <sbrk_aligned+0x38>
 800ca50:	1a21      	subs	r1, r4, r0
 800ca52:	4628      	mov	r0, r5
 800ca54:	f000 f9d8 	bl	800ce08 <_sbrk_r>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d101      	bne.n	800ca60 <sbrk_aligned+0x38>
 800ca5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ca60:	4620      	mov	r0, r4
 800ca62:	bd70      	pop	{r4, r5, r6, pc}
 800ca64:	200010f8 	.word	0x200010f8

0800ca68 <_malloc_r>:
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	1ccd      	adds	r5, r1, #3
 800ca6e:	f025 0503 	bic.w	r5, r5, #3
 800ca72:	3508      	adds	r5, #8
 800ca74:	2d0c      	cmp	r5, #12
 800ca76:	bf38      	it	cc
 800ca78:	250c      	movcc	r5, #12
 800ca7a:	2d00      	cmp	r5, #0
 800ca7c:	4607      	mov	r7, r0
 800ca7e:	db01      	blt.n	800ca84 <_malloc_r+0x1c>
 800ca80:	42a9      	cmp	r1, r5
 800ca82:	d905      	bls.n	800ca90 <_malloc_r+0x28>
 800ca84:	230c      	movs	r3, #12
 800ca86:	2600      	movs	r6, #0
 800ca88:	603b      	str	r3, [r7, #0]
 800ca8a:	4630      	mov	r0, r6
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca90:	4e2e      	ldr	r6, [pc, #184]	; (800cb4c <_malloc_r+0xe4>)
 800ca92:	f000 fa25 	bl	800cee0 <__malloc_lock>
 800ca96:	6833      	ldr	r3, [r6, #0]
 800ca98:	461c      	mov	r4, r3
 800ca9a:	bb34      	cbnz	r4, 800caea <_malloc_r+0x82>
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4638      	mov	r0, r7
 800caa0:	f7ff ffc2 	bl	800ca28 <sbrk_aligned>
 800caa4:	1c43      	adds	r3, r0, #1
 800caa6:	4604      	mov	r4, r0
 800caa8:	d14d      	bne.n	800cb46 <_malloc_r+0xde>
 800caaa:	6834      	ldr	r4, [r6, #0]
 800caac:	4626      	mov	r6, r4
 800caae:	2e00      	cmp	r6, #0
 800cab0:	d140      	bne.n	800cb34 <_malloc_r+0xcc>
 800cab2:	6823      	ldr	r3, [r4, #0]
 800cab4:	4631      	mov	r1, r6
 800cab6:	4638      	mov	r0, r7
 800cab8:	eb04 0803 	add.w	r8, r4, r3
 800cabc:	f000 f9a4 	bl	800ce08 <_sbrk_r>
 800cac0:	4580      	cmp	r8, r0
 800cac2:	d13a      	bne.n	800cb3a <_malloc_r+0xd2>
 800cac4:	6821      	ldr	r1, [r4, #0]
 800cac6:	3503      	adds	r5, #3
 800cac8:	1a6d      	subs	r5, r5, r1
 800caca:	f025 0503 	bic.w	r5, r5, #3
 800cace:	3508      	adds	r5, #8
 800cad0:	2d0c      	cmp	r5, #12
 800cad2:	bf38      	it	cc
 800cad4:	250c      	movcc	r5, #12
 800cad6:	4638      	mov	r0, r7
 800cad8:	4629      	mov	r1, r5
 800cada:	f7ff ffa5 	bl	800ca28 <sbrk_aligned>
 800cade:	3001      	adds	r0, #1
 800cae0:	d02b      	beq.n	800cb3a <_malloc_r+0xd2>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	442b      	add	r3, r5
 800cae6:	6023      	str	r3, [r4, #0]
 800cae8:	e00e      	b.n	800cb08 <_malloc_r+0xa0>
 800caea:	6822      	ldr	r2, [r4, #0]
 800caec:	1b52      	subs	r2, r2, r5
 800caee:	d41e      	bmi.n	800cb2e <_malloc_r+0xc6>
 800caf0:	2a0b      	cmp	r2, #11
 800caf2:	d916      	bls.n	800cb22 <_malloc_r+0xba>
 800caf4:	1961      	adds	r1, r4, r5
 800caf6:	42a3      	cmp	r3, r4
 800caf8:	6025      	str	r5, [r4, #0]
 800cafa:	bf18      	it	ne
 800cafc:	6059      	strne	r1, [r3, #4]
 800cafe:	6863      	ldr	r3, [r4, #4]
 800cb00:	bf08      	it	eq
 800cb02:	6031      	streq	r1, [r6, #0]
 800cb04:	5162      	str	r2, [r4, r5]
 800cb06:	604b      	str	r3, [r1, #4]
 800cb08:	4638      	mov	r0, r7
 800cb0a:	f104 060b 	add.w	r6, r4, #11
 800cb0e:	f000 f9ed 	bl	800ceec <__malloc_unlock>
 800cb12:	f026 0607 	bic.w	r6, r6, #7
 800cb16:	1d23      	adds	r3, r4, #4
 800cb18:	1af2      	subs	r2, r6, r3
 800cb1a:	d0b6      	beq.n	800ca8a <_malloc_r+0x22>
 800cb1c:	1b9b      	subs	r3, r3, r6
 800cb1e:	50a3      	str	r3, [r4, r2]
 800cb20:	e7b3      	b.n	800ca8a <_malloc_r+0x22>
 800cb22:	6862      	ldr	r2, [r4, #4]
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	bf0c      	ite	eq
 800cb28:	6032      	streq	r2, [r6, #0]
 800cb2a:	605a      	strne	r2, [r3, #4]
 800cb2c:	e7ec      	b.n	800cb08 <_malloc_r+0xa0>
 800cb2e:	4623      	mov	r3, r4
 800cb30:	6864      	ldr	r4, [r4, #4]
 800cb32:	e7b2      	b.n	800ca9a <_malloc_r+0x32>
 800cb34:	4634      	mov	r4, r6
 800cb36:	6876      	ldr	r6, [r6, #4]
 800cb38:	e7b9      	b.n	800caae <_malloc_r+0x46>
 800cb3a:	230c      	movs	r3, #12
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	f000 f9d4 	bl	800ceec <__malloc_unlock>
 800cb44:	e7a1      	b.n	800ca8a <_malloc_r+0x22>
 800cb46:	6025      	str	r5, [r4, #0]
 800cb48:	e7de      	b.n	800cb08 <_malloc_r+0xa0>
 800cb4a:	bf00      	nop
 800cb4c:	200010f4 	.word	0x200010f4

0800cb50 <__ssputs_r>:
 800cb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb54:	688e      	ldr	r6, [r1, #8]
 800cb56:	4682      	mov	sl, r0
 800cb58:	429e      	cmp	r6, r3
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	4690      	mov	r8, r2
 800cb5e:	461f      	mov	r7, r3
 800cb60:	d838      	bhi.n	800cbd4 <__ssputs_r+0x84>
 800cb62:	898a      	ldrh	r2, [r1, #12]
 800cb64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb68:	d032      	beq.n	800cbd0 <__ssputs_r+0x80>
 800cb6a:	6825      	ldr	r5, [r4, #0]
 800cb6c:	6909      	ldr	r1, [r1, #16]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	eba5 0901 	sub.w	r9, r5, r1
 800cb74:	6965      	ldr	r5, [r4, #20]
 800cb76:	444b      	add	r3, r9
 800cb78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb80:	106d      	asrs	r5, r5, #1
 800cb82:	429d      	cmp	r5, r3
 800cb84:	bf38      	it	cc
 800cb86:	461d      	movcc	r5, r3
 800cb88:	0553      	lsls	r3, r2, #21
 800cb8a:	d531      	bpl.n	800cbf0 <__ssputs_r+0xa0>
 800cb8c:	4629      	mov	r1, r5
 800cb8e:	f7ff ff6b 	bl	800ca68 <_malloc_r>
 800cb92:	4606      	mov	r6, r0
 800cb94:	b950      	cbnz	r0, 800cbac <__ssputs_r+0x5c>
 800cb96:	230c      	movs	r3, #12
 800cb98:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9c:	f8ca 3000 	str.w	r3, [sl]
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbac:	464a      	mov	r2, r9
 800cbae:	6921      	ldr	r1, [r4, #16]
 800cbb0:	f7ff fb4e 	bl	800c250 <memcpy>
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbbe:	81a3      	strh	r3, [r4, #12]
 800cbc0:	6126      	str	r6, [r4, #16]
 800cbc2:	444e      	add	r6, r9
 800cbc4:	6026      	str	r6, [r4, #0]
 800cbc6:	463e      	mov	r6, r7
 800cbc8:	6165      	str	r5, [r4, #20]
 800cbca:	eba5 0509 	sub.w	r5, r5, r9
 800cbce:	60a5      	str	r5, [r4, #8]
 800cbd0:	42be      	cmp	r6, r7
 800cbd2:	d900      	bls.n	800cbd6 <__ssputs_r+0x86>
 800cbd4:	463e      	mov	r6, r7
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	4641      	mov	r1, r8
 800cbda:	6820      	ldr	r0, [r4, #0]
 800cbdc:	f000 f966 	bl	800ceac <memmove>
 800cbe0:	68a3      	ldr	r3, [r4, #8]
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	1b9b      	subs	r3, r3, r6
 800cbe6:	60a3      	str	r3, [r4, #8]
 800cbe8:	6823      	ldr	r3, [r4, #0]
 800cbea:	4433      	add	r3, r6
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	e7db      	b.n	800cba8 <__ssputs_r+0x58>
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	f000 f981 	bl	800cef8 <_realloc_r>
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d1e1      	bne.n	800cbc0 <__ssputs_r+0x70>
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	6921      	ldr	r1, [r4, #16]
 800cc00:	f7ff feca 	bl	800c998 <_free_r>
 800cc04:	e7c7      	b.n	800cb96 <__ssputs_r+0x46>
	...

0800cc08 <_svfiprintf_r>:
 800cc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0c:	4698      	mov	r8, r3
 800cc0e:	898b      	ldrh	r3, [r1, #12]
 800cc10:	4607      	mov	r7, r0
 800cc12:	061b      	lsls	r3, r3, #24
 800cc14:	460d      	mov	r5, r1
 800cc16:	4614      	mov	r4, r2
 800cc18:	b09d      	sub	sp, #116	; 0x74
 800cc1a:	d50e      	bpl.n	800cc3a <_svfiprintf_r+0x32>
 800cc1c:	690b      	ldr	r3, [r1, #16]
 800cc1e:	b963      	cbnz	r3, 800cc3a <_svfiprintf_r+0x32>
 800cc20:	2140      	movs	r1, #64	; 0x40
 800cc22:	f7ff ff21 	bl	800ca68 <_malloc_r>
 800cc26:	6028      	str	r0, [r5, #0]
 800cc28:	6128      	str	r0, [r5, #16]
 800cc2a:	b920      	cbnz	r0, 800cc36 <_svfiprintf_r+0x2e>
 800cc2c:	230c      	movs	r3, #12
 800cc2e:	603b      	str	r3, [r7, #0]
 800cc30:	f04f 30ff 	mov.w	r0, #4294967295
 800cc34:	e0d1      	b.n	800cdda <_svfiprintf_r+0x1d2>
 800cc36:	2340      	movs	r3, #64	; 0x40
 800cc38:	616b      	str	r3, [r5, #20]
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc3e:	2320      	movs	r3, #32
 800cc40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc44:	2330      	movs	r3, #48	; 0x30
 800cc46:	f04f 0901 	mov.w	r9, #1
 800cc4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cdf4 <_svfiprintf_r+0x1ec>
 800cc52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc56:	4623      	mov	r3, r4
 800cc58:	469a      	mov	sl, r3
 800cc5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc5e:	b10a      	cbz	r2, 800cc64 <_svfiprintf_r+0x5c>
 800cc60:	2a25      	cmp	r2, #37	; 0x25
 800cc62:	d1f9      	bne.n	800cc58 <_svfiprintf_r+0x50>
 800cc64:	ebba 0b04 	subs.w	fp, sl, r4
 800cc68:	d00b      	beq.n	800cc82 <_svfiprintf_r+0x7a>
 800cc6a:	465b      	mov	r3, fp
 800cc6c:	4622      	mov	r2, r4
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7ff ff6d 	bl	800cb50 <__ssputs_r>
 800cc76:	3001      	adds	r0, #1
 800cc78:	f000 80aa 	beq.w	800cdd0 <_svfiprintf_r+0x1c8>
 800cc7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc7e:	445a      	add	r2, fp
 800cc80:	9209      	str	r2, [sp, #36]	; 0x24
 800cc82:	f89a 3000 	ldrb.w	r3, [sl]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 80a2 	beq.w	800cdd0 <_svfiprintf_r+0x1c8>
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc96:	f10a 0a01 	add.w	sl, sl, #1
 800cc9a:	9304      	str	r3, [sp, #16]
 800cc9c:	9307      	str	r3, [sp, #28]
 800cc9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cca2:	931a      	str	r3, [sp, #104]	; 0x68
 800cca4:	4654      	mov	r4, sl
 800cca6:	2205      	movs	r2, #5
 800cca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccac:	4851      	ldr	r0, [pc, #324]	; (800cdf4 <_svfiprintf_r+0x1ec>)
 800ccae:	f7ff fac1 	bl	800c234 <memchr>
 800ccb2:	9a04      	ldr	r2, [sp, #16]
 800ccb4:	b9d8      	cbnz	r0, 800ccee <_svfiprintf_r+0xe6>
 800ccb6:	06d0      	lsls	r0, r2, #27
 800ccb8:	bf44      	itt	mi
 800ccba:	2320      	movmi	r3, #32
 800ccbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccc0:	0711      	lsls	r1, r2, #28
 800ccc2:	bf44      	itt	mi
 800ccc4:	232b      	movmi	r3, #43	; 0x2b
 800ccc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccca:	f89a 3000 	ldrb.w	r3, [sl]
 800ccce:	2b2a      	cmp	r3, #42	; 0x2a
 800ccd0:	d015      	beq.n	800ccfe <_svfiprintf_r+0xf6>
 800ccd2:	4654      	mov	r4, sl
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	f04f 0c0a 	mov.w	ip, #10
 800ccda:	9a07      	ldr	r2, [sp, #28]
 800ccdc:	4621      	mov	r1, r4
 800ccde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cce2:	3b30      	subs	r3, #48	; 0x30
 800cce4:	2b09      	cmp	r3, #9
 800cce6:	d94e      	bls.n	800cd86 <_svfiprintf_r+0x17e>
 800cce8:	b1b0      	cbz	r0, 800cd18 <_svfiprintf_r+0x110>
 800ccea:	9207      	str	r2, [sp, #28]
 800ccec:	e014      	b.n	800cd18 <_svfiprintf_r+0x110>
 800ccee:	eba0 0308 	sub.w	r3, r0, r8
 800ccf2:	fa09 f303 	lsl.w	r3, r9, r3
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	46a2      	mov	sl, r4
 800ccfa:	9304      	str	r3, [sp, #16]
 800ccfc:	e7d2      	b.n	800cca4 <_svfiprintf_r+0x9c>
 800ccfe:	9b03      	ldr	r3, [sp, #12]
 800cd00:	1d19      	adds	r1, r3, #4
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	9103      	str	r1, [sp, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	bfbb      	ittet	lt
 800cd0a:	425b      	neglt	r3, r3
 800cd0c:	f042 0202 	orrlt.w	r2, r2, #2
 800cd10:	9307      	strge	r3, [sp, #28]
 800cd12:	9307      	strlt	r3, [sp, #28]
 800cd14:	bfb8      	it	lt
 800cd16:	9204      	strlt	r2, [sp, #16]
 800cd18:	7823      	ldrb	r3, [r4, #0]
 800cd1a:	2b2e      	cmp	r3, #46	; 0x2e
 800cd1c:	d10c      	bne.n	800cd38 <_svfiprintf_r+0x130>
 800cd1e:	7863      	ldrb	r3, [r4, #1]
 800cd20:	2b2a      	cmp	r3, #42	; 0x2a
 800cd22:	d135      	bne.n	800cd90 <_svfiprintf_r+0x188>
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	3402      	adds	r4, #2
 800cd28:	1d1a      	adds	r2, r3, #4
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	9203      	str	r2, [sp, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	bfb8      	it	lt
 800cd32:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd36:	9305      	str	r3, [sp, #20]
 800cd38:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800cdf8 <_svfiprintf_r+0x1f0>
 800cd3c:	2203      	movs	r2, #3
 800cd3e:	4650      	mov	r0, sl
 800cd40:	7821      	ldrb	r1, [r4, #0]
 800cd42:	f7ff fa77 	bl	800c234 <memchr>
 800cd46:	b140      	cbz	r0, 800cd5a <_svfiprintf_r+0x152>
 800cd48:	2340      	movs	r3, #64	; 0x40
 800cd4a:	eba0 000a 	sub.w	r0, r0, sl
 800cd4e:	fa03 f000 	lsl.w	r0, r3, r0
 800cd52:	9b04      	ldr	r3, [sp, #16]
 800cd54:	3401      	adds	r4, #1
 800cd56:	4303      	orrs	r3, r0
 800cd58:	9304      	str	r3, [sp, #16]
 800cd5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5e:	2206      	movs	r2, #6
 800cd60:	4826      	ldr	r0, [pc, #152]	; (800cdfc <_svfiprintf_r+0x1f4>)
 800cd62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd66:	f7ff fa65 	bl	800c234 <memchr>
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	d038      	beq.n	800cde0 <_svfiprintf_r+0x1d8>
 800cd6e:	4b24      	ldr	r3, [pc, #144]	; (800ce00 <_svfiprintf_r+0x1f8>)
 800cd70:	bb1b      	cbnz	r3, 800cdba <_svfiprintf_r+0x1b2>
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	3307      	adds	r3, #7
 800cd76:	f023 0307 	bic.w	r3, r3, #7
 800cd7a:	3308      	adds	r3, #8
 800cd7c:	9303      	str	r3, [sp, #12]
 800cd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd80:	4433      	add	r3, r6
 800cd82:	9309      	str	r3, [sp, #36]	; 0x24
 800cd84:	e767      	b.n	800cc56 <_svfiprintf_r+0x4e>
 800cd86:	460c      	mov	r4, r1
 800cd88:	2001      	movs	r0, #1
 800cd8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd8e:	e7a5      	b.n	800ccdc <_svfiprintf_r+0xd4>
 800cd90:	2300      	movs	r3, #0
 800cd92:	f04f 0c0a 	mov.w	ip, #10
 800cd96:	4619      	mov	r1, r3
 800cd98:	3401      	adds	r4, #1
 800cd9a:	9305      	str	r3, [sp, #20]
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cda2:	3a30      	subs	r2, #48	; 0x30
 800cda4:	2a09      	cmp	r2, #9
 800cda6:	d903      	bls.n	800cdb0 <_svfiprintf_r+0x1a8>
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d0c5      	beq.n	800cd38 <_svfiprintf_r+0x130>
 800cdac:	9105      	str	r1, [sp, #20]
 800cdae:	e7c3      	b.n	800cd38 <_svfiprintf_r+0x130>
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdb8:	e7f0      	b.n	800cd9c <_svfiprintf_r+0x194>
 800cdba:	ab03      	add	r3, sp, #12
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	462a      	mov	r2, r5
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	4b10      	ldr	r3, [pc, #64]	; (800ce04 <_svfiprintf_r+0x1fc>)
 800cdc4:	a904      	add	r1, sp, #16
 800cdc6:	f7fd ff95 	bl	800acf4 <_printf_float>
 800cdca:	1c42      	adds	r2, r0, #1
 800cdcc:	4606      	mov	r6, r0
 800cdce:	d1d6      	bne.n	800cd7e <_svfiprintf_r+0x176>
 800cdd0:	89ab      	ldrh	r3, [r5, #12]
 800cdd2:	065b      	lsls	r3, r3, #25
 800cdd4:	f53f af2c 	bmi.w	800cc30 <_svfiprintf_r+0x28>
 800cdd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdda:	b01d      	add	sp, #116	; 0x74
 800cddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde0:	ab03      	add	r3, sp, #12
 800cde2:	9300      	str	r3, [sp, #0]
 800cde4:	462a      	mov	r2, r5
 800cde6:	4638      	mov	r0, r7
 800cde8:	4b06      	ldr	r3, [pc, #24]	; (800ce04 <_svfiprintf_r+0x1fc>)
 800cdea:	a904      	add	r1, sp, #16
 800cdec:	f7fe fa1e 	bl	800b22c <_printf_i>
 800cdf0:	e7eb      	b.n	800cdca <_svfiprintf_r+0x1c2>
 800cdf2:	bf00      	nop
 800cdf4:	0800ed4c 	.word	0x0800ed4c
 800cdf8:	0800ed52 	.word	0x0800ed52
 800cdfc:	0800ed56 	.word	0x0800ed56
 800ce00:	0800acf5 	.word	0x0800acf5
 800ce04:	0800cb51 	.word	0x0800cb51

0800ce08 <_sbrk_r>:
 800ce08:	b538      	push	{r3, r4, r5, lr}
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	4d05      	ldr	r5, [pc, #20]	; (800ce24 <_sbrk_r+0x1c>)
 800ce0e:	4604      	mov	r4, r0
 800ce10:	4608      	mov	r0, r1
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	f7f4 fd78 	bl	8001908 <_sbrk>
 800ce18:	1c43      	adds	r3, r0, #1
 800ce1a:	d102      	bne.n	800ce22 <_sbrk_r+0x1a>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	b103      	cbz	r3, 800ce22 <_sbrk_r+0x1a>
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	200010fc 	.word	0x200010fc

0800ce28 <__assert_func>:
 800ce28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce2a:	4614      	mov	r4, r2
 800ce2c:	461a      	mov	r2, r3
 800ce2e:	4b09      	ldr	r3, [pc, #36]	; (800ce54 <__assert_func+0x2c>)
 800ce30:	4605      	mov	r5, r0
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68d8      	ldr	r0, [r3, #12]
 800ce36:	b14c      	cbz	r4, 800ce4c <__assert_func+0x24>
 800ce38:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <__assert_func+0x30>)
 800ce3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce3e:	9100      	str	r1, [sp, #0]
 800ce40:	462b      	mov	r3, r5
 800ce42:	4906      	ldr	r1, [pc, #24]	; (800ce5c <__assert_func+0x34>)
 800ce44:	f000 f80e 	bl	800ce64 <fiprintf>
 800ce48:	f000 faaa 	bl	800d3a0 <abort>
 800ce4c:	4b04      	ldr	r3, [pc, #16]	; (800ce60 <__assert_func+0x38>)
 800ce4e:	461c      	mov	r4, r3
 800ce50:	e7f3      	b.n	800ce3a <__assert_func+0x12>
 800ce52:	bf00      	nop
 800ce54:	200001d0 	.word	0x200001d0
 800ce58:	0800ed5d 	.word	0x0800ed5d
 800ce5c:	0800ed6a 	.word	0x0800ed6a
 800ce60:	0800ed98 	.word	0x0800ed98

0800ce64 <fiprintf>:
 800ce64:	b40e      	push	{r1, r2, r3}
 800ce66:	b503      	push	{r0, r1, lr}
 800ce68:	4601      	mov	r1, r0
 800ce6a:	ab03      	add	r3, sp, #12
 800ce6c:	4805      	ldr	r0, [pc, #20]	; (800ce84 <fiprintf+0x20>)
 800ce6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce72:	6800      	ldr	r0, [r0, #0]
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	f000 f895 	bl	800cfa4 <_vfiprintf_r>
 800ce7a:	b002      	add	sp, #8
 800ce7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce80:	b003      	add	sp, #12
 800ce82:	4770      	bx	lr
 800ce84:	200001d0 	.word	0x200001d0

0800ce88 <__ascii_mbtowc>:
 800ce88:	b082      	sub	sp, #8
 800ce8a:	b901      	cbnz	r1, 800ce8e <__ascii_mbtowc+0x6>
 800ce8c:	a901      	add	r1, sp, #4
 800ce8e:	b142      	cbz	r2, 800cea2 <__ascii_mbtowc+0x1a>
 800ce90:	b14b      	cbz	r3, 800cea6 <__ascii_mbtowc+0x1e>
 800ce92:	7813      	ldrb	r3, [r2, #0]
 800ce94:	600b      	str	r3, [r1, #0]
 800ce96:	7812      	ldrb	r2, [r2, #0]
 800ce98:	1e10      	subs	r0, r2, #0
 800ce9a:	bf18      	it	ne
 800ce9c:	2001      	movne	r0, #1
 800ce9e:	b002      	add	sp, #8
 800cea0:	4770      	bx	lr
 800cea2:	4610      	mov	r0, r2
 800cea4:	e7fb      	b.n	800ce9e <__ascii_mbtowc+0x16>
 800cea6:	f06f 0001 	mvn.w	r0, #1
 800ceaa:	e7f8      	b.n	800ce9e <__ascii_mbtowc+0x16>

0800ceac <memmove>:
 800ceac:	4288      	cmp	r0, r1
 800ceae:	b510      	push	{r4, lr}
 800ceb0:	eb01 0402 	add.w	r4, r1, r2
 800ceb4:	d902      	bls.n	800cebc <memmove+0x10>
 800ceb6:	4284      	cmp	r4, r0
 800ceb8:	4623      	mov	r3, r4
 800ceba:	d807      	bhi.n	800cecc <memmove+0x20>
 800cebc:	1e43      	subs	r3, r0, #1
 800cebe:	42a1      	cmp	r1, r4
 800cec0:	d008      	beq.n	800ced4 <memmove+0x28>
 800cec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ceca:	e7f8      	b.n	800cebe <memmove+0x12>
 800cecc:	4601      	mov	r1, r0
 800cece:	4402      	add	r2, r0
 800ced0:	428a      	cmp	r2, r1
 800ced2:	d100      	bne.n	800ced6 <memmove+0x2a>
 800ced4:	bd10      	pop	{r4, pc}
 800ced6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cede:	e7f7      	b.n	800ced0 <memmove+0x24>

0800cee0 <__malloc_lock>:
 800cee0:	4801      	ldr	r0, [pc, #4]	; (800cee8 <__malloc_lock+0x8>)
 800cee2:	f000 bc19 	b.w	800d718 <__retarget_lock_acquire_recursive>
 800cee6:	bf00      	nop
 800cee8:	20001100 	.word	0x20001100

0800ceec <__malloc_unlock>:
 800ceec:	4801      	ldr	r0, [pc, #4]	; (800cef4 <__malloc_unlock+0x8>)
 800ceee:	f000 bc14 	b.w	800d71a <__retarget_lock_release_recursive>
 800cef2:	bf00      	nop
 800cef4:	20001100 	.word	0x20001100

0800cef8 <_realloc_r>:
 800cef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefc:	4680      	mov	r8, r0
 800cefe:	4614      	mov	r4, r2
 800cf00:	460e      	mov	r6, r1
 800cf02:	b921      	cbnz	r1, 800cf0e <_realloc_r+0x16>
 800cf04:	4611      	mov	r1, r2
 800cf06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0a:	f7ff bdad 	b.w	800ca68 <_malloc_r>
 800cf0e:	b92a      	cbnz	r2, 800cf1c <_realloc_r+0x24>
 800cf10:	f7ff fd42 	bl	800c998 <_free_r>
 800cf14:	4625      	mov	r5, r4
 800cf16:	4628      	mov	r0, r5
 800cf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf1c:	f000 fc64 	bl	800d7e8 <_malloc_usable_size_r>
 800cf20:	4284      	cmp	r4, r0
 800cf22:	4607      	mov	r7, r0
 800cf24:	d802      	bhi.n	800cf2c <_realloc_r+0x34>
 800cf26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf2a:	d812      	bhi.n	800cf52 <_realloc_r+0x5a>
 800cf2c:	4621      	mov	r1, r4
 800cf2e:	4640      	mov	r0, r8
 800cf30:	f7ff fd9a 	bl	800ca68 <_malloc_r>
 800cf34:	4605      	mov	r5, r0
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d0ed      	beq.n	800cf16 <_realloc_r+0x1e>
 800cf3a:	42bc      	cmp	r4, r7
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	4631      	mov	r1, r6
 800cf40:	bf28      	it	cs
 800cf42:	463a      	movcs	r2, r7
 800cf44:	f7ff f984 	bl	800c250 <memcpy>
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	f7ff fd24 	bl	800c998 <_free_r>
 800cf50:	e7e1      	b.n	800cf16 <_realloc_r+0x1e>
 800cf52:	4635      	mov	r5, r6
 800cf54:	e7df      	b.n	800cf16 <_realloc_r+0x1e>

0800cf56 <__sfputc_r>:
 800cf56:	6893      	ldr	r3, [r2, #8]
 800cf58:	b410      	push	{r4}
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	6093      	str	r3, [r2, #8]
 800cf60:	da07      	bge.n	800cf72 <__sfputc_r+0x1c>
 800cf62:	6994      	ldr	r4, [r2, #24]
 800cf64:	42a3      	cmp	r3, r4
 800cf66:	db01      	blt.n	800cf6c <__sfputc_r+0x16>
 800cf68:	290a      	cmp	r1, #10
 800cf6a:	d102      	bne.n	800cf72 <__sfputc_r+0x1c>
 800cf6c:	bc10      	pop	{r4}
 800cf6e:	f000 b949 	b.w	800d204 <__swbuf_r>
 800cf72:	6813      	ldr	r3, [r2, #0]
 800cf74:	1c58      	adds	r0, r3, #1
 800cf76:	6010      	str	r0, [r2, #0]
 800cf78:	7019      	strb	r1, [r3, #0]
 800cf7a:	4608      	mov	r0, r1
 800cf7c:	bc10      	pop	{r4}
 800cf7e:	4770      	bx	lr

0800cf80 <__sfputs_r>:
 800cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf82:	4606      	mov	r6, r0
 800cf84:	460f      	mov	r7, r1
 800cf86:	4614      	mov	r4, r2
 800cf88:	18d5      	adds	r5, r2, r3
 800cf8a:	42ac      	cmp	r4, r5
 800cf8c:	d101      	bne.n	800cf92 <__sfputs_r+0x12>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e007      	b.n	800cfa2 <__sfputs_r+0x22>
 800cf92:	463a      	mov	r2, r7
 800cf94:	4630      	mov	r0, r6
 800cf96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf9a:	f7ff ffdc 	bl	800cf56 <__sfputc_r>
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	d1f3      	bne.n	800cf8a <__sfputs_r+0xa>
 800cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfa4 <_vfiprintf_r>:
 800cfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	4614      	mov	r4, r2
 800cfac:	4698      	mov	r8, r3
 800cfae:	4606      	mov	r6, r0
 800cfb0:	b09d      	sub	sp, #116	; 0x74
 800cfb2:	b118      	cbz	r0, 800cfbc <_vfiprintf_r+0x18>
 800cfb4:	6983      	ldr	r3, [r0, #24]
 800cfb6:	b90b      	cbnz	r3, 800cfbc <_vfiprintf_r+0x18>
 800cfb8:	f000 fb10 	bl	800d5dc <__sinit>
 800cfbc:	4b89      	ldr	r3, [pc, #548]	; (800d1e4 <_vfiprintf_r+0x240>)
 800cfbe:	429d      	cmp	r5, r3
 800cfc0:	d11b      	bne.n	800cffa <_vfiprintf_r+0x56>
 800cfc2:	6875      	ldr	r5, [r6, #4]
 800cfc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfc6:	07d9      	lsls	r1, r3, #31
 800cfc8:	d405      	bmi.n	800cfd6 <_vfiprintf_r+0x32>
 800cfca:	89ab      	ldrh	r3, [r5, #12]
 800cfcc:	059a      	lsls	r2, r3, #22
 800cfce:	d402      	bmi.n	800cfd6 <_vfiprintf_r+0x32>
 800cfd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd2:	f000 fba1 	bl	800d718 <__retarget_lock_acquire_recursive>
 800cfd6:	89ab      	ldrh	r3, [r5, #12]
 800cfd8:	071b      	lsls	r3, r3, #28
 800cfda:	d501      	bpl.n	800cfe0 <_vfiprintf_r+0x3c>
 800cfdc:	692b      	ldr	r3, [r5, #16]
 800cfde:	b9eb      	cbnz	r3, 800d01c <_vfiprintf_r+0x78>
 800cfe0:	4629      	mov	r1, r5
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	f000 f96e 	bl	800d2c4 <__swsetup_r>
 800cfe8:	b1c0      	cbz	r0, 800d01c <_vfiprintf_r+0x78>
 800cfea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfec:	07dc      	lsls	r4, r3, #31
 800cfee:	d50e      	bpl.n	800d00e <_vfiprintf_r+0x6a>
 800cff0:	f04f 30ff 	mov.w	r0, #4294967295
 800cff4:	b01d      	add	sp, #116	; 0x74
 800cff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffa:	4b7b      	ldr	r3, [pc, #492]	; (800d1e8 <_vfiprintf_r+0x244>)
 800cffc:	429d      	cmp	r5, r3
 800cffe:	d101      	bne.n	800d004 <_vfiprintf_r+0x60>
 800d000:	68b5      	ldr	r5, [r6, #8]
 800d002:	e7df      	b.n	800cfc4 <_vfiprintf_r+0x20>
 800d004:	4b79      	ldr	r3, [pc, #484]	; (800d1ec <_vfiprintf_r+0x248>)
 800d006:	429d      	cmp	r5, r3
 800d008:	bf08      	it	eq
 800d00a:	68f5      	ldreq	r5, [r6, #12]
 800d00c:	e7da      	b.n	800cfc4 <_vfiprintf_r+0x20>
 800d00e:	89ab      	ldrh	r3, [r5, #12]
 800d010:	0598      	lsls	r0, r3, #22
 800d012:	d4ed      	bmi.n	800cff0 <_vfiprintf_r+0x4c>
 800d014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d016:	f000 fb80 	bl	800d71a <__retarget_lock_release_recursive>
 800d01a:	e7e9      	b.n	800cff0 <_vfiprintf_r+0x4c>
 800d01c:	2300      	movs	r3, #0
 800d01e:	9309      	str	r3, [sp, #36]	; 0x24
 800d020:	2320      	movs	r3, #32
 800d022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d026:	2330      	movs	r3, #48	; 0x30
 800d028:	f04f 0901 	mov.w	r9, #1
 800d02c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d030:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d1f0 <_vfiprintf_r+0x24c>
 800d034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d038:	4623      	mov	r3, r4
 800d03a:	469a      	mov	sl, r3
 800d03c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d040:	b10a      	cbz	r2, 800d046 <_vfiprintf_r+0xa2>
 800d042:	2a25      	cmp	r2, #37	; 0x25
 800d044:	d1f9      	bne.n	800d03a <_vfiprintf_r+0x96>
 800d046:	ebba 0b04 	subs.w	fp, sl, r4
 800d04a:	d00b      	beq.n	800d064 <_vfiprintf_r+0xc0>
 800d04c:	465b      	mov	r3, fp
 800d04e:	4622      	mov	r2, r4
 800d050:	4629      	mov	r1, r5
 800d052:	4630      	mov	r0, r6
 800d054:	f7ff ff94 	bl	800cf80 <__sfputs_r>
 800d058:	3001      	adds	r0, #1
 800d05a:	f000 80aa 	beq.w	800d1b2 <_vfiprintf_r+0x20e>
 800d05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d060:	445a      	add	r2, fp
 800d062:	9209      	str	r2, [sp, #36]	; 0x24
 800d064:	f89a 3000 	ldrb.w	r3, [sl]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 80a2 	beq.w	800d1b2 <_vfiprintf_r+0x20e>
 800d06e:	2300      	movs	r3, #0
 800d070:	f04f 32ff 	mov.w	r2, #4294967295
 800d074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d078:	f10a 0a01 	add.w	sl, sl, #1
 800d07c:	9304      	str	r3, [sp, #16]
 800d07e:	9307      	str	r3, [sp, #28]
 800d080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d084:	931a      	str	r3, [sp, #104]	; 0x68
 800d086:	4654      	mov	r4, sl
 800d088:	2205      	movs	r2, #5
 800d08a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d08e:	4858      	ldr	r0, [pc, #352]	; (800d1f0 <_vfiprintf_r+0x24c>)
 800d090:	f7ff f8d0 	bl	800c234 <memchr>
 800d094:	9a04      	ldr	r2, [sp, #16]
 800d096:	b9d8      	cbnz	r0, 800d0d0 <_vfiprintf_r+0x12c>
 800d098:	06d1      	lsls	r1, r2, #27
 800d09a:	bf44      	itt	mi
 800d09c:	2320      	movmi	r3, #32
 800d09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a2:	0713      	lsls	r3, r2, #28
 800d0a4:	bf44      	itt	mi
 800d0a6:	232b      	movmi	r3, #43	; 0x2b
 800d0a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0b2:	d015      	beq.n	800d0e0 <_vfiprintf_r+0x13c>
 800d0b4:	4654      	mov	r4, sl
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	f04f 0c0a 	mov.w	ip, #10
 800d0bc:	9a07      	ldr	r2, [sp, #28]
 800d0be:	4621      	mov	r1, r4
 800d0c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0c4:	3b30      	subs	r3, #48	; 0x30
 800d0c6:	2b09      	cmp	r3, #9
 800d0c8:	d94e      	bls.n	800d168 <_vfiprintf_r+0x1c4>
 800d0ca:	b1b0      	cbz	r0, 800d0fa <_vfiprintf_r+0x156>
 800d0cc:	9207      	str	r2, [sp, #28]
 800d0ce:	e014      	b.n	800d0fa <_vfiprintf_r+0x156>
 800d0d0:	eba0 0308 	sub.w	r3, r0, r8
 800d0d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d0d8:	4313      	orrs	r3, r2
 800d0da:	46a2      	mov	sl, r4
 800d0dc:	9304      	str	r3, [sp, #16]
 800d0de:	e7d2      	b.n	800d086 <_vfiprintf_r+0xe2>
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	1d19      	adds	r1, r3, #4
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	9103      	str	r1, [sp, #12]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	bfbb      	ittet	lt
 800d0ec:	425b      	neglt	r3, r3
 800d0ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d0f2:	9307      	strge	r3, [sp, #28]
 800d0f4:	9307      	strlt	r3, [sp, #28]
 800d0f6:	bfb8      	it	lt
 800d0f8:	9204      	strlt	r2, [sp, #16]
 800d0fa:	7823      	ldrb	r3, [r4, #0]
 800d0fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d0fe:	d10c      	bne.n	800d11a <_vfiprintf_r+0x176>
 800d100:	7863      	ldrb	r3, [r4, #1]
 800d102:	2b2a      	cmp	r3, #42	; 0x2a
 800d104:	d135      	bne.n	800d172 <_vfiprintf_r+0x1ce>
 800d106:	9b03      	ldr	r3, [sp, #12]
 800d108:	3402      	adds	r4, #2
 800d10a:	1d1a      	adds	r2, r3, #4
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	9203      	str	r2, [sp, #12]
 800d110:	2b00      	cmp	r3, #0
 800d112:	bfb8      	it	lt
 800d114:	f04f 33ff 	movlt.w	r3, #4294967295
 800d118:	9305      	str	r3, [sp, #20]
 800d11a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d1f4 <_vfiprintf_r+0x250>
 800d11e:	2203      	movs	r2, #3
 800d120:	4650      	mov	r0, sl
 800d122:	7821      	ldrb	r1, [r4, #0]
 800d124:	f7ff f886 	bl	800c234 <memchr>
 800d128:	b140      	cbz	r0, 800d13c <_vfiprintf_r+0x198>
 800d12a:	2340      	movs	r3, #64	; 0x40
 800d12c:	eba0 000a 	sub.w	r0, r0, sl
 800d130:	fa03 f000 	lsl.w	r0, r3, r0
 800d134:	9b04      	ldr	r3, [sp, #16]
 800d136:	3401      	adds	r4, #1
 800d138:	4303      	orrs	r3, r0
 800d13a:	9304      	str	r3, [sp, #16]
 800d13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d140:	2206      	movs	r2, #6
 800d142:	482d      	ldr	r0, [pc, #180]	; (800d1f8 <_vfiprintf_r+0x254>)
 800d144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d148:	f7ff f874 	bl	800c234 <memchr>
 800d14c:	2800      	cmp	r0, #0
 800d14e:	d03f      	beq.n	800d1d0 <_vfiprintf_r+0x22c>
 800d150:	4b2a      	ldr	r3, [pc, #168]	; (800d1fc <_vfiprintf_r+0x258>)
 800d152:	bb1b      	cbnz	r3, 800d19c <_vfiprintf_r+0x1f8>
 800d154:	9b03      	ldr	r3, [sp, #12]
 800d156:	3307      	adds	r3, #7
 800d158:	f023 0307 	bic.w	r3, r3, #7
 800d15c:	3308      	adds	r3, #8
 800d15e:	9303      	str	r3, [sp, #12]
 800d160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d162:	443b      	add	r3, r7
 800d164:	9309      	str	r3, [sp, #36]	; 0x24
 800d166:	e767      	b.n	800d038 <_vfiprintf_r+0x94>
 800d168:	460c      	mov	r4, r1
 800d16a:	2001      	movs	r0, #1
 800d16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d170:	e7a5      	b.n	800d0be <_vfiprintf_r+0x11a>
 800d172:	2300      	movs	r3, #0
 800d174:	f04f 0c0a 	mov.w	ip, #10
 800d178:	4619      	mov	r1, r3
 800d17a:	3401      	adds	r4, #1
 800d17c:	9305      	str	r3, [sp, #20]
 800d17e:	4620      	mov	r0, r4
 800d180:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d184:	3a30      	subs	r2, #48	; 0x30
 800d186:	2a09      	cmp	r2, #9
 800d188:	d903      	bls.n	800d192 <_vfiprintf_r+0x1ee>
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d0c5      	beq.n	800d11a <_vfiprintf_r+0x176>
 800d18e:	9105      	str	r1, [sp, #20]
 800d190:	e7c3      	b.n	800d11a <_vfiprintf_r+0x176>
 800d192:	4604      	mov	r4, r0
 800d194:	2301      	movs	r3, #1
 800d196:	fb0c 2101 	mla	r1, ip, r1, r2
 800d19a:	e7f0      	b.n	800d17e <_vfiprintf_r+0x1da>
 800d19c:	ab03      	add	r3, sp, #12
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	462a      	mov	r2, r5
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	4b16      	ldr	r3, [pc, #88]	; (800d200 <_vfiprintf_r+0x25c>)
 800d1a6:	a904      	add	r1, sp, #16
 800d1a8:	f7fd fda4 	bl	800acf4 <_printf_float>
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	1c78      	adds	r0, r7, #1
 800d1b0:	d1d6      	bne.n	800d160 <_vfiprintf_r+0x1bc>
 800d1b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b4:	07d9      	lsls	r1, r3, #31
 800d1b6:	d405      	bmi.n	800d1c4 <_vfiprintf_r+0x220>
 800d1b8:	89ab      	ldrh	r3, [r5, #12]
 800d1ba:	059a      	lsls	r2, r3, #22
 800d1bc:	d402      	bmi.n	800d1c4 <_vfiprintf_r+0x220>
 800d1be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1c0:	f000 faab 	bl	800d71a <__retarget_lock_release_recursive>
 800d1c4:	89ab      	ldrh	r3, [r5, #12]
 800d1c6:	065b      	lsls	r3, r3, #25
 800d1c8:	f53f af12 	bmi.w	800cff0 <_vfiprintf_r+0x4c>
 800d1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1ce:	e711      	b.n	800cff4 <_vfiprintf_r+0x50>
 800d1d0:	ab03      	add	r3, sp, #12
 800d1d2:	9300      	str	r3, [sp, #0]
 800d1d4:	462a      	mov	r2, r5
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	4b09      	ldr	r3, [pc, #36]	; (800d200 <_vfiprintf_r+0x25c>)
 800d1da:	a904      	add	r1, sp, #16
 800d1dc:	f7fe f826 	bl	800b22c <_printf_i>
 800d1e0:	e7e4      	b.n	800d1ac <_vfiprintf_r+0x208>
 800d1e2:	bf00      	nop
 800d1e4:	0800eec4 	.word	0x0800eec4
 800d1e8:	0800eee4 	.word	0x0800eee4
 800d1ec:	0800eea4 	.word	0x0800eea4
 800d1f0:	0800ed4c 	.word	0x0800ed4c
 800d1f4:	0800ed52 	.word	0x0800ed52
 800d1f8:	0800ed56 	.word	0x0800ed56
 800d1fc:	0800acf5 	.word	0x0800acf5
 800d200:	0800cf81 	.word	0x0800cf81

0800d204 <__swbuf_r>:
 800d204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d206:	460e      	mov	r6, r1
 800d208:	4614      	mov	r4, r2
 800d20a:	4605      	mov	r5, r0
 800d20c:	b118      	cbz	r0, 800d216 <__swbuf_r+0x12>
 800d20e:	6983      	ldr	r3, [r0, #24]
 800d210:	b90b      	cbnz	r3, 800d216 <__swbuf_r+0x12>
 800d212:	f000 f9e3 	bl	800d5dc <__sinit>
 800d216:	4b21      	ldr	r3, [pc, #132]	; (800d29c <__swbuf_r+0x98>)
 800d218:	429c      	cmp	r4, r3
 800d21a:	d12b      	bne.n	800d274 <__swbuf_r+0x70>
 800d21c:	686c      	ldr	r4, [r5, #4]
 800d21e:	69a3      	ldr	r3, [r4, #24]
 800d220:	60a3      	str	r3, [r4, #8]
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	071a      	lsls	r2, r3, #28
 800d226:	d52f      	bpl.n	800d288 <__swbuf_r+0x84>
 800d228:	6923      	ldr	r3, [r4, #16]
 800d22a:	b36b      	cbz	r3, 800d288 <__swbuf_r+0x84>
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	6820      	ldr	r0, [r4, #0]
 800d230:	b2f6      	uxtb	r6, r6
 800d232:	1ac0      	subs	r0, r0, r3
 800d234:	6963      	ldr	r3, [r4, #20]
 800d236:	4637      	mov	r7, r6
 800d238:	4283      	cmp	r3, r0
 800d23a:	dc04      	bgt.n	800d246 <__swbuf_r+0x42>
 800d23c:	4621      	mov	r1, r4
 800d23e:	4628      	mov	r0, r5
 800d240:	f000 f938 	bl	800d4b4 <_fflush_r>
 800d244:	bb30      	cbnz	r0, 800d294 <__swbuf_r+0x90>
 800d246:	68a3      	ldr	r3, [r4, #8]
 800d248:	3001      	adds	r0, #1
 800d24a:	3b01      	subs	r3, #1
 800d24c:	60a3      	str	r3, [r4, #8]
 800d24e:	6823      	ldr	r3, [r4, #0]
 800d250:	1c5a      	adds	r2, r3, #1
 800d252:	6022      	str	r2, [r4, #0]
 800d254:	701e      	strb	r6, [r3, #0]
 800d256:	6963      	ldr	r3, [r4, #20]
 800d258:	4283      	cmp	r3, r0
 800d25a:	d004      	beq.n	800d266 <__swbuf_r+0x62>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	07db      	lsls	r3, r3, #31
 800d260:	d506      	bpl.n	800d270 <__swbuf_r+0x6c>
 800d262:	2e0a      	cmp	r6, #10
 800d264:	d104      	bne.n	800d270 <__swbuf_r+0x6c>
 800d266:	4621      	mov	r1, r4
 800d268:	4628      	mov	r0, r5
 800d26a:	f000 f923 	bl	800d4b4 <_fflush_r>
 800d26e:	b988      	cbnz	r0, 800d294 <__swbuf_r+0x90>
 800d270:	4638      	mov	r0, r7
 800d272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d274:	4b0a      	ldr	r3, [pc, #40]	; (800d2a0 <__swbuf_r+0x9c>)
 800d276:	429c      	cmp	r4, r3
 800d278:	d101      	bne.n	800d27e <__swbuf_r+0x7a>
 800d27a:	68ac      	ldr	r4, [r5, #8]
 800d27c:	e7cf      	b.n	800d21e <__swbuf_r+0x1a>
 800d27e:	4b09      	ldr	r3, [pc, #36]	; (800d2a4 <__swbuf_r+0xa0>)
 800d280:	429c      	cmp	r4, r3
 800d282:	bf08      	it	eq
 800d284:	68ec      	ldreq	r4, [r5, #12]
 800d286:	e7ca      	b.n	800d21e <__swbuf_r+0x1a>
 800d288:	4621      	mov	r1, r4
 800d28a:	4628      	mov	r0, r5
 800d28c:	f000 f81a 	bl	800d2c4 <__swsetup_r>
 800d290:	2800      	cmp	r0, #0
 800d292:	d0cb      	beq.n	800d22c <__swbuf_r+0x28>
 800d294:	f04f 37ff 	mov.w	r7, #4294967295
 800d298:	e7ea      	b.n	800d270 <__swbuf_r+0x6c>
 800d29a:	bf00      	nop
 800d29c:	0800eec4 	.word	0x0800eec4
 800d2a0:	0800eee4 	.word	0x0800eee4
 800d2a4:	0800eea4 	.word	0x0800eea4

0800d2a8 <__ascii_wctomb>:
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	4608      	mov	r0, r1
 800d2ac:	b141      	cbz	r1, 800d2c0 <__ascii_wctomb+0x18>
 800d2ae:	2aff      	cmp	r2, #255	; 0xff
 800d2b0:	d904      	bls.n	800d2bc <__ascii_wctomb+0x14>
 800d2b2:	228a      	movs	r2, #138	; 0x8a
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	4770      	bx	lr
 800d2bc:	2001      	movs	r0, #1
 800d2be:	700a      	strb	r2, [r1, #0]
 800d2c0:	4770      	bx	lr
	...

0800d2c4 <__swsetup_r>:
 800d2c4:	4b32      	ldr	r3, [pc, #200]	; (800d390 <__swsetup_r+0xcc>)
 800d2c6:	b570      	push	{r4, r5, r6, lr}
 800d2c8:	681d      	ldr	r5, [r3, #0]
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	460c      	mov	r4, r1
 800d2ce:	b125      	cbz	r5, 800d2da <__swsetup_r+0x16>
 800d2d0:	69ab      	ldr	r3, [r5, #24]
 800d2d2:	b913      	cbnz	r3, 800d2da <__swsetup_r+0x16>
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	f000 f981 	bl	800d5dc <__sinit>
 800d2da:	4b2e      	ldr	r3, [pc, #184]	; (800d394 <__swsetup_r+0xd0>)
 800d2dc:	429c      	cmp	r4, r3
 800d2de:	d10f      	bne.n	800d300 <__swsetup_r+0x3c>
 800d2e0:	686c      	ldr	r4, [r5, #4]
 800d2e2:	89a3      	ldrh	r3, [r4, #12]
 800d2e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2e8:	0719      	lsls	r1, r3, #28
 800d2ea:	d42c      	bmi.n	800d346 <__swsetup_r+0x82>
 800d2ec:	06dd      	lsls	r5, r3, #27
 800d2ee:	d411      	bmi.n	800d314 <__swsetup_r+0x50>
 800d2f0:	2309      	movs	r3, #9
 800d2f2:	6033      	str	r3, [r6, #0]
 800d2f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	81a3      	strh	r3, [r4, #12]
 800d2fe:	e03e      	b.n	800d37e <__swsetup_r+0xba>
 800d300:	4b25      	ldr	r3, [pc, #148]	; (800d398 <__swsetup_r+0xd4>)
 800d302:	429c      	cmp	r4, r3
 800d304:	d101      	bne.n	800d30a <__swsetup_r+0x46>
 800d306:	68ac      	ldr	r4, [r5, #8]
 800d308:	e7eb      	b.n	800d2e2 <__swsetup_r+0x1e>
 800d30a:	4b24      	ldr	r3, [pc, #144]	; (800d39c <__swsetup_r+0xd8>)
 800d30c:	429c      	cmp	r4, r3
 800d30e:	bf08      	it	eq
 800d310:	68ec      	ldreq	r4, [r5, #12]
 800d312:	e7e6      	b.n	800d2e2 <__swsetup_r+0x1e>
 800d314:	0758      	lsls	r0, r3, #29
 800d316:	d512      	bpl.n	800d33e <__swsetup_r+0x7a>
 800d318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d31a:	b141      	cbz	r1, 800d32e <__swsetup_r+0x6a>
 800d31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d320:	4299      	cmp	r1, r3
 800d322:	d002      	beq.n	800d32a <__swsetup_r+0x66>
 800d324:	4630      	mov	r0, r6
 800d326:	f7ff fb37 	bl	800c998 <_free_r>
 800d32a:	2300      	movs	r3, #0
 800d32c:	6363      	str	r3, [r4, #52]	; 0x34
 800d32e:	89a3      	ldrh	r3, [r4, #12]
 800d330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d334:	81a3      	strh	r3, [r4, #12]
 800d336:	2300      	movs	r3, #0
 800d338:	6063      	str	r3, [r4, #4]
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	f043 0308 	orr.w	r3, r3, #8
 800d344:	81a3      	strh	r3, [r4, #12]
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	b94b      	cbnz	r3, 800d35e <__swsetup_r+0x9a>
 800d34a:	89a3      	ldrh	r3, [r4, #12]
 800d34c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d354:	d003      	beq.n	800d35e <__swsetup_r+0x9a>
 800d356:	4621      	mov	r1, r4
 800d358:	4630      	mov	r0, r6
 800d35a:	f000 fa05 	bl	800d768 <__smakebuf_r>
 800d35e:	89a0      	ldrh	r0, [r4, #12]
 800d360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d364:	f010 0301 	ands.w	r3, r0, #1
 800d368:	d00a      	beq.n	800d380 <__swsetup_r+0xbc>
 800d36a:	2300      	movs	r3, #0
 800d36c:	60a3      	str	r3, [r4, #8]
 800d36e:	6963      	ldr	r3, [r4, #20]
 800d370:	425b      	negs	r3, r3
 800d372:	61a3      	str	r3, [r4, #24]
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	b943      	cbnz	r3, 800d38a <__swsetup_r+0xc6>
 800d378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d37c:	d1ba      	bne.n	800d2f4 <__swsetup_r+0x30>
 800d37e:	bd70      	pop	{r4, r5, r6, pc}
 800d380:	0781      	lsls	r1, r0, #30
 800d382:	bf58      	it	pl
 800d384:	6963      	ldrpl	r3, [r4, #20]
 800d386:	60a3      	str	r3, [r4, #8]
 800d388:	e7f4      	b.n	800d374 <__swsetup_r+0xb0>
 800d38a:	2000      	movs	r0, #0
 800d38c:	e7f7      	b.n	800d37e <__swsetup_r+0xba>
 800d38e:	bf00      	nop
 800d390:	200001d0 	.word	0x200001d0
 800d394:	0800eec4 	.word	0x0800eec4
 800d398:	0800eee4 	.word	0x0800eee4
 800d39c:	0800eea4 	.word	0x0800eea4

0800d3a0 <abort>:
 800d3a0:	2006      	movs	r0, #6
 800d3a2:	b508      	push	{r3, lr}
 800d3a4:	f000 fa50 	bl	800d848 <raise>
 800d3a8:	2001      	movs	r0, #1
 800d3aa:	f7f4 fa3a 	bl	8001822 <_exit>
	...

0800d3b0 <__sflush_r>:
 800d3b0:	898a      	ldrh	r2, [r1, #12]
 800d3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	0710      	lsls	r0, r2, #28
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	d457      	bmi.n	800d46c <__sflush_r+0xbc>
 800d3bc:	684b      	ldr	r3, [r1, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	dc04      	bgt.n	800d3cc <__sflush_r+0x1c>
 800d3c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dc01      	bgt.n	800d3cc <__sflush_r+0x1c>
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3ce:	2e00      	cmp	r6, #0
 800d3d0:	d0fa      	beq.n	800d3c8 <__sflush_r+0x18>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3d8:	682f      	ldr	r7, [r5, #0]
 800d3da:	602b      	str	r3, [r5, #0]
 800d3dc:	d032      	beq.n	800d444 <__sflush_r+0x94>
 800d3de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	075a      	lsls	r2, r3, #29
 800d3e4:	d505      	bpl.n	800d3f2 <__sflush_r+0x42>
 800d3e6:	6863      	ldr	r3, [r4, #4]
 800d3e8:	1ac0      	subs	r0, r0, r3
 800d3ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3ec:	b10b      	cbz	r3, 800d3f2 <__sflush_r+0x42>
 800d3ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3f0:	1ac0      	subs	r0, r0, r3
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	6a21      	ldr	r1, [r4, #32]
 800d3fc:	47b0      	blx	r6
 800d3fe:	1c43      	adds	r3, r0, #1
 800d400:	89a3      	ldrh	r3, [r4, #12]
 800d402:	d106      	bne.n	800d412 <__sflush_r+0x62>
 800d404:	6829      	ldr	r1, [r5, #0]
 800d406:	291d      	cmp	r1, #29
 800d408:	d82c      	bhi.n	800d464 <__sflush_r+0xb4>
 800d40a:	4a29      	ldr	r2, [pc, #164]	; (800d4b0 <__sflush_r+0x100>)
 800d40c:	40ca      	lsrs	r2, r1
 800d40e:	07d6      	lsls	r6, r2, #31
 800d410:	d528      	bpl.n	800d464 <__sflush_r+0xb4>
 800d412:	2200      	movs	r2, #0
 800d414:	6062      	str	r2, [r4, #4]
 800d416:	6922      	ldr	r2, [r4, #16]
 800d418:	04d9      	lsls	r1, r3, #19
 800d41a:	6022      	str	r2, [r4, #0]
 800d41c:	d504      	bpl.n	800d428 <__sflush_r+0x78>
 800d41e:	1c42      	adds	r2, r0, #1
 800d420:	d101      	bne.n	800d426 <__sflush_r+0x76>
 800d422:	682b      	ldr	r3, [r5, #0]
 800d424:	b903      	cbnz	r3, 800d428 <__sflush_r+0x78>
 800d426:	6560      	str	r0, [r4, #84]	; 0x54
 800d428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d42a:	602f      	str	r7, [r5, #0]
 800d42c:	2900      	cmp	r1, #0
 800d42e:	d0cb      	beq.n	800d3c8 <__sflush_r+0x18>
 800d430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d434:	4299      	cmp	r1, r3
 800d436:	d002      	beq.n	800d43e <__sflush_r+0x8e>
 800d438:	4628      	mov	r0, r5
 800d43a:	f7ff faad 	bl	800c998 <_free_r>
 800d43e:	2000      	movs	r0, #0
 800d440:	6360      	str	r0, [r4, #52]	; 0x34
 800d442:	e7c2      	b.n	800d3ca <__sflush_r+0x1a>
 800d444:	6a21      	ldr	r1, [r4, #32]
 800d446:	2301      	movs	r3, #1
 800d448:	4628      	mov	r0, r5
 800d44a:	47b0      	blx	r6
 800d44c:	1c41      	adds	r1, r0, #1
 800d44e:	d1c7      	bne.n	800d3e0 <__sflush_r+0x30>
 800d450:	682b      	ldr	r3, [r5, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d0c4      	beq.n	800d3e0 <__sflush_r+0x30>
 800d456:	2b1d      	cmp	r3, #29
 800d458:	d001      	beq.n	800d45e <__sflush_r+0xae>
 800d45a:	2b16      	cmp	r3, #22
 800d45c:	d101      	bne.n	800d462 <__sflush_r+0xb2>
 800d45e:	602f      	str	r7, [r5, #0]
 800d460:	e7b2      	b.n	800d3c8 <__sflush_r+0x18>
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d468:	81a3      	strh	r3, [r4, #12]
 800d46a:	e7ae      	b.n	800d3ca <__sflush_r+0x1a>
 800d46c:	690f      	ldr	r7, [r1, #16]
 800d46e:	2f00      	cmp	r7, #0
 800d470:	d0aa      	beq.n	800d3c8 <__sflush_r+0x18>
 800d472:	0793      	lsls	r3, r2, #30
 800d474:	bf18      	it	ne
 800d476:	2300      	movne	r3, #0
 800d478:	680e      	ldr	r6, [r1, #0]
 800d47a:	bf08      	it	eq
 800d47c:	694b      	ldreq	r3, [r1, #20]
 800d47e:	1bf6      	subs	r6, r6, r7
 800d480:	600f      	str	r7, [r1, #0]
 800d482:	608b      	str	r3, [r1, #8]
 800d484:	2e00      	cmp	r6, #0
 800d486:	dd9f      	ble.n	800d3c8 <__sflush_r+0x18>
 800d488:	4633      	mov	r3, r6
 800d48a:	463a      	mov	r2, r7
 800d48c:	4628      	mov	r0, r5
 800d48e:	6a21      	ldr	r1, [r4, #32]
 800d490:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d494:	47e0      	blx	ip
 800d496:	2800      	cmp	r0, #0
 800d498:	dc06      	bgt.n	800d4a8 <__sflush_r+0xf8>
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a4:	81a3      	strh	r3, [r4, #12]
 800d4a6:	e790      	b.n	800d3ca <__sflush_r+0x1a>
 800d4a8:	4407      	add	r7, r0
 800d4aa:	1a36      	subs	r6, r6, r0
 800d4ac:	e7ea      	b.n	800d484 <__sflush_r+0xd4>
 800d4ae:	bf00      	nop
 800d4b0:	20400001 	.word	0x20400001

0800d4b4 <_fflush_r>:
 800d4b4:	b538      	push	{r3, r4, r5, lr}
 800d4b6:	690b      	ldr	r3, [r1, #16]
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	460c      	mov	r4, r1
 800d4bc:	b913      	cbnz	r3, 800d4c4 <_fflush_r+0x10>
 800d4be:	2500      	movs	r5, #0
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	bd38      	pop	{r3, r4, r5, pc}
 800d4c4:	b118      	cbz	r0, 800d4ce <_fflush_r+0x1a>
 800d4c6:	6983      	ldr	r3, [r0, #24]
 800d4c8:	b90b      	cbnz	r3, 800d4ce <_fflush_r+0x1a>
 800d4ca:	f000 f887 	bl	800d5dc <__sinit>
 800d4ce:	4b14      	ldr	r3, [pc, #80]	; (800d520 <_fflush_r+0x6c>)
 800d4d0:	429c      	cmp	r4, r3
 800d4d2:	d11b      	bne.n	800d50c <_fflush_r+0x58>
 800d4d4:	686c      	ldr	r4, [r5, #4]
 800d4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d0ef      	beq.n	800d4be <_fflush_r+0xa>
 800d4de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4e0:	07d0      	lsls	r0, r2, #31
 800d4e2:	d404      	bmi.n	800d4ee <_fflush_r+0x3a>
 800d4e4:	0599      	lsls	r1, r3, #22
 800d4e6:	d402      	bmi.n	800d4ee <_fflush_r+0x3a>
 800d4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4ea:	f000 f915 	bl	800d718 <__retarget_lock_acquire_recursive>
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	4621      	mov	r1, r4
 800d4f2:	f7ff ff5d 	bl	800d3b0 <__sflush_r>
 800d4f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4f8:	4605      	mov	r5, r0
 800d4fa:	07da      	lsls	r2, r3, #31
 800d4fc:	d4e0      	bmi.n	800d4c0 <_fflush_r+0xc>
 800d4fe:	89a3      	ldrh	r3, [r4, #12]
 800d500:	059b      	lsls	r3, r3, #22
 800d502:	d4dd      	bmi.n	800d4c0 <_fflush_r+0xc>
 800d504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d506:	f000 f908 	bl	800d71a <__retarget_lock_release_recursive>
 800d50a:	e7d9      	b.n	800d4c0 <_fflush_r+0xc>
 800d50c:	4b05      	ldr	r3, [pc, #20]	; (800d524 <_fflush_r+0x70>)
 800d50e:	429c      	cmp	r4, r3
 800d510:	d101      	bne.n	800d516 <_fflush_r+0x62>
 800d512:	68ac      	ldr	r4, [r5, #8]
 800d514:	e7df      	b.n	800d4d6 <_fflush_r+0x22>
 800d516:	4b04      	ldr	r3, [pc, #16]	; (800d528 <_fflush_r+0x74>)
 800d518:	429c      	cmp	r4, r3
 800d51a:	bf08      	it	eq
 800d51c:	68ec      	ldreq	r4, [r5, #12]
 800d51e:	e7da      	b.n	800d4d6 <_fflush_r+0x22>
 800d520:	0800eec4 	.word	0x0800eec4
 800d524:	0800eee4 	.word	0x0800eee4
 800d528:	0800eea4 	.word	0x0800eea4

0800d52c <std>:
 800d52c:	2300      	movs	r3, #0
 800d52e:	b510      	push	{r4, lr}
 800d530:	4604      	mov	r4, r0
 800d532:	e9c0 3300 	strd	r3, r3, [r0]
 800d536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d53a:	6083      	str	r3, [r0, #8]
 800d53c:	8181      	strh	r1, [r0, #12]
 800d53e:	6643      	str	r3, [r0, #100]	; 0x64
 800d540:	81c2      	strh	r2, [r0, #14]
 800d542:	6183      	str	r3, [r0, #24]
 800d544:	4619      	mov	r1, r3
 800d546:	2208      	movs	r2, #8
 800d548:	305c      	adds	r0, #92	; 0x5c
 800d54a:	f7fd fb2d 	bl	800aba8 <memset>
 800d54e:	4b05      	ldr	r3, [pc, #20]	; (800d564 <std+0x38>)
 800d550:	6224      	str	r4, [r4, #32]
 800d552:	6263      	str	r3, [r4, #36]	; 0x24
 800d554:	4b04      	ldr	r3, [pc, #16]	; (800d568 <std+0x3c>)
 800d556:	62a3      	str	r3, [r4, #40]	; 0x28
 800d558:	4b04      	ldr	r3, [pc, #16]	; (800d56c <std+0x40>)
 800d55a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d55c:	4b04      	ldr	r3, [pc, #16]	; (800d570 <std+0x44>)
 800d55e:	6323      	str	r3, [r4, #48]	; 0x30
 800d560:	bd10      	pop	{r4, pc}
 800d562:	bf00      	nop
 800d564:	0800d881 	.word	0x0800d881
 800d568:	0800d8a3 	.word	0x0800d8a3
 800d56c:	0800d8db 	.word	0x0800d8db
 800d570:	0800d8ff 	.word	0x0800d8ff

0800d574 <_cleanup_r>:
 800d574:	4901      	ldr	r1, [pc, #4]	; (800d57c <_cleanup_r+0x8>)
 800d576:	f000 b8af 	b.w	800d6d8 <_fwalk_reent>
 800d57a:	bf00      	nop
 800d57c:	0800d4b5 	.word	0x0800d4b5

0800d580 <__sfmoreglue>:
 800d580:	2268      	movs	r2, #104	; 0x68
 800d582:	b570      	push	{r4, r5, r6, lr}
 800d584:	1e4d      	subs	r5, r1, #1
 800d586:	4355      	muls	r5, r2
 800d588:	460e      	mov	r6, r1
 800d58a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d58e:	f7ff fa6b 	bl	800ca68 <_malloc_r>
 800d592:	4604      	mov	r4, r0
 800d594:	b140      	cbz	r0, 800d5a8 <__sfmoreglue+0x28>
 800d596:	2100      	movs	r1, #0
 800d598:	e9c0 1600 	strd	r1, r6, [r0]
 800d59c:	300c      	adds	r0, #12
 800d59e:	60a0      	str	r0, [r4, #8]
 800d5a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5a4:	f7fd fb00 	bl	800aba8 <memset>
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	bd70      	pop	{r4, r5, r6, pc}

0800d5ac <__sfp_lock_acquire>:
 800d5ac:	4801      	ldr	r0, [pc, #4]	; (800d5b4 <__sfp_lock_acquire+0x8>)
 800d5ae:	f000 b8b3 	b.w	800d718 <__retarget_lock_acquire_recursive>
 800d5b2:	bf00      	nop
 800d5b4:	20001101 	.word	0x20001101

0800d5b8 <__sfp_lock_release>:
 800d5b8:	4801      	ldr	r0, [pc, #4]	; (800d5c0 <__sfp_lock_release+0x8>)
 800d5ba:	f000 b8ae 	b.w	800d71a <__retarget_lock_release_recursive>
 800d5be:	bf00      	nop
 800d5c0:	20001101 	.word	0x20001101

0800d5c4 <__sinit_lock_acquire>:
 800d5c4:	4801      	ldr	r0, [pc, #4]	; (800d5cc <__sinit_lock_acquire+0x8>)
 800d5c6:	f000 b8a7 	b.w	800d718 <__retarget_lock_acquire_recursive>
 800d5ca:	bf00      	nop
 800d5cc:	20001102 	.word	0x20001102

0800d5d0 <__sinit_lock_release>:
 800d5d0:	4801      	ldr	r0, [pc, #4]	; (800d5d8 <__sinit_lock_release+0x8>)
 800d5d2:	f000 b8a2 	b.w	800d71a <__retarget_lock_release_recursive>
 800d5d6:	bf00      	nop
 800d5d8:	20001102 	.word	0x20001102

0800d5dc <__sinit>:
 800d5dc:	b510      	push	{r4, lr}
 800d5de:	4604      	mov	r4, r0
 800d5e0:	f7ff fff0 	bl	800d5c4 <__sinit_lock_acquire>
 800d5e4:	69a3      	ldr	r3, [r4, #24]
 800d5e6:	b11b      	cbz	r3, 800d5f0 <__sinit+0x14>
 800d5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5ec:	f7ff bff0 	b.w	800d5d0 <__sinit_lock_release>
 800d5f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d5f4:	6523      	str	r3, [r4, #80]	; 0x50
 800d5f6:	4b13      	ldr	r3, [pc, #76]	; (800d644 <__sinit+0x68>)
 800d5f8:	4a13      	ldr	r2, [pc, #76]	; (800d648 <__sinit+0x6c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d5fe:	42a3      	cmp	r3, r4
 800d600:	bf08      	it	eq
 800d602:	2301      	moveq	r3, #1
 800d604:	4620      	mov	r0, r4
 800d606:	bf08      	it	eq
 800d608:	61a3      	streq	r3, [r4, #24]
 800d60a:	f000 f81f 	bl	800d64c <__sfp>
 800d60e:	6060      	str	r0, [r4, #4]
 800d610:	4620      	mov	r0, r4
 800d612:	f000 f81b 	bl	800d64c <__sfp>
 800d616:	60a0      	str	r0, [r4, #8]
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 f817 	bl	800d64c <__sfp>
 800d61e:	2200      	movs	r2, #0
 800d620:	2104      	movs	r1, #4
 800d622:	60e0      	str	r0, [r4, #12]
 800d624:	6860      	ldr	r0, [r4, #4]
 800d626:	f7ff ff81 	bl	800d52c <std>
 800d62a:	2201      	movs	r2, #1
 800d62c:	2109      	movs	r1, #9
 800d62e:	68a0      	ldr	r0, [r4, #8]
 800d630:	f7ff ff7c 	bl	800d52c <std>
 800d634:	2202      	movs	r2, #2
 800d636:	2112      	movs	r1, #18
 800d638:	68e0      	ldr	r0, [r4, #12]
 800d63a:	f7ff ff77 	bl	800d52c <std>
 800d63e:	2301      	movs	r3, #1
 800d640:	61a3      	str	r3, [r4, #24]
 800d642:	e7d1      	b.n	800d5e8 <__sinit+0xc>
 800d644:	0800eb2c 	.word	0x0800eb2c
 800d648:	0800d575 	.word	0x0800d575

0800d64c <__sfp>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	4607      	mov	r7, r0
 800d650:	f7ff ffac 	bl	800d5ac <__sfp_lock_acquire>
 800d654:	4b1e      	ldr	r3, [pc, #120]	; (800d6d0 <__sfp+0x84>)
 800d656:	681e      	ldr	r6, [r3, #0]
 800d658:	69b3      	ldr	r3, [r6, #24]
 800d65a:	b913      	cbnz	r3, 800d662 <__sfp+0x16>
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7ff ffbd 	bl	800d5dc <__sinit>
 800d662:	3648      	adds	r6, #72	; 0x48
 800d664:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d668:	3b01      	subs	r3, #1
 800d66a:	d503      	bpl.n	800d674 <__sfp+0x28>
 800d66c:	6833      	ldr	r3, [r6, #0]
 800d66e:	b30b      	cbz	r3, 800d6b4 <__sfp+0x68>
 800d670:	6836      	ldr	r6, [r6, #0]
 800d672:	e7f7      	b.n	800d664 <__sfp+0x18>
 800d674:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d678:	b9d5      	cbnz	r5, 800d6b0 <__sfp+0x64>
 800d67a:	4b16      	ldr	r3, [pc, #88]	; (800d6d4 <__sfp+0x88>)
 800d67c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d680:	60e3      	str	r3, [r4, #12]
 800d682:	6665      	str	r5, [r4, #100]	; 0x64
 800d684:	f000 f847 	bl	800d716 <__retarget_lock_init_recursive>
 800d688:	f7ff ff96 	bl	800d5b8 <__sfp_lock_release>
 800d68c:	2208      	movs	r2, #8
 800d68e:	4629      	mov	r1, r5
 800d690:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d694:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d698:	6025      	str	r5, [r4, #0]
 800d69a:	61a5      	str	r5, [r4, #24]
 800d69c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6a0:	f7fd fa82 	bl	800aba8 <memset>
 800d6a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b0:	3468      	adds	r4, #104	; 0x68
 800d6b2:	e7d9      	b.n	800d668 <__sfp+0x1c>
 800d6b4:	2104      	movs	r1, #4
 800d6b6:	4638      	mov	r0, r7
 800d6b8:	f7ff ff62 	bl	800d580 <__sfmoreglue>
 800d6bc:	4604      	mov	r4, r0
 800d6be:	6030      	str	r0, [r6, #0]
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d1d5      	bne.n	800d670 <__sfp+0x24>
 800d6c4:	f7ff ff78 	bl	800d5b8 <__sfp_lock_release>
 800d6c8:	230c      	movs	r3, #12
 800d6ca:	603b      	str	r3, [r7, #0]
 800d6cc:	e7ee      	b.n	800d6ac <__sfp+0x60>
 800d6ce:	bf00      	nop
 800d6d0:	0800eb2c 	.word	0x0800eb2c
 800d6d4:	ffff0001 	.word	0xffff0001

0800d6d8 <_fwalk_reent>:
 800d6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6dc:	4606      	mov	r6, r0
 800d6de:	4688      	mov	r8, r1
 800d6e0:	2700      	movs	r7, #0
 800d6e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6ea:	f1b9 0901 	subs.w	r9, r9, #1
 800d6ee:	d505      	bpl.n	800d6fc <_fwalk_reent+0x24>
 800d6f0:	6824      	ldr	r4, [r4, #0]
 800d6f2:	2c00      	cmp	r4, #0
 800d6f4:	d1f7      	bne.n	800d6e6 <_fwalk_reent+0xe>
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6fc:	89ab      	ldrh	r3, [r5, #12]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d907      	bls.n	800d712 <_fwalk_reent+0x3a>
 800d702:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d706:	3301      	adds	r3, #1
 800d708:	d003      	beq.n	800d712 <_fwalk_reent+0x3a>
 800d70a:	4629      	mov	r1, r5
 800d70c:	4630      	mov	r0, r6
 800d70e:	47c0      	blx	r8
 800d710:	4307      	orrs	r7, r0
 800d712:	3568      	adds	r5, #104	; 0x68
 800d714:	e7e9      	b.n	800d6ea <_fwalk_reent+0x12>

0800d716 <__retarget_lock_init_recursive>:
 800d716:	4770      	bx	lr

0800d718 <__retarget_lock_acquire_recursive>:
 800d718:	4770      	bx	lr

0800d71a <__retarget_lock_release_recursive>:
 800d71a:	4770      	bx	lr

0800d71c <__swhatbuf_r>:
 800d71c:	b570      	push	{r4, r5, r6, lr}
 800d71e:	460e      	mov	r6, r1
 800d720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d724:	4614      	mov	r4, r2
 800d726:	2900      	cmp	r1, #0
 800d728:	461d      	mov	r5, r3
 800d72a:	b096      	sub	sp, #88	; 0x58
 800d72c:	da08      	bge.n	800d740 <__swhatbuf_r+0x24>
 800d72e:	2200      	movs	r2, #0
 800d730:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d734:	602a      	str	r2, [r5, #0]
 800d736:	061a      	lsls	r2, r3, #24
 800d738:	d410      	bmi.n	800d75c <__swhatbuf_r+0x40>
 800d73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d73e:	e00e      	b.n	800d75e <__swhatbuf_r+0x42>
 800d740:	466a      	mov	r2, sp
 800d742:	f000 f903 	bl	800d94c <_fstat_r>
 800d746:	2800      	cmp	r0, #0
 800d748:	dbf1      	blt.n	800d72e <__swhatbuf_r+0x12>
 800d74a:	9a01      	ldr	r2, [sp, #4]
 800d74c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d750:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d754:	425a      	negs	r2, r3
 800d756:	415a      	adcs	r2, r3
 800d758:	602a      	str	r2, [r5, #0]
 800d75a:	e7ee      	b.n	800d73a <__swhatbuf_r+0x1e>
 800d75c:	2340      	movs	r3, #64	; 0x40
 800d75e:	2000      	movs	r0, #0
 800d760:	6023      	str	r3, [r4, #0]
 800d762:	b016      	add	sp, #88	; 0x58
 800d764:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d768 <__smakebuf_r>:
 800d768:	898b      	ldrh	r3, [r1, #12]
 800d76a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d76c:	079d      	lsls	r5, r3, #30
 800d76e:	4606      	mov	r6, r0
 800d770:	460c      	mov	r4, r1
 800d772:	d507      	bpl.n	800d784 <__smakebuf_r+0x1c>
 800d774:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	6123      	str	r3, [r4, #16]
 800d77c:	2301      	movs	r3, #1
 800d77e:	6163      	str	r3, [r4, #20]
 800d780:	b002      	add	sp, #8
 800d782:	bd70      	pop	{r4, r5, r6, pc}
 800d784:	466a      	mov	r2, sp
 800d786:	ab01      	add	r3, sp, #4
 800d788:	f7ff ffc8 	bl	800d71c <__swhatbuf_r>
 800d78c:	9900      	ldr	r1, [sp, #0]
 800d78e:	4605      	mov	r5, r0
 800d790:	4630      	mov	r0, r6
 800d792:	f7ff f969 	bl	800ca68 <_malloc_r>
 800d796:	b948      	cbnz	r0, 800d7ac <__smakebuf_r+0x44>
 800d798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d79c:	059a      	lsls	r2, r3, #22
 800d79e:	d4ef      	bmi.n	800d780 <__smakebuf_r+0x18>
 800d7a0:	f023 0303 	bic.w	r3, r3, #3
 800d7a4:	f043 0302 	orr.w	r3, r3, #2
 800d7a8:	81a3      	strh	r3, [r4, #12]
 800d7aa:	e7e3      	b.n	800d774 <__smakebuf_r+0xc>
 800d7ac:	4b0d      	ldr	r3, [pc, #52]	; (800d7e4 <__smakebuf_r+0x7c>)
 800d7ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7b0:	89a3      	ldrh	r3, [r4, #12]
 800d7b2:	6020      	str	r0, [r4, #0]
 800d7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7b8:	81a3      	strh	r3, [r4, #12]
 800d7ba:	9b00      	ldr	r3, [sp, #0]
 800d7bc:	6120      	str	r0, [r4, #16]
 800d7be:	6163      	str	r3, [r4, #20]
 800d7c0:	9b01      	ldr	r3, [sp, #4]
 800d7c2:	b15b      	cbz	r3, 800d7dc <__smakebuf_r+0x74>
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7ca:	f000 f8d1 	bl	800d970 <_isatty_r>
 800d7ce:	b128      	cbz	r0, 800d7dc <__smakebuf_r+0x74>
 800d7d0:	89a3      	ldrh	r3, [r4, #12]
 800d7d2:	f023 0303 	bic.w	r3, r3, #3
 800d7d6:	f043 0301 	orr.w	r3, r3, #1
 800d7da:	81a3      	strh	r3, [r4, #12]
 800d7dc:	89a0      	ldrh	r0, [r4, #12]
 800d7de:	4305      	orrs	r5, r0
 800d7e0:	81a5      	strh	r5, [r4, #12]
 800d7e2:	e7cd      	b.n	800d780 <__smakebuf_r+0x18>
 800d7e4:	0800d575 	.word	0x0800d575

0800d7e8 <_malloc_usable_size_r>:
 800d7e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ec:	1f18      	subs	r0, r3, #4
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	bfbc      	itt	lt
 800d7f2:	580b      	ldrlt	r3, [r1, r0]
 800d7f4:	18c0      	addlt	r0, r0, r3
 800d7f6:	4770      	bx	lr

0800d7f8 <_raise_r>:
 800d7f8:	291f      	cmp	r1, #31
 800d7fa:	b538      	push	{r3, r4, r5, lr}
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	460d      	mov	r5, r1
 800d800:	d904      	bls.n	800d80c <_raise_r+0x14>
 800d802:	2316      	movs	r3, #22
 800d804:	6003      	str	r3, [r0, #0]
 800d806:	f04f 30ff 	mov.w	r0, #4294967295
 800d80a:	bd38      	pop	{r3, r4, r5, pc}
 800d80c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d80e:	b112      	cbz	r2, 800d816 <_raise_r+0x1e>
 800d810:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d814:	b94b      	cbnz	r3, 800d82a <_raise_r+0x32>
 800d816:	4620      	mov	r0, r4
 800d818:	f000 f830 	bl	800d87c <_getpid_r>
 800d81c:	462a      	mov	r2, r5
 800d81e:	4601      	mov	r1, r0
 800d820:	4620      	mov	r0, r4
 800d822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d826:	f000 b817 	b.w	800d858 <_kill_r>
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d00a      	beq.n	800d844 <_raise_r+0x4c>
 800d82e:	1c59      	adds	r1, r3, #1
 800d830:	d103      	bne.n	800d83a <_raise_r+0x42>
 800d832:	2316      	movs	r3, #22
 800d834:	6003      	str	r3, [r0, #0]
 800d836:	2001      	movs	r0, #1
 800d838:	e7e7      	b.n	800d80a <_raise_r+0x12>
 800d83a:	2400      	movs	r4, #0
 800d83c:	4628      	mov	r0, r5
 800d83e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d842:	4798      	blx	r3
 800d844:	2000      	movs	r0, #0
 800d846:	e7e0      	b.n	800d80a <_raise_r+0x12>

0800d848 <raise>:
 800d848:	4b02      	ldr	r3, [pc, #8]	; (800d854 <raise+0xc>)
 800d84a:	4601      	mov	r1, r0
 800d84c:	6818      	ldr	r0, [r3, #0]
 800d84e:	f7ff bfd3 	b.w	800d7f8 <_raise_r>
 800d852:	bf00      	nop
 800d854:	200001d0 	.word	0x200001d0

0800d858 <_kill_r>:
 800d858:	b538      	push	{r3, r4, r5, lr}
 800d85a:	2300      	movs	r3, #0
 800d85c:	4d06      	ldr	r5, [pc, #24]	; (800d878 <_kill_r+0x20>)
 800d85e:	4604      	mov	r4, r0
 800d860:	4608      	mov	r0, r1
 800d862:	4611      	mov	r1, r2
 800d864:	602b      	str	r3, [r5, #0]
 800d866:	f7f3 ffcc 	bl	8001802 <_kill>
 800d86a:	1c43      	adds	r3, r0, #1
 800d86c:	d102      	bne.n	800d874 <_kill_r+0x1c>
 800d86e:	682b      	ldr	r3, [r5, #0]
 800d870:	b103      	cbz	r3, 800d874 <_kill_r+0x1c>
 800d872:	6023      	str	r3, [r4, #0]
 800d874:	bd38      	pop	{r3, r4, r5, pc}
 800d876:	bf00      	nop
 800d878:	200010fc 	.word	0x200010fc

0800d87c <_getpid_r>:
 800d87c:	f7f3 bfba 	b.w	80017f4 <_getpid>

0800d880 <__sread>:
 800d880:	b510      	push	{r4, lr}
 800d882:	460c      	mov	r4, r1
 800d884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d888:	f000 f894 	bl	800d9b4 <_read_r>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	bfab      	itete	ge
 800d890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d892:	89a3      	ldrhlt	r3, [r4, #12]
 800d894:	181b      	addge	r3, r3, r0
 800d896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d89a:	bfac      	ite	ge
 800d89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d89e:	81a3      	strhlt	r3, [r4, #12]
 800d8a0:	bd10      	pop	{r4, pc}

0800d8a2 <__swrite>:
 800d8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a6:	461f      	mov	r7, r3
 800d8a8:	898b      	ldrh	r3, [r1, #12]
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	05db      	lsls	r3, r3, #23
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	4616      	mov	r6, r2
 800d8b2:	d505      	bpl.n	800d8c0 <__swrite+0x1e>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8bc:	f000 f868 	bl	800d990 <_lseek_r>
 800d8c0:	89a3      	ldrh	r3, [r4, #12]
 800d8c2:	4632      	mov	r2, r6
 800d8c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8c8:	81a3      	strh	r3, [r4, #12]
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	463b      	mov	r3, r7
 800d8ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d6:	f000 b817 	b.w	800d908 <_write_r>

0800d8da <__sseek>:
 800d8da:	b510      	push	{r4, lr}
 800d8dc:	460c      	mov	r4, r1
 800d8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8e2:	f000 f855 	bl	800d990 <_lseek_r>
 800d8e6:	1c43      	adds	r3, r0, #1
 800d8e8:	89a3      	ldrh	r3, [r4, #12]
 800d8ea:	bf15      	itete	ne
 800d8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8f6:	81a3      	strheq	r3, [r4, #12]
 800d8f8:	bf18      	it	ne
 800d8fa:	81a3      	strhne	r3, [r4, #12]
 800d8fc:	bd10      	pop	{r4, pc}

0800d8fe <__sclose>:
 800d8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d902:	f000 b813 	b.w	800d92c <_close_r>
	...

0800d908 <_write_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4604      	mov	r4, r0
 800d90c:	4608      	mov	r0, r1
 800d90e:	4611      	mov	r1, r2
 800d910:	2200      	movs	r2, #0
 800d912:	4d05      	ldr	r5, [pc, #20]	; (800d928 <_write_r+0x20>)
 800d914:	602a      	str	r2, [r5, #0]
 800d916:	461a      	mov	r2, r3
 800d918:	f7f3 ffaa 	bl	8001870 <_write>
 800d91c:	1c43      	adds	r3, r0, #1
 800d91e:	d102      	bne.n	800d926 <_write_r+0x1e>
 800d920:	682b      	ldr	r3, [r5, #0]
 800d922:	b103      	cbz	r3, 800d926 <_write_r+0x1e>
 800d924:	6023      	str	r3, [r4, #0]
 800d926:	bd38      	pop	{r3, r4, r5, pc}
 800d928:	200010fc 	.word	0x200010fc

0800d92c <_close_r>:
 800d92c:	b538      	push	{r3, r4, r5, lr}
 800d92e:	2300      	movs	r3, #0
 800d930:	4d05      	ldr	r5, [pc, #20]	; (800d948 <_close_r+0x1c>)
 800d932:	4604      	mov	r4, r0
 800d934:	4608      	mov	r0, r1
 800d936:	602b      	str	r3, [r5, #0]
 800d938:	f7f3 ffb6 	bl	80018a8 <_close>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_close_r+0x1a>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_close_r+0x1a>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	200010fc 	.word	0x200010fc

0800d94c <_fstat_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	2300      	movs	r3, #0
 800d950:	4d06      	ldr	r5, [pc, #24]	; (800d96c <_fstat_r+0x20>)
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	4611      	mov	r1, r2
 800d958:	602b      	str	r3, [r5, #0]
 800d95a:	f7f3 ffb0 	bl	80018be <_fstat>
 800d95e:	1c43      	adds	r3, r0, #1
 800d960:	d102      	bne.n	800d968 <_fstat_r+0x1c>
 800d962:	682b      	ldr	r3, [r5, #0]
 800d964:	b103      	cbz	r3, 800d968 <_fstat_r+0x1c>
 800d966:	6023      	str	r3, [r4, #0]
 800d968:	bd38      	pop	{r3, r4, r5, pc}
 800d96a:	bf00      	nop
 800d96c:	200010fc 	.word	0x200010fc

0800d970 <_isatty_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	2300      	movs	r3, #0
 800d974:	4d05      	ldr	r5, [pc, #20]	; (800d98c <_isatty_r+0x1c>)
 800d976:	4604      	mov	r4, r0
 800d978:	4608      	mov	r0, r1
 800d97a:	602b      	str	r3, [r5, #0]
 800d97c:	f7f3 ffae 	bl	80018dc <_isatty>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_isatty_r+0x1a>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_isatty_r+0x1a>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	200010fc 	.word	0x200010fc

0800d990 <_lseek_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4604      	mov	r4, r0
 800d994:	4608      	mov	r0, r1
 800d996:	4611      	mov	r1, r2
 800d998:	2200      	movs	r2, #0
 800d99a:	4d05      	ldr	r5, [pc, #20]	; (800d9b0 <_lseek_r+0x20>)
 800d99c:	602a      	str	r2, [r5, #0]
 800d99e:	461a      	mov	r2, r3
 800d9a0:	f7f3 ffa6 	bl	80018f0 <_lseek>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d102      	bne.n	800d9ae <_lseek_r+0x1e>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	b103      	cbz	r3, 800d9ae <_lseek_r+0x1e>
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
 800d9b0:	200010fc 	.word	0x200010fc

0800d9b4 <_read_r>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	2200      	movs	r2, #0
 800d9be:	4d05      	ldr	r5, [pc, #20]	; (800d9d4 <_read_r+0x20>)
 800d9c0:	602a      	str	r2, [r5, #0]
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f7f3 ff37 	bl	8001836 <_read>
 800d9c8:	1c43      	adds	r3, r0, #1
 800d9ca:	d102      	bne.n	800d9d2 <_read_r+0x1e>
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	b103      	cbz	r3, 800d9d2 <_read_r+0x1e>
 800d9d0:	6023      	str	r3, [r4, #0]
 800d9d2:	bd38      	pop	{r3, r4, r5, pc}
 800d9d4:	200010fc 	.word	0x200010fc

0800d9d8 <cos>:
 800d9d8:	b530      	push	{r4, r5, lr}
 800d9da:	4a20      	ldr	r2, [pc, #128]	; (800da5c <cos+0x84>)
 800d9dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	b087      	sub	sp, #28
 800d9e4:	dc06      	bgt.n	800d9f4 <cos+0x1c>
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	b007      	add	sp, #28
 800d9ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9f0:	f000 ba76 	b.w	800dee0 <__kernel_cos>
 800d9f4:	4a1a      	ldr	r2, [pc, #104]	; (800da60 <cos+0x88>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	dd05      	ble.n	800da06 <cos+0x2e>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	f7f2 fbb3 	bl	8000168 <__aeabi_dsub>
 800da02:	b007      	add	sp, #28
 800da04:	bd30      	pop	{r4, r5, pc}
 800da06:	aa02      	add	r2, sp, #8
 800da08:	f000 f872 	bl	800daf0 <__ieee754_rem_pio2>
 800da0c:	f000 0003 	and.w	r0, r0, #3
 800da10:	2801      	cmp	r0, #1
 800da12:	d009      	beq.n	800da28 <cos+0x50>
 800da14:	2802      	cmp	r0, #2
 800da16:	d011      	beq.n	800da3c <cos+0x64>
 800da18:	b9b8      	cbnz	r0, 800da4a <cos+0x72>
 800da1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da22:	f000 fa5d 	bl	800dee0 <__kernel_cos>
 800da26:	e7ec      	b.n	800da02 <cos+0x2a>
 800da28:	9000      	str	r0, [sp, #0]
 800da2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da32:	f000 fe55 	bl	800e6e0 <__kernel_sin>
 800da36:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800da3a:	e7e2      	b.n	800da02 <cos+0x2a>
 800da3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da44:	f000 fa4c 	bl	800dee0 <__kernel_cos>
 800da48:	e7f5      	b.n	800da36 <cos+0x5e>
 800da4a:	2301      	movs	r3, #1
 800da4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da50:	9300      	str	r3, [sp, #0]
 800da52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da56:	f000 fe43 	bl	800e6e0 <__kernel_sin>
 800da5a:	e7d2      	b.n	800da02 <cos+0x2a>
 800da5c:	3fe921fb 	.word	0x3fe921fb
 800da60:	7fefffff 	.word	0x7fefffff

0800da64 <sin>:
 800da64:	b530      	push	{r4, r5, lr}
 800da66:	4a20      	ldr	r2, [pc, #128]	; (800dae8 <sin+0x84>)
 800da68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da6c:	4293      	cmp	r3, r2
 800da6e:	b087      	sub	sp, #28
 800da70:	dc06      	bgt.n	800da80 <sin+0x1c>
 800da72:	2300      	movs	r3, #0
 800da74:	2200      	movs	r2, #0
 800da76:	9300      	str	r3, [sp, #0]
 800da78:	2300      	movs	r3, #0
 800da7a:	f000 fe31 	bl	800e6e0 <__kernel_sin>
 800da7e:	e006      	b.n	800da8e <sin+0x2a>
 800da80:	4a1a      	ldr	r2, [pc, #104]	; (800daec <sin+0x88>)
 800da82:	4293      	cmp	r3, r2
 800da84:	dd05      	ble.n	800da92 <sin+0x2e>
 800da86:	4602      	mov	r2, r0
 800da88:	460b      	mov	r3, r1
 800da8a:	f7f2 fb6d 	bl	8000168 <__aeabi_dsub>
 800da8e:	b007      	add	sp, #28
 800da90:	bd30      	pop	{r4, r5, pc}
 800da92:	aa02      	add	r2, sp, #8
 800da94:	f000 f82c 	bl	800daf0 <__ieee754_rem_pio2>
 800da98:	f000 0003 	and.w	r0, r0, #3
 800da9c:	2801      	cmp	r0, #1
 800da9e:	d009      	beq.n	800dab4 <sin+0x50>
 800daa0:	2802      	cmp	r0, #2
 800daa2:	d00e      	beq.n	800dac2 <sin+0x5e>
 800daa4:	b9c0      	cbnz	r0, 800dad8 <sin+0x74>
 800daa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daaa:	2301      	movs	r3, #1
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dab2:	e7e2      	b.n	800da7a <sin+0x16>
 800dab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dabc:	f000 fa10 	bl	800dee0 <__kernel_cos>
 800dac0:	e7e5      	b.n	800da8e <sin+0x2a>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dace:	f000 fe07 	bl	800e6e0 <__kernel_sin>
 800dad2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800dad6:	e7da      	b.n	800da8e <sin+0x2a>
 800dad8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dae0:	f000 f9fe 	bl	800dee0 <__kernel_cos>
 800dae4:	e7f5      	b.n	800dad2 <sin+0x6e>
 800dae6:	bf00      	nop
 800dae8:	3fe921fb 	.word	0x3fe921fb
 800daec:	7fefffff 	.word	0x7fefffff

0800daf0 <__ieee754_rem_pio2>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	4614      	mov	r4, r2
 800daf6:	4ac4      	ldr	r2, [pc, #784]	; (800de08 <__ieee754_rem_pio2+0x318>)
 800daf8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800dafc:	b08d      	sub	sp, #52	; 0x34
 800dafe:	4592      	cmp	sl, r2
 800db00:	9104      	str	r1, [sp, #16]
 800db02:	dc07      	bgt.n	800db14 <__ieee754_rem_pio2+0x24>
 800db04:	2200      	movs	r2, #0
 800db06:	2300      	movs	r3, #0
 800db08:	e9c4 0100 	strd	r0, r1, [r4]
 800db0c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800db10:	2500      	movs	r5, #0
 800db12:	e024      	b.n	800db5e <__ieee754_rem_pio2+0x6e>
 800db14:	4abd      	ldr	r2, [pc, #756]	; (800de0c <__ieee754_rem_pio2+0x31c>)
 800db16:	4592      	cmp	sl, r2
 800db18:	dc72      	bgt.n	800dc00 <__ieee754_rem_pio2+0x110>
 800db1a:	9b04      	ldr	r3, [sp, #16]
 800db1c:	4dbc      	ldr	r5, [pc, #752]	; (800de10 <__ieee754_rem_pio2+0x320>)
 800db1e:	2b00      	cmp	r3, #0
 800db20:	a3ab      	add	r3, pc, #684	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2e0>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	dd36      	ble.n	800db96 <__ieee754_rem_pio2+0xa6>
 800db28:	f7f2 fb1e 	bl	8000168 <__aeabi_dsub>
 800db2c:	45aa      	cmp	sl, r5
 800db2e:	4606      	mov	r6, r0
 800db30:	460f      	mov	r7, r1
 800db32:	d018      	beq.n	800db66 <__ieee754_rem_pio2+0x76>
 800db34:	a3a8      	add	r3, pc, #672	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2e8>)
 800db36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3a:	f7f2 fb15 	bl	8000168 <__aeabi_dsub>
 800db3e:	4602      	mov	r2, r0
 800db40:	460b      	mov	r3, r1
 800db42:	4630      	mov	r0, r6
 800db44:	e9c4 2300 	strd	r2, r3, [r4]
 800db48:	4639      	mov	r1, r7
 800db4a:	f7f2 fb0d 	bl	8000168 <__aeabi_dsub>
 800db4e:	a3a2      	add	r3, pc, #648	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2e8>)
 800db50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db54:	f7f2 fb08 	bl	8000168 <__aeabi_dsub>
 800db58:	2501      	movs	r5, #1
 800db5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db5e:	4628      	mov	r0, r5
 800db60:	b00d      	add	sp, #52	; 0x34
 800db62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db66:	a39e      	add	r3, pc, #632	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x2f0>)
 800db68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6c:	f7f2 fafc 	bl	8000168 <__aeabi_dsub>
 800db70:	a39d      	add	r3, pc, #628	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x2f8>)
 800db72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db76:	4606      	mov	r6, r0
 800db78:	460f      	mov	r7, r1
 800db7a:	f7f2 faf5 	bl	8000168 <__aeabi_dsub>
 800db7e:	4602      	mov	r2, r0
 800db80:	460b      	mov	r3, r1
 800db82:	4630      	mov	r0, r6
 800db84:	e9c4 2300 	strd	r2, r3, [r4]
 800db88:	4639      	mov	r1, r7
 800db8a:	f7f2 faed 	bl	8000168 <__aeabi_dsub>
 800db8e:	a396      	add	r3, pc, #600	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x2f8>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	e7de      	b.n	800db54 <__ieee754_rem_pio2+0x64>
 800db96:	f7f2 fae9 	bl	800016c <__adddf3>
 800db9a:	45aa      	cmp	sl, r5
 800db9c:	4606      	mov	r6, r0
 800db9e:	460f      	mov	r7, r1
 800dba0:	d016      	beq.n	800dbd0 <__ieee754_rem_pio2+0xe0>
 800dba2:	a38d      	add	r3, pc, #564	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2e8>)
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	f7f2 fae0 	bl	800016c <__adddf3>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	e9c4 2300 	strd	r2, r3, [r4]
 800dbb6:	4639      	mov	r1, r7
 800dbb8:	f7f2 fad6 	bl	8000168 <__aeabi_dsub>
 800dbbc:	a386      	add	r3, pc, #536	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2e8>)
 800dbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc2:	f7f2 fad3 	bl	800016c <__adddf3>
 800dbc6:	f04f 35ff 	mov.w	r5, #4294967295
 800dbca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dbce:	e7c6      	b.n	800db5e <__ieee754_rem_pio2+0x6e>
 800dbd0:	a383      	add	r3, pc, #524	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x2f0>)
 800dbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd6:	f7f2 fac9 	bl	800016c <__adddf3>
 800dbda:	a383      	add	r3, pc, #524	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x2f8>)
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	4606      	mov	r6, r0
 800dbe2:	460f      	mov	r7, r1
 800dbe4:	f7f2 fac2 	bl	800016c <__adddf3>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	460b      	mov	r3, r1
 800dbec:	4630      	mov	r0, r6
 800dbee:	e9c4 2300 	strd	r2, r3, [r4]
 800dbf2:	4639      	mov	r1, r7
 800dbf4:	f7f2 fab8 	bl	8000168 <__aeabi_dsub>
 800dbf8:	a37b      	add	r3, pc, #492	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x2f8>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	e7e0      	b.n	800dbc2 <__ieee754_rem_pio2+0xd2>
 800dc00:	4a84      	ldr	r2, [pc, #528]	; (800de14 <__ieee754_rem_pio2+0x324>)
 800dc02:	4592      	cmp	sl, r2
 800dc04:	f300 80d5 	bgt.w	800ddb2 <__ieee754_rem_pio2+0x2c2>
 800dc08:	f000 fe20 	bl	800e84c <fabs>
 800dc0c:	a378      	add	r3, pc, #480	; (adr r3, 800ddf0 <__ieee754_rem_pio2+0x300>)
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	4606      	mov	r6, r0
 800dc14:	460f      	mov	r7, r1
 800dc16:	f7f2 fc5f 	bl	80004d8 <__aeabi_dmul>
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4b7e      	ldr	r3, [pc, #504]	; (800de18 <__ieee754_rem_pio2+0x328>)
 800dc1e:	f7f2 faa5 	bl	800016c <__adddf3>
 800dc22:	f7f2 ff09 	bl	8000a38 <__aeabi_d2iz>
 800dc26:	4605      	mov	r5, r0
 800dc28:	f7f2 fbec 	bl	8000404 <__aeabi_i2d>
 800dc2c:	4602      	mov	r2, r0
 800dc2e:	460b      	mov	r3, r1
 800dc30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc34:	a366      	add	r3, pc, #408	; (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2e0>)
 800dc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3a:	f7f2 fc4d 	bl	80004d8 <__aeabi_dmul>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	460b      	mov	r3, r1
 800dc42:	4630      	mov	r0, r6
 800dc44:	4639      	mov	r1, r7
 800dc46:	f7f2 fa8f 	bl	8000168 <__aeabi_dsub>
 800dc4a:	a363      	add	r3, pc, #396	; (adr r3, 800ddd8 <__ieee754_rem_pio2+0x2e8>)
 800dc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc50:	4680      	mov	r8, r0
 800dc52:	4689      	mov	r9, r1
 800dc54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc58:	f7f2 fc3e 	bl	80004d8 <__aeabi_dmul>
 800dc5c:	2d1f      	cmp	r5, #31
 800dc5e:	4606      	mov	r6, r0
 800dc60:	460f      	mov	r7, r1
 800dc62:	dc0e      	bgt.n	800dc82 <__ieee754_rem_pio2+0x192>
 800dc64:	4b6d      	ldr	r3, [pc, #436]	; (800de1c <__ieee754_rem_pio2+0x32c>)
 800dc66:	1e6a      	subs	r2, r5, #1
 800dc68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6c:	4553      	cmp	r3, sl
 800dc6e:	d008      	beq.n	800dc82 <__ieee754_rem_pio2+0x192>
 800dc70:	4632      	mov	r2, r6
 800dc72:	463b      	mov	r3, r7
 800dc74:	4640      	mov	r0, r8
 800dc76:	4649      	mov	r1, r9
 800dc78:	f7f2 fa76 	bl	8000168 <__aeabi_dsub>
 800dc7c:	e9c4 0100 	strd	r0, r1, [r4]
 800dc80:	e013      	b.n	800dcaa <__ieee754_rem_pio2+0x1ba>
 800dc82:	463b      	mov	r3, r7
 800dc84:	4632      	mov	r2, r6
 800dc86:	4640      	mov	r0, r8
 800dc88:	4649      	mov	r1, r9
 800dc8a:	f7f2 fa6d 	bl	8000168 <__aeabi_dsub>
 800dc8e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800dc92:	9305      	str	r3, [sp, #20]
 800dc94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc98:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800dc9c:	f1ba 0f10 	cmp.w	sl, #16
 800dca0:	dc1f      	bgt.n	800dce2 <__ieee754_rem_pio2+0x1f2>
 800dca2:	4602      	mov	r2, r0
 800dca4:	460b      	mov	r3, r1
 800dca6:	e9c4 2300 	strd	r2, r3, [r4]
 800dcaa:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800dcae:	4640      	mov	r0, r8
 800dcb0:	4653      	mov	r3, sl
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	f7f2 fa58 	bl	8000168 <__aeabi_dsub>
 800dcb8:	4632      	mov	r2, r6
 800dcba:	463b      	mov	r3, r7
 800dcbc:	f7f2 fa54 	bl	8000168 <__aeabi_dsub>
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dcc6:	9904      	ldr	r1, [sp, #16]
 800dcc8:	4602      	mov	r2, r0
 800dcca:	2900      	cmp	r1, #0
 800dccc:	f6bf af47 	bge.w	800db5e <__ieee754_rem_pio2+0x6e>
 800dcd0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800dcd4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dcd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dcdc:	60e3      	str	r3, [r4, #12]
 800dcde:	426d      	negs	r5, r5
 800dce0:	e73d      	b.n	800db5e <__ieee754_rem_pio2+0x6e>
 800dce2:	a33f      	add	r3, pc, #252	; (adr r3, 800dde0 <__ieee754_rem_pio2+0x2f0>)
 800dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcec:	f7f2 fbf4 	bl	80004d8 <__aeabi_dmul>
 800dcf0:	4606      	mov	r6, r0
 800dcf2:	460f      	mov	r7, r1
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	f7f2 fa34 	bl	8000168 <__aeabi_dsub>
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	4682      	mov	sl, r0
 800dd06:	468b      	mov	fp, r1
 800dd08:	4640      	mov	r0, r8
 800dd0a:	4649      	mov	r1, r9
 800dd0c:	f7f2 fa2c 	bl	8000168 <__aeabi_dsub>
 800dd10:	4632      	mov	r2, r6
 800dd12:	463b      	mov	r3, r7
 800dd14:	f7f2 fa28 	bl	8000168 <__aeabi_dsub>
 800dd18:	a333      	add	r3, pc, #204	; (adr r3, 800dde8 <__ieee754_rem_pio2+0x2f8>)
 800dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1e:	4606      	mov	r6, r0
 800dd20:	460f      	mov	r7, r1
 800dd22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd26:	f7f2 fbd7 	bl	80004d8 <__aeabi_dmul>
 800dd2a:	4632      	mov	r2, r6
 800dd2c:	463b      	mov	r3, r7
 800dd2e:	f7f2 fa1b 	bl	8000168 <__aeabi_dsub>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4606      	mov	r6, r0
 800dd38:	460f      	mov	r7, r1
 800dd3a:	4650      	mov	r0, sl
 800dd3c:	4659      	mov	r1, fp
 800dd3e:	f7f2 fa13 	bl	8000168 <__aeabi_dsub>
 800dd42:	9a05      	ldr	r2, [sp, #20]
 800dd44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd48:	1ad3      	subs	r3, r2, r3
 800dd4a:	2b31      	cmp	r3, #49	; 0x31
 800dd4c:	dc06      	bgt.n	800dd5c <__ieee754_rem_pio2+0x26c>
 800dd4e:	4602      	mov	r2, r0
 800dd50:	460b      	mov	r3, r1
 800dd52:	46d0      	mov	r8, sl
 800dd54:	46d9      	mov	r9, fp
 800dd56:	e9c4 2300 	strd	r2, r3, [r4]
 800dd5a:	e7a6      	b.n	800dcaa <__ieee754_rem_pio2+0x1ba>
 800dd5c:	a326      	add	r3, pc, #152	; (adr r3, 800ddf8 <__ieee754_rem_pio2+0x308>)
 800dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd66:	f7f2 fbb7 	bl	80004d8 <__aeabi_dmul>
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	460f      	mov	r7, r1
 800dd6e:	4602      	mov	r2, r0
 800dd70:	460b      	mov	r3, r1
 800dd72:	4650      	mov	r0, sl
 800dd74:	4659      	mov	r1, fp
 800dd76:	f7f2 f9f7 	bl	8000168 <__aeabi_dsub>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	4680      	mov	r8, r0
 800dd80:	4689      	mov	r9, r1
 800dd82:	4650      	mov	r0, sl
 800dd84:	4659      	mov	r1, fp
 800dd86:	f7f2 f9ef 	bl	8000168 <__aeabi_dsub>
 800dd8a:	4632      	mov	r2, r6
 800dd8c:	463b      	mov	r3, r7
 800dd8e:	f7f2 f9eb 	bl	8000168 <__aeabi_dsub>
 800dd92:	a31b      	add	r3, pc, #108	; (adr r3, 800de00 <__ieee754_rem_pio2+0x310>)
 800dd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd98:	4606      	mov	r6, r0
 800dd9a:	460f      	mov	r7, r1
 800dd9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dda0:	f7f2 fb9a 	bl	80004d8 <__aeabi_dmul>
 800dda4:	4632      	mov	r2, r6
 800dda6:	463b      	mov	r3, r7
 800dda8:	f7f2 f9de 	bl	8000168 <__aeabi_dsub>
 800ddac:	4606      	mov	r6, r0
 800ddae:	460f      	mov	r7, r1
 800ddb0:	e75e      	b.n	800dc70 <__ieee754_rem_pio2+0x180>
 800ddb2:	4a1b      	ldr	r2, [pc, #108]	; (800de20 <__ieee754_rem_pio2+0x330>)
 800ddb4:	4592      	cmp	sl, r2
 800ddb6:	dd35      	ble.n	800de24 <__ieee754_rem_pio2+0x334>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	460b      	mov	r3, r1
 800ddbc:	f7f2 f9d4 	bl	8000168 <__aeabi_dsub>
 800ddc0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ddc4:	e9c4 0100 	strd	r0, r1, [r4]
 800ddc8:	e6a2      	b.n	800db10 <__ieee754_rem_pio2+0x20>
 800ddca:	bf00      	nop
 800ddcc:	f3af 8000 	nop.w
 800ddd0:	54400000 	.word	0x54400000
 800ddd4:	3ff921fb 	.word	0x3ff921fb
 800ddd8:	1a626331 	.word	0x1a626331
 800dddc:	3dd0b461 	.word	0x3dd0b461
 800dde0:	1a600000 	.word	0x1a600000
 800dde4:	3dd0b461 	.word	0x3dd0b461
 800dde8:	2e037073 	.word	0x2e037073
 800ddec:	3ba3198a 	.word	0x3ba3198a
 800ddf0:	6dc9c883 	.word	0x6dc9c883
 800ddf4:	3fe45f30 	.word	0x3fe45f30
 800ddf8:	2e000000 	.word	0x2e000000
 800ddfc:	3ba3198a 	.word	0x3ba3198a
 800de00:	252049c1 	.word	0x252049c1
 800de04:	397b839a 	.word	0x397b839a
 800de08:	3fe921fb 	.word	0x3fe921fb
 800de0c:	4002d97b 	.word	0x4002d97b
 800de10:	3ff921fb 	.word	0x3ff921fb
 800de14:	413921fb 	.word	0x413921fb
 800de18:	3fe00000 	.word	0x3fe00000
 800de1c:	0800ef04 	.word	0x0800ef04
 800de20:	7fefffff 	.word	0x7fefffff
 800de24:	ea4f 552a 	mov.w	r5, sl, asr #20
 800de28:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800de2c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800de30:	460f      	mov	r7, r1
 800de32:	4606      	mov	r6, r0
 800de34:	f7f2 fe00 	bl	8000a38 <__aeabi_d2iz>
 800de38:	f7f2 fae4 	bl	8000404 <__aeabi_i2d>
 800de3c:	4602      	mov	r2, r0
 800de3e:	460b      	mov	r3, r1
 800de40:	4630      	mov	r0, r6
 800de42:	4639      	mov	r1, r7
 800de44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de48:	f7f2 f98e 	bl	8000168 <__aeabi_dsub>
 800de4c:	2200      	movs	r2, #0
 800de4e:	4b22      	ldr	r3, [pc, #136]	; (800ded8 <__ieee754_rem_pio2+0x3e8>)
 800de50:	f7f2 fb42 	bl	80004d8 <__aeabi_dmul>
 800de54:	460f      	mov	r7, r1
 800de56:	4606      	mov	r6, r0
 800de58:	f7f2 fdee 	bl	8000a38 <__aeabi_d2iz>
 800de5c:	f7f2 fad2 	bl	8000404 <__aeabi_i2d>
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	4630      	mov	r0, r6
 800de66:	4639      	mov	r1, r7
 800de68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de6c:	f7f2 f97c 	bl	8000168 <__aeabi_dsub>
 800de70:	2200      	movs	r2, #0
 800de72:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <__ieee754_rem_pio2+0x3e8>)
 800de74:	f7f2 fb30 	bl	80004d8 <__aeabi_dmul>
 800de78:	f04f 0803 	mov.w	r8, #3
 800de7c:	2600      	movs	r6, #0
 800de7e:	2700      	movs	r7, #0
 800de80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800de84:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800de88:	4632      	mov	r2, r6
 800de8a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800de8e:	463b      	mov	r3, r7
 800de90:	46c2      	mov	sl, r8
 800de92:	f108 38ff 	add.w	r8, r8, #4294967295
 800de96:	f7f2 fd87 	bl	80009a8 <__aeabi_dcmpeq>
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d1f4      	bne.n	800de88 <__ieee754_rem_pio2+0x398>
 800de9e:	4b0f      	ldr	r3, [pc, #60]	; (800dedc <__ieee754_rem_pio2+0x3ec>)
 800dea0:	462a      	mov	r2, r5
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	2302      	movs	r3, #2
 800dea6:	4621      	mov	r1, r4
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	a806      	add	r0, sp, #24
 800deac:	4653      	mov	r3, sl
 800deae:	f000 f8d5 	bl	800e05c <__kernel_rem_pio2>
 800deb2:	9b04      	ldr	r3, [sp, #16]
 800deb4:	4605      	mov	r5, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f6bf ae51 	bge.w	800db5e <__ieee754_rem_pio2+0x6e>
 800debc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800dec0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dec4:	e9c4 2300 	strd	r2, r3, [r4]
 800dec8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800decc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ded0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ded4:	e703      	b.n	800dcde <__ieee754_rem_pio2+0x1ee>
 800ded6:	bf00      	nop
 800ded8:	41700000 	.word	0x41700000
 800dedc:	0800ef84 	.word	0x0800ef84

0800dee0 <__kernel_cos>:
 800dee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dee8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800deec:	4680      	mov	r8, r0
 800deee:	460f      	mov	r7, r1
 800def0:	e9cd 2300 	strd	r2, r3, [sp]
 800def4:	da04      	bge.n	800df00 <__kernel_cos+0x20>
 800def6:	f7f2 fd9f 	bl	8000a38 <__aeabi_d2iz>
 800defa:	2800      	cmp	r0, #0
 800defc:	f000 8086 	beq.w	800e00c <__kernel_cos+0x12c>
 800df00:	4642      	mov	r2, r8
 800df02:	463b      	mov	r3, r7
 800df04:	4640      	mov	r0, r8
 800df06:	4639      	mov	r1, r7
 800df08:	f7f2 fae6 	bl	80004d8 <__aeabi_dmul>
 800df0c:	2200      	movs	r2, #0
 800df0e:	4b4e      	ldr	r3, [pc, #312]	; (800e048 <__kernel_cos+0x168>)
 800df10:	4604      	mov	r4, r0
 800df12:	460d      	mov	r5, r1
 800df14:	f7f2 fae0 	bl	80004d8 <__aeabi_dmul>
 800df18:	a33f      	add	r3, pc, #252	; (adr r3, 800e018 <__kernel_cos+0x138>)
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	4682      	mov	sl, r0
 800df20:	468b      	mov	fp, r1
 800df22:	4620      	mov	r0, r4
 800df24:	4629      	mov	r1, r5
 800df26:	f7f2 fad7 	bl	80004d8 <__aeabi_dmul>
 800df2a:	a33d      	add	r3, pc, #244	; (adr r3, 800e020 <__kernel_cos+0x140>)
 800df2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df30:	f7f2 f91c 	bl	800016c <__adddf3>
 800df34:	4622      	mov	r2, r4
 800df36:	462b      	mov	r3, r5
 800df38:	f7f2 face 	bl	80004d8 <__aeabi_dmul>
 800df3c:	a33a      	add	r3, pc, #232	; (adr r3, 800e028 <__kernel_cos+0x148>)
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f7f2 f911 	bl	8000168 <__aeabi_dsub>
 800df46:	4622      	mov	r2, r4
 800df48:	462b      	mov	r3, r5
 800df4a:	f7f2 fac5 	bl	80004d8 <__aeabi_dmul>
 800df4e:	a338      	add	r3, pc, #224	; (adr r3, 800e030 <__kernel_cos+0x150>)
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	f7f2 f90a 	bl	800016c <__adddf3>
 800df58:	4622      	mov	r2, r4
 800df5a:	462b      	mov	r3, r5
 800df5c:	f7f2 fabc 	bl	80004d8 <__aeabi_dmul>
 800df60:	a335      	add	r3, pc, #212	; (adr r3, 800e038 <__kernel_cos+0x158>)
 800df62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df66:	f7f2 f8ff 	bl	8000168 <__aeabi_dsub>
 800df6a:	4622      	mov	r2, r4
 800df6c:	462b      	mov	r3, r5
 800df6e:	f7f2 fab3 	bl	80004d8 <__aeabi_dmul>
 800df72:	a333      	add	r3, pc, #204	; (adr r3, 800e040 <__kernel_cos+0x160>)
 800df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df78:	f7f2 f8f8 	bl	800016c <__adddf3>
 800df7c:	4622      	mov	r2, r4
 800df7e:	462b      	mov	r3, r5
 800df80:	f7f2 faaa 	bl	80004d8 <__aeabi_dmul>
 800df84:	4622      	mov	r2, r4
 800df86:	462b      	mov	r3, r5
 800df88:	f7f2 faa6 	bl	80004d8 <__aeabi_dmul>
 800df8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df90:	4604      	mov	r4, r0
 800df92:	460d      	mov	r5, r1
 800df94:	4640      	mov	r0, r8
 800df96:	4639      	mov	r1, r7
 800df98:	f7f2 fa9e 	bl	80004d8 <__aeabi_dmul>
 800df9c:	460b      	mov	r3, r1
 800df9e:	4602      	mov	r2, r0
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f7f2 f8e0 	bl	8000168 <__aeabi_dsub>
 800dfa8:	4b28      	ldr	r3, [pc, #160]	; (800e04c <__kernel_cos+0x16c>)
 800dfaa:	4680      	mov	r8, r0
 800dfac:	429e      	cmp	r6, r3
 800dfae:	4689      	mov	r9, r1
 800dfb0:	dc0e      	bgt.n	800dfd0 <__kernel_cos+0xf0>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4650      	mov	r0, sl
 800dfb8:	4659      	mov	r1, fp
 800dfba:	f7f2 f8d5 	bl	8000168 <__aeabi_dsub>
 800dfbe:	4602      	mov	r2, r0
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	4922      	ldr	r1, [pc, #136]	; (800e050 <__kernel_cos+0x170>)
 800dfc6:	f7f2 f8cf 	bl	8000168 <__aeabi_dsub>
 800dfca:	b003      	add	sp, #12
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd0:	2400      	movs	r4, #0
 800dfd2:	4b20      	ldr	r3, [pc, #128]	; (800e054 <__kernel_cos+0x174>)
 800dfd4:	4622      	mov	r2, r4
 800dfd6:	429e      	cmp	r6, r3
 800dfd8:	bfcc      	ite	gt
 800dfda:	4d1f      	ldrgt	r5, [pc, #124]	; (800e058 <__kernel_cos+0x178>)
 800dfdc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800dfe0:	462b      	mov	r3, r5
 800dfe2:	2000      	movs	r0, #0
 800dfe4:	491a      	ldr	r1, [pc, #104]	; (800e050 <__kernel_cos+0x170>)
 800dfe6:	f7f2 f8bf 	bl	8000168 <__aeabi_dsub>
 800dfea:	4622      	mov	r2, r4
 800dfec:	4606      	mov	r6, r0
 800dfee:	460f      	mov	r7, r1
 800dff0:	462b      	mov	r3, r5
 800dff2:	4650      	mov	r0, sl
 800dff4:	4659      	mov	r1, fp
 800dff6:	f7f2 f8b7 	bl	8000168 <__aeabi_dsub>
 800dffa:	4642      	mov	r2, r8
 800dffc:	464b      	mov	r3, r9
 800dffe:	f7f2 f8b3 	bl	8000168 <__aeabi_dsub>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4630      	mov	r0, r6
 800e008:	4639      	mov	r1, r7
 800e00a:	e7dc      	b.n	800dfc6 <__kernel_cos+0xe6>
 800e00c:	2000      	movs	r0, #0
 800e00e:	4910      	ldr	r1, [pc, #64]	; (800e050 <__kernel_cos+0x170>)
 800e010:	e7db      	b.n	800dfca <__kernel_cos+0xea>
 800e012:	bf00      	nop
 800e014:	f3af 8000 	nop.w
 800e018:	be8838d4 	.word	0xbe8838d4
 800e01c:	bda8fae9 	.word	0xbda8fae9
 800e020:	bdb4b1c4 	.word	0xbdb4b1c4
 800e024:	3e21ee9e 	.word	0x3e21ee9e
 800e028:	809c52ad 	.word	0x809c52ad
 800e02c:	3e927e4f 	.word	0x3e927e4f
 800e030:	19cb1590 	.word	0x19cb1590
 800e034:	3efa01a0 	.word	0x3efa01a0
 800e038:	16c15177 	.word	0x16c15177
 800e03c:	3f56c16c 	.word	0x3f56c16c
 800e040:	5555554c 	.word	0x5555554c
 800e044:	3fa55555 	.word	0x3fa55555
 800e048:	3fe00000 	.word	0x3fe00000
 800e04c:	3fd33332 	.word	0x3fd33332
 800e050:	3ff00000 	.word	0x3ff00000
 800e054:	3fe90000 	.word	0x3fe90000
 800e058:	3fd20000 	.word	0x3fd20000

0800e05c <__kernel_rem_pio2>:
 800e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e064:	9308      	str	r3, [sp, #32]
 800e066:	9106      	str	r1, [sp, #24]
 800e068:	4bb6      	ldr	r3, [pc, #728]	; (800e344 <__kernel_rem_pio2+0x2e8>)
 800e06a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e06c:	f112 0f14 	cmn.w	r2, #20
 800e070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e074:	bfa8      	it	ge
 800e076:	1ed4      	subge	r4, r2, #3
 800e078:	9302      	str	r3, [sp, #8]
 800e07a:	9b08      	ldr	r3, [sp, #32]
 800e07c:	bfb8      	it	lt
 800e07e:	2400      	movlt	r4, #0
 800e080:	f103 33ff 	add.w	r3, r3, #4294967295
 800e084:	9307      	str	r3, [sp, #28]
 800e086:	bfa4      	itt	ge
 800e088:	2318      	movge	r3, #24
 800e08a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e08e:	f06f 0317 	mvn.w	r3, #23
 800e092:	fb04 3303 	mla	r3, r4, r3, r3
 800e096:	eb03 0b02 	add.w	fp, r3, r2
 800e09a:	9a07      	ldr	r2, [sp, #28]
 800e09c:	9b02      	ldr	r3, [sp, #8]
 800e09e:	1aa7      	subs	r7, r4, r2
 800e0a0:	eb03 0802 	add.w	r8, r3, r2
 800e0a4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e0a6:	2500      	movs	r5, #0
 800e0a8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	9009      	str	r0, [sp, #36]	; 0x24
 800e0b2:	ae20      	add	r6, sp, #128	; 0x80
 800e0b4:	4545      	cmp	r5, r8
 800e0b6:	dd14      	ble.n	800e0e2 <__kernel_rem_pio2+0x86>
 800e0b8:	f04f 0800 	mov.w	r8, #0
 800e0bc:	9a08      	ldr	r2, [sp, #32]
 800e0be:	ab20      	add	r3, sp, #128	; 0x80
 800e0c0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800e0c4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800e0c8:	9b02      	ldr	r3, [sp, #8]
 800e0ca:	4598      	cmp	r8, r3
 800e0cc:	dc35      	bgt.n	800e13a <__kernel_rem_pio2+0xde>
 800e0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f1a3 0908 	sub.w	r9, r3, #8
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	462f      	mov	r7, r5
 800e0da:	2600      	movs	r6, #0
 800e0dc:	e9cd 2300 	strd	r2, r3, [sp]
 800e0e0:	e01f      	b.n	800e122 <__kernel_rem_pio2+0xc6>
 800e0e2:	42ef      	cmn	r7, r5
 800e0e4:	d40b      	bmi.n	800e0fe <__kernel_rem_pio2+0xa2>
 800e0e6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e0ea:	e9cd 2300 	strd	r2, r3, [sp]
 800e0ee:	f7f2 f989 	bl	8000404 <__aeabi_i2d>
 800e0f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0f6:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e0fa:	3501      	adds	r5, #1
 800e0fc:	e7da      	b.n	800e0b4 <__kernel_rem_pio2+0x58>
 800e0fe:	4610      	mov	r0, r2
 800e100:	4619      	mov	r1, r3
 800e102:	e7f8      	b.n	800e0f6 <__kernel_rem_pio2+0x9a>
 800e104:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e108:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800e10c:	f7f2 f9e4 	bl	80004d8 <__aeabi_dmul>
 800e110:	4602      	mov	r2, r0
 800e112:	460b      	mov	r3, r1
 800e114:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e118:	f7f2 f828 	bl	800016c <__adddf3>
 800e11c:	e9cd 0100 	strd	r0, r1, [sp]
 800e120:	3601      	adds	r6, #1
 800e122:	9b07      	ldr	r3, [sp, #28]
 800e124:	3f08      	subs	r7, #8
 800e126:	429e      	cmp	r6, r3
 800e128:	ddec      	ble.n	800e104 <__kernel_rem_pio2+0xa8>
 800e12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e12e:	f108 0801 	add.w	r8, r8, #1
 800e132:	e8ea 2302 	strd	r2, r3, [sl], #8
 800e136:	3508      	adds	r5, #8
 800e138:	e7c6      	b.n	800e0c8 <__kernel_rem_pio2+0x6c>
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	aa0c      	add	r2, sp, #48	; 0x30
 800e13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e142:	930b      	str	r3, [sp, #44]	; 0x2c
 800e144:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e146:	9e02      	ldr	r6, [sp, #8]
 800e148:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e14c:	930a      	str	r3, [sp, #40]	; 0x28
 800e14e:	ab98      	add	r3, sp, #608	; 0x260
 800e150:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e154:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800e158:	ab70      	add	r3, sp, #448	; 0x1c0
 800e15a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800e15e:	46d0      	mov	r8, sl
 800e160:	46b1      	mov	r9, r6
 800e162:	af0c      	add	r7, sp, #48	; 0x30
 800e164:	9700      	str	r7, [sp, #0]
 800e166:	f1b9 0f00 	cmp.w	r9, #0
 800e16a:	f1a8 0808 	sub.w	r8, r8, #8
 800e16e:	dc71      	bgt.n	800e254 <__kernel_rem_pio2+0x1f8>
 800e170:	465a      	mov	r2, fp
 800e172:	4620      	mov	r0, r4
 800e174:	4629      	mov	r1, r5
 800e176:	f000 fbef 	bl	800e958 <scalbn>
 800e17a:	2200      	movs	r2, #0
 800e17c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e180:	4604      	mov	r4, r0
 800e182:	460d      	mov	r5, r1
 800e184:	f7f2 f9a8 	bl	80004d8 <__aeabi_dmul>
 800e188:	f000 fb66 	bl	800e858 <floor>
 800e18c:	2200      	movs	r2, #0
 800e18e:	4b6e      	ldr	r3, [pc, #440]	; (800e348 <__kernel_rem_pio2+0x2ec>)
 800e190:	f7f2 f9a2 	bl	80004d8 <__aeabi_dmul>
 800e194:	4602      	mov	r2, r0
 800e196:	460b      	mov	r3, r1
 800e198:	4620      	mov	r0, r4
 800e19a:	4629      	mov	r1, r5
 800e19c:	f7f1 ffe4 	bl	8000168 <__aeabi_dsub>
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	f7f2 fc48 	bl	8000a38 <__aeabi_d2iz>
 800e1a8:	9004      	str	r0, [sp, #16]
 800e1aa:	f7f2 f92b 	bl	8000404 <__aeabi_i2d>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	f7f1 ffd7 	bl	8000168 <__aeabi_dsub>
 800e1ba:	f1bb 0f00 	cmp.w	fp, #0
 800e1be:	4680      	mov	r8, r0
 800e1c0:	4689      	mov	r9, r1
 800e1c2:	dd70      	ble.n	800e2a6 <__kernel_rem_pio2+0x24a>
 800e1c4:	1e72      	subs	r2, r6, #1
 800e1c6:	ab0c      	add	r3, sp, #48	; 0x30
 800e1c8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e1cc:	9c04      	ldr	r4, [sp, #16]
 800e1ce:	f1cb 0118 	rsb	r1, fp, #24
 800e1d2:	fa40 f301 	asr.w	r3, r0, r1
 800e1d6:	441c      	add	r4, r3
 800e1d8:	408b      	lsls	r3, r1
 800e1da:	1ac0      	subs	r0, r0, r3
 800e1dc:	ab0c      	add	r3, sp, #48	; 0x30
 800e1de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e1e2:	f1cb 0317 	rsb	r3, fp, #23
 800e1e6:	9404      	str	r4, [sp, #16]
 800e1e8:	fa40 f303 	asr.w	r3, r0, r3
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	9b00      	ldr	r3, [sp, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dd66      	ble.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e1fa:	4614      	mov	r4, r2
 800e1fc:	9b04      	ldr	r3, [sp, #16]
 800e1fe:	3301      	adds	r3, #1
 800e200:	9304      	str	r3, [sp, #16]
 800e202:	4296      	cmp	r6, r2
 800e204:	f300 80ac 	bgt.w	800e360 <__kernel_rem_pio2+0x304>
 800e208:	f1bb 0f00 	cmp.w	fp, #0
 800e20c:	dd07      	ble.n	800e21e <__kernel_rem_pio2+0x1c2>
 800e20e:	f1bb 0f01 	cmp.w	fp, #1
 800e212:	f000 80b4 	beq.w	800e37e <__kernel_rem_pio2+0x322>
 800e216:	f1bb 0f02 	cmp.w	fp, #2
 800e21a:	f000 80ba 	beq.w	800e392 <__kernel_rem_pio2+0x336>
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	2b02      	cmp	r3, #2
 800e222:	d14e      	bne.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e224:	4642      	mov	r2, r8
 800e226:	464b      	mov	r3, r9
 800e228:	2000      	movs	r0, #0
 800e22a:	4948      	ldr	r1, [pc, #288]	; (800e34c <__kernel_rem_pio2+0x2f0>)
 800e22c:	f7f1 ff9c 	bl	8000168 <__aeabi_dsub>
 800e230:	4680      	mov	r8, r0
 800e232:	4689      	mov	r9, r1
 800e234:	2c00      	cmp	r4, #0
 800e236:	d044      	beq.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e238:	465a      	mov	r2, fp
 800e23a:	2000      	movs	r0, #0
 800e23c:	4943      	ldr	r1, [pc, #268]	; (800e34c <__kernel_rem_pio2+0x2f0>)
 800e23e:	f000 fb8b 	bl	800e958 <scalbn>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	4640      	mov	r0, r8
 800e248:	4649      	mov	r1, r9
 800e24a:	f7f1 ff8d 	bl	8000168 <__aeabi_dsub>
 800e24e:	4680      	mov	r8, r0
 800e250:	4689      	mov	r9, r1
 800e252:	e036      	b.n	800e2c2 <__kernel_rem_pio2+0x266>
 800e254:	2200      	movs	r2, #0
 800e256:	4b3e      	ldr	r3, [pc, #248]	; (800e350 <__kernel_rem_pio2+0x2f4>)
 800e258:	4620      	mov	r0, r4
 800e25a:	4629      	mov	r1, r5
 800e25c:	f7f2 f93c 	bl	80004d8 <__aeabi_dmul>
 800e260:	f7f2 fbea 	bl	8000a38 <__aeabi_d2iz>
 800e264:	f7f2 f8ce 	bl	8000404 <__aeabi_i2d>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e270:	2200      	movs	r2, #0
 800e272:	4b38      	ldr	r3, [pc, #224]	; (800e354 <__kernel_rem_pio2+0x2f8>)
 800e274:	f7f2 f930 	bl	80004d8 <__aeabi_dmul>
 800e278:	4602      	mov	r2, r0
 800e27a:	460b      	mov	r3, r1
 800e27c:	4620      	mov	r0, r4
 800e27e:	4629      	mov	r1, r5
 800e280:	f7f1 ff72 	bl	8000168 <__aeabi_dsub>
 800e284:	f7f2 fbd8 	bl	8000a38 <__aeabi_d2iz>
 800e288:	9b00      	ldr	r3, [sp, #0]
 800e28a:	f109 39ff 	add.w	r9, r9, #4294967295
 800e28e:	f843 0b04 	str.w	r0, [r3], #4
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e298:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e29c:	f7f1 ff66 	bl	800016c <__adddf3>
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	e75f      	b.n	800e166 <__kernel_rem_pio2+0x10a>
 800e2a6:	d105      	bne.n	800e2b4 <__kernel_rem_pio2+0x258>
 800e2a8:	1e73      	subs	r3, r6, #1
 800e2aa:	aa0c      	add	r2, sp, #48	; 0x30
 800e2ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e2b0:	15c3      	asrs	r3, r0, #23
 800e2b2:	e79b      	b.n	800e1ec <__kernel_rem_pio2+0x190>
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	4b28      	ldr	r3, [pc, #160]	; (800e358 <__kernel_rem_pio2+0x2fc>)
 800e2b8:	f7f2 fb94 	bl	80009e4 <__aeabi_dcmpge>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d13e      	bne.n	800e33e <__kernel_rem_pio2+0x2e2>
 800e2c0:	9000      	str	r0, [sp, #0]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	f7f2 fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f000 80b1 	beq.w	800e436 <__kernel_rem_pio2+0x3da>
 800e2d4:	1e74      	subs	r4, r6, #1
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	2200      	movs	r2, #0
 800e2da:	9902      	ldr	r1, [sp, #8]
 800e2dc:	428b      	cmp	r3, r1
 800e2de:	da5f      	bge.n	800e3a0 <__kernel_rem_pio2+0x344>
 800e2e0:	2a00      	cmp	r2, #0
 800e2e2:	d074      	beq.n	800e3ce <__kernel_rem_pio2+0x372>
 800e2e4:	ab0c      	add	r3, sp, #48	; 0x30
 800e2e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e2ea:	f1ab 0b18 	sub.w	fp, fp, #24
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 809f 	beq.w	800e432 <__kernel_rem_pio2+0x3d6>
 800e2f4:	465a      	mov	r2, fp
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	4914      	ldr	r1, [pc, #80]	; (800e34c <__kernel_rem_pio2+0x2f0>)
 800e2fa:	f000 fb2d 	bl	800e958 <scalbn>
 800e2fe:	46a2      	mov	sl, r4
 800e300:	4606      	mov	r6, r0
 800e302:	460f      	mov	r7, r1
 800e304:	f04f 0800 	mov.w	r8, #0
 800e308:	ab70      	add	r3, sp, #448	; 0x1c0
 800e30a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800e350 <__kernel_rem_pio2+0x2f4>
 800e30e:	00e5      	lsls	r5, r4, #3
 800e310:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800e314:	f1ba 0f00 	cmp.w	sl, #0
 800e318:	f280 80c3 	bge.w	800e4a2 <__kernel_rem_pio2+0x446>
 800e31c:	4626      	mov	r6, r4
 800e31e:	2e00      	cmp	r6, #0
 800e320:	f2c0 80f5 	blt.w	800e50e <__kernel_rem_pio2+0x4b2>
 800e324:	4b0d      	ldr	r3, [pc, #52]	; (800e35c <__kernel_rem_pio2+0x300>)
 800e326:	f04f 0a00 	mov.w	sl, #0
 800e32a:	9307      	str	r3, [sp, #28]
 800e32c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e32e:	f04f 0b00 	mov.w	fp, #0
 800e332:	f04f 0800 	mov.w	r8, #0
 800e336:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e33a:	1ba7      	subs	r7, r4, r6
 800e33c:	e0db      	b.n	800e4f6 <__kernel_rem_pio2+0x49a>
 800e33e:	2302      	movs	r3, #2
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	e757      	b.n	800e1f4 <__kernel_rem_pio2+0x198>
 800e344:	0800f0d0 	.word	0x0800f0d0
 800e348:	40200000 	.word	0x40200000
 800e34c:	3ff00000 	.word	0x3ff00000
 800e350:	3e700000 	.word	0x3e700000
 800e354:	41700000 	.word	0x41700000
 800e358:	3fe00000 	.word	0x3fe00000
 800e35c:	0800f090 	.word	0x0800f090
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	b944      	cbnz	r4, 800e376 <__kernel_rem_pio2+0x31a>
 800e364:	b11b      	cbz	r3, 800e36e <__kernel_rem_pio2+0x312>
 800e366:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e36a:	603b      	str	r3, [r7, #0]
 800e36c:	2301      	movs	r3, #1
 800e36e:	461c      	mov	r4, r3
 800e370:	3201      	adds	r2, #1
 800e372:	3704      	adds	r7, #4
 800e374:	e745      	b.n	800e202 <__kernel_rem_pio2+0x1a6>
 800e376:	1acb      	subs	r3, r1, r3
 800e378:	603b      	str	r3, [r7, #0]
 800e37a:	4623      	mov	r3, r4
 800e37c:	e7f7      	b.n	800e36e <__kernel_rem_pio2+0x312>
 800e37e:	1e72      	subs	r2, r6, #1
 800e380:	ab0c      	add	r3, sp, #48	; 0x30
 800e382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e386:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e38a:	a90c      	add	r1, sp, #48	; 0x30
 800e38c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e390:	e745      	b.n	800e21e <__kernel_rem_pio2+0x1c2>
 800e392:	1e72      	subs	r2, r6, #1
 800e394:	ab0c      	add	r3, sp, #48	; 0x30
 800e396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e39a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e39e:	e7f4      	b.n	800e38a <__kernel_rem_pio2+0x32e>
 800e3a0:	a90c      	add	r1, sp, #48	; 0x30
 800e3a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	e796      	b.n	800e2da <__kernel_rem_pio2+0x27e>
 800e3ac:	3401      	adds	r4, #1
 800e3ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e3b2:	2a00      	cmp	r2, #0
 800e3b4:	d0fa      	beq.n	800e3ac <__kernel_rem_pio2+0x350>
 800e3b6:	9b08      	ldr	r3, [sp, #32]
 800e3b8:	f106 0801 	add.w	r8, r6, #1
 800e3bc:	18f5      	adds	r5, r6, r3
 800e3be:	ab20      	add	r3, sp, #128	; 0x80
 800e3c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e3c4:	4434      	add	r4, r6
 800e3c6:	4544      	cmp	r4, r8
 800e3c8:	da04      	bge.n	800e3d4 <__kernel_rem_pio2+0x378>
 800e3ca:	4626      	mov	r6, r4
 800e3cc:	e6bf      	b.n	800e14e <__kernel_rem_pio2+0xf2>
 800e3ce:	2401      	movs	r4, #1
 800e3d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3d2:	e7ec      	b.n	800e3ae <__kernel_rem_pio2+0x352>
 800e3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3d6:	f04f 0900 	mov.w	r9, #0
 800e3da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e3de:	f7f2 f811 	bl	8000404 <__aeabi_i2d>
 800e3e2:	2600      	movs	r6, #0
 800e3e4:	2700      	movs	r7, #0
 800e3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e8:	e9c5 0100 	strd	r0, r1, [r5]
 800e3ec:	3b08      	subs	r3, #8
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	9504      	str	r5, [sp, #16]
 800e3f2:	9b07      	ldr	r3, [sp, #28]
 800e3f4:	4599      	cmp	r9, r3
 800e3f6:	dd05      	ble.n	800e404 <__kernel_rem_pio2+0x3a8>
 800e3f8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800e3fc:	f108 0801 	add.w	r8, r8, #1
 800e400:	3508      	adds	r5, #8
 800e402:	e7e0      	b.n	800e3c6 <__kernel_rem_pio2+0x36a>
 800e404:	f8dd c010 	ldr.w	ip, [sp, #16]
 800e408:	9900      	ldr	r1, [sp, #0]
 800e40a:	f109 0901 	add.w	r9, r9, #1
 800e40e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800e412:	9100      	str	r1, [sp, #0]
 800e414:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800e418:	f8cd c010 	str.w	ip, [sp, #16]
 800e41c:	f7f2 f85c 	bl	80004d8 <__aeabi_dmul>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4630      	mov	r0, r6
 800e426:	4639      	mov	r1, r7
 800e428:	f7f1 fea0 	bl	800016c <__adddf3>
 800e42c:	4606      	mov	r6, r0
 800e42e:	460f      	mov	r7, r1
 800e430:	e7df      	b.n	800e3f2 <__kernel_rem_pio2+0x396>
 800e432:	3c01      	subs	r4, #1
 800e434:	e756      	b.n	800e2e4 <__kernel_rem_pio2+0x288>
 800e436:	f1cb 0200 	rsb	r2, fp, #0
 800e43a:	4640      	mov	r0, r8
 800e43c:	4649      	mov	r1, r9
 800e43e:	f000 fa8b 	bl	800e958 <scalbn>
 800e442:	2200      	movs	r2, #0
 800e444:	4ba4      	ldr	r3, [pc, #656]	; (800e6d8 <__kernel_rem_pio2+0x67c>)
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
 800e44a:	f7f2 facb 	bl	80009e4 <__aeabi_dcmpge>
 800e44e:	b1f8      	cbz	r0, 800e490 <__kernel_rem_pio2+0x434>
 800e450:	2200      	movs	r2, #0
 800e452:	4ba2      	ldr	r3, [pc, #648]	; (800e6dc <__kernel_rem_pio2+0x680>)
 800e454:	4620      	mov	r0, r4
 800e456:	4629      	mov	r1, r5
 800e458:	f7f2 f83e 	bl	80004d8 <__aeabi_dmul>
 800e45c:	f7f2 faec 	bl	8000a38 <__aeabi_d2iz>
 800e460:	4607      	mov	r7, r0
 800e462:	f7f1 ffcf 	bl	8000404 <__aeabi_i2d>
 800e466:	2200      	movs	r2, #0
 800e468:	4b9b      	ldr	r3, [pc, #620]	; (800e6d8 <__kernel_rem_pio2+0x67c>)
 800e46a:	f7f2 f835 	bl	80004d8 <__aeabi_dmul>
 800e46e:	460b      	mov	r3, r1
 800e470:	4602      	mov	r2, r0
 800e472:	4629      	mov	r1, r5
 800e474:	4620      	mov	r0, r4
 800e476:	f7f1 fe77 	bl	8000168 <__aeabi_dsub>
 800e47a:	f7f2 fadd 	bl	8000a38 <__aeabi_d2iz>
 800e47e:	1c74      	adds	r4, r6, #1
 800e480:	ab0c      	add	r3, sp, #48	; 0x30
 800e482:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e486:	f10b 0b18 	add.w	fp, fp, #24
 800e48a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800e48e:	e731      	b.n	800e2f4 <__kernel_rem_pio2+0x298>
 800e490:	4620      	mov	r0, r4
 800e492:	4629      	mov	r1, r5
 800e494:	f7f2 fad0 	bl	8000a38 <__aeabi_d2iz>
 800e498:	ab0c      	add	r3, sp, #48	; 0x30
 800e49a:	4634      	mov	r4, r6
 800e49c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800e4a0:	e728      	b.n	800e2f4 <__kernel_rem_pio2+0x298>
 800e4a2:	ab0c      	add	r3, sp, #48	; 0x30
 800e4a4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e4a8:	f7f1 ffac 	bl	8000404 <__aeabi_i2d>
 800e4ac:	4632      	mov	r2, r6
 800e4ae:	463b      	mov	r3, r7
 800e4b0:	f7f2 f812 	bl	80004d8 <__aeabi_dmul>
 800e4b4:	4642      	mov	r2, r8
 800e4b6:	e86b 0102 	strd	r0, r1, [fp], #-8
 800e4ba:	464b      	mov	r3, r9
 800e4bc:	4630      	mov	r0, r6
 800e4be:	4639      	mov	r1, r7
 800e4c0:	f7f2 f80a 	bl	80004d8 <__aeabi_dmul>
 800e4c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4c8:	4606      	mov	r6, r0
 800e4ca:	460f      	mov	r7, r1
 800e4cc:	e722      	b.n	800e314 <__kernel_rem_pio2+0x2b8>
 800e4ce:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800e4d2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e4d6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800e4da:	f8cd c01c 	str.w	ip, [sp, #28]
 800e4de:	f7f1 fffb 	bl	80004d8 <__aeabi_dmul>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	460b      	mov	r3, r1
 800e4e6:	4650      	mov	r0, sl
 800e4e8:	4659      	mov	r1, fp
 800e4ea:	f7f1 fe3f 	bl	800016c <__adddf3>
 800e4ee:	4682      	mov	sl, r0
 800e4f0:	468b      	mov	fp, r1
 800e4f2:	f108 0801 	add.w	r8, r8, #1
 800e4f6:	9b02      	ldr	r3, [sp, #8]
 800e4f8:	4598      	cmp	r8, r3
 800e4fa:	dc01      	bgt.n	800e500 <__kernel_rem_pio2+0x4a4>
 800e4fc:	45b8      	cmp	r8, r7
 800e4fe:	dde6      	ble.n	800e4ce <__kernel_rem_pio2+0x472>
 800e500:	ab48      	add	r3, sp, #288	; 0x120
 800e502:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e506:	e9c7 ab00 	strd	sl, fp, [r7]
 800e50a:	3e01      	subs	r6, #1
 800e50c:	e707      	b.n	800e31e <__kernel_rem_pio2+0x2c2>
 800e50e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e510:	2b02      	cmp	r3, #2
 800e512:	dc09      	bgt.n	800e528 <__kernel_rem_pio2+0x4cc>
 800e514:	2b00      	cmp	r3, #0
 800e516:	dc32      	bgt.n	800e57e <__kernel_rem_pio2+0x522>
 800e518:	d05a      	beq.n	800e5d0 <__kernel_rem_pio2+0x574>
 800e51a:	9b04      	ldr	r3, [sp, #16]
 800e51c:	f003 0007 	and.w	r0, r3, #7
 800e520:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e528:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800e52a:	2b03      	cmp	r3, #3
 800e52c:	d1f5      	bne.n	800e51a <__kernel_rem_pio2+0x4be>
 800e52e:	ab48      	add	r3, sp, #288	; 0x120
 800e530:	441d      	add	r5, r3
 800e532:	46aa      	mov	sl, r5
 800e534:	46a3      	mov	fp, r4
 800e536:	f1bb 0f00 	cmp.w	fp, #0
 800e53a:	dc76      	bgt.n	800e62a <__kernel_rem_pio2+0x5ce>
 800e53c:	46aa      	mov	sl, r5
 800e53e:	46a3      	mov	fp, r4
 800e540:	f1bb 0f01 	cmp.w	fp, #1
 800e544:	f300 8090 	bgt.w	800e668 <__kernel_rem_pio2+0x60c>
 800e548:	2700      	movs	r7, #0
 800e54a:	463e      	mov	r6, r7
 800e54c:	2c01      	cmp	r4, #1
 800e54e:	f300 80aa 	bgt.w	800e6a6 <__kernel_rem_pio2+0x64a>
 800e552:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800e556:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800e55a:	9b00      	ldr	r3, [sp, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f040 80ac 	bne.w	800e6ba <__kernel_rem_pio2+0x65e>
 800e562:	4603      	mov	r3, r0
 800e564:	462a      	mov	r2, r5
 800e566:	9806      	ldr	r0, [sp, #24]
 800e568:	e9c0 2300 	strd	r2, r3, [r0]
 800e56c:	4622      	mov	r2, r4
 800e56e:	460b      	mov	r3, r1
 800e570:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e574:	463a      	mov	r2, r7
 800e576:	4633      	mov	r3, r6
 800e578:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e57c:	e7cd      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e57e:	2000      	movs	r0, #0
 800e580:	46a0      	mov	r8, r4
 800e582:	4601      	mov	r1, r0
 800e584:	ab48      	add	r3, sp, #288	; 0x120
 800e586:	441d      	add	r5, r3
 800e588:	f1b8 0f00 	cmp.w	r8, #0
 800e58c:	da3a      	bge.n	800e604 <__kernel_rem_pio2+0x5a8>
 800e58e:	9b00      	ldr	r3, [sp, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d03e      	beq.n	800e612 <__kernel_rem_pio2+0x5b6>
 800e594:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800e598:	4602      	mov	r2, r0
 800e59a:	462b      	mov	r3, r5
 800e59c:	9d06      	ldr	r5, [sp, #24]
 800e59e:	2601      	movs	r6, #1
 800e5a0:	e9c5 2300 	strd	r2, r3, [r5]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e5aa:	f7f1 fddd 	bl	8000168 <__aeabi_dsub>
 800e5ae:	4684      	mov	ip, r0
 800e5b0:	460f      	mov	r7, r1
 800e5b2:	ad48      	add	r5, sp, #288	; 0x120
 800e5b4:	42b4      	cmp	r4, r6
 800e5b6:	f105 0508 	add.w	r5, r5, #8
 800e5ba:	da2c      	bge.n	800e616 <__kernel_rem_pio2+0x5ba>
 800e5bc:	9b00      	ldr	r3, [sp, #0]
 800e5be:	b10b      	cbz	r3, 800e5c4 <__kernel_rem_pio2+0x568>
 800e5c0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e5c4:	4662      	mov	r2, ip
 800e5c6:	463b      	mov	r3, r7
 800e5c8:	9906      	ldr	r1, [sp, #24]
 800e5ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800e5ce:	e7a4      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e5d0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800e5d2:	ab48      	add	r3, sp, #288	; 0x120
 800e5d4:	4637      	mov	r7, r6
 800e5d6:	441d      	add	r5, r3
 800e5d8:	2c00      	cmp	r4, #0
 800e5da:	da09      	bge.n	800e5f0 <__kernel_rem_pio2+0x594>
 800e5dc:	9b00      	ldr	r3, [sp, #0]
 800e5de:	b10b      	cbz	r3, 800e5e4 <__kernel_rem_pio2+0x588>
 800e5e0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800e5e4:	4632      	mov	r2, r6
 800e5e6:	463b      	mov	r3, r7
 800e5e8:	9906      	ldr	r1, [sp, #24]
 800e5ea:	e9c1 2300 	strd	r2, r3, [r1]
 800e5ee:	e794      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800e5f6:	4639      	mov	r1, r7
 800e5f8:	f7f1 fdb8 	bl	800016c <__adddf3>
 800e5fc:	3c01      	subs	r4, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	460f      	mov	r7, r1
 800e602:	e7e9      	b.n	800e5d8 <__kernel_rem_pio2+0x57c>
 800e604:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800e608:	f7f1 fdb0 	bl	800016c <__adddf3>
 800e60c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e610:	e7ba      	b.n	800e588 <__kernel_rem_pio2+0x52c>
 800e612:	460d      	mov	r5, r1
 800e614:	e7c0      	b.n	800e598 <__kernel_rem_pio2+0x53c>
 800e616:	4660      	mov	r0, ip
 800e618:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e61c:	4639      	mov	r1, r7
 800e61e:	f7f1 fda5 	bl	800016c <__adddf3>
 800e622:	3601      	adds	r6, #1
 800e624:	4684      	mov	ip, r0
 800e626:	460f      	mov	r7, r1
 800e628:	e7c4      	b.n	800e5b4 <__kernel_rem_pio2+0x558>
 800e62a:	e9da 6700 	ldrd	r6, r7, [sl]
 800e62e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800e632:	4632      	mov	r2, r6
 800e634:	463b      	mov	r3, r7
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f7f1 fd97 	bl	800016c <__adddf3>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e646:	4640      	mov	r0, r8
 800e648:	4649      	mov	r1, r9
 800e64a:	f7f1 fd8d 	bl	8000168 <__aeabi_dsub>
 800e64e:	4632      	mov	r2, r6
 800e650:	463b      	mov	r3, r7
 800e652:	f7f1 fd8b 	bl	800016c <__adddf3>
 800e656:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e65a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800e65e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e662:	e9ca 2300 	strd	r2, r3, [sl]
 800e666:	e766      	b.n	800e536 <__kernel_rem_pio2+0x4da>
 800e668:	e9da 8900 	ldrd	r8, r9, [sl]
 800e66c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800e670:	4642      	mov	r2, r8
 800e672:	464b      	mov	r3, r9
 800e674:	4630      	mov	r0, r6
 800e676:	4639      	mov	r1, r7
 800e678:	f7f1 fd78 	bl	800016c <__adddf3>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e684:	4630      	mov	r0, r6
 800e686:	4639      	mov	r1, r7
 800e688:	f7f1 fd6e 	bl	8000168 <__aeabi_dsub>
 800e68c:	4642      	mov	r2, r8
 800e68e:	464b      	mov	r3, r9
 800e690:	f7f1 fd6c 	bl	800016c <__adddf3>
 800e694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e698:	e86a 0102 	strd	r0, r1, [sl], #-8
 800e69c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e6a0:	e9ca 2300 	strd	r2, r3, [sl]
 800e6a4:	e74c      	b.n	800e540 <__kernel_rem_pio2+0x4e4>
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	f7f1 fd5d 	bl	800016c <__adddf3>
 800e6b2:	3c01      	subs	r4, #1
 800e6b4:	4607      	mov	r7, r0
 800e6b6:	460e      	mov	r6, r1
 800e6b8:	e748      	b.n	800e54c <__kernel_rem_pio2+0x4f0>
 800e6ba:	9b06      	ldr	r3, [sp, #24]
 800e6bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e6c0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800e6c4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800e6c8:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800e6cc:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800e6d0:	601d      	str	r5, [r3, #0]
 800e6d2:	615e      	str	r6, [r3, #20]
 800e6d4:	e721      	b.n	800e51a <__kernel_rem_pio2+0x4be>
 800e6d6:	bf00      	nop
 800e6d8:	41700000 	.word	0x41700000
 800e6dc:	3e700000 	.word	0x3e700000

0800e6e0 <__kernel_sin>:
 800e6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e4:	b086      	sub	sp, #24
 800e6e6:	e9cd 2300 	strd	r2, r3, [sp]
 800e6ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e6ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e6f2:	4682      	mov	sl, r0
 800e6f4:	460c      	mov	r4, r1
 800e6f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800e6f8:	da03      	bge.n	800e702 <__kernel_sin+0x22>
 800e6fa:	f7f2 f99d 	bl	8000a38 <__aeabi_d2iz>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d050      	beq.n	800e7a4 <__kernel_sin+0xc4>
 800e702:	4652      	mov	r2, sl
 800e704:	4623      	mov	r3, r4
 800e706:	4650      	mov	r0, sl
 800e708:	4621      	mov	r1, r4
 800e70a:	f7f1 fee5 	bl	80004d8 <__aeabi_dmul>
 800e70e:	4606      	mov	r6, r0
 800e710:	460f      	mov	r7, r1
 800e712:	4602      	mov	r2, r0
 800e714:	460b      	mov	r3, r1
 800e716:	4650      	mov	r0, sl
 800e718:	4621      	mov	r1, r4
 800e71a:	f7f1 fedd 	bl	80004d8 <__aeabi_dmul>
 800e71e:	a33e      	add	r3, pc, #248	; (adr r3, 800e818 <__kernel_sin+0x138>)
 800e720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e724:	4680      	mov	r8, r0
 800e726:	4689      	mov	r9, r1
 800e728:	4630      	mov	r0, r6
 800e72a:	4639      	mov	r1, r7
 800e72c:	f7f1 fed4 	bl	80004d8 <__aeabi_dmul>
 800e730:	a33b      	add	r3, pc, #236	; (adr r3, 800e820 <__kernel_sin+0x140>)
 800e732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e736:	f7f1 fd17 	bl	8000168 <__aeabi_dsub>
 800e73a:	4632      	mov	r2, r6
 800e73c:	463b      	mov	r3, r7
 800e73e:	f7f1 fecb 	bl	80004d8 <__aeabi_dmul>
 800e742:	a339      	add	r3, pc, #228	; (adr r3, 800e828 <__kernel_sin+0x148>)
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	f7f1 fd10 	bl	800016c <__adddf3>
 800e74c:	4632      	mov	r2, r6
 800e74e:	463b      	mov	r3, r7
 800e750:	f7f1 fec2 	bl	80004d8 <__aeabi_dmul>
 800e754:	a336      	add	r3, pc, #216	; (adr r3, 800e830 <__kernel_sin+0x150>)
 800e756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75a:	f7f1 fd05 	bl	8000168 <__aeabi_dsub>
 800e75e:	4632      	mov	r2, r6
 800e760:	463b      	mov	r3, r7
 800e762:	f7f1 feb9 	bl	80004d8 <__aeabi_dmul>
 800e766:	a334      	add	r3, pc, #208	; (adr r3, 800e838 <__kernel_sin+0x158>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f1 fcfe 	bl	800016c <__adddf3>
 800e770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e774:	b9dd      	cbnz	r5, 800e7ae <__kernel_sin+0xce>
 800e776:	4602      	mov	r2, r0
 800e778:	460b      	mov	r3, r1
 800e77a:	4630      	mov	r0, r6
 800e77c:	4639      	mov	r1, r7
 800e77e:	f7f1 feab 	bl	80004d8 <__aeabi_dmul>
 800e782:	a32f      	add	r3, pc, #188	; (adr r3, 800e840 <__kernel_sin+0x160>)
 800e784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e788:	f7f1 fcee 	bl	8000168 <__aeabi_dsub>
 800e78c:	4642      	mov	r2, r8
 800e78e:	464b      	mov	r3, r9
 800e790:	f7f1 fea2 	bl	80004d8 <__aeabi_dmul>
 800e794:	4602      	mov	r2, r0
 800e796:	460b      	mov	r3, r1
 800e798:	4650      	mov	r0, sl
 800e79a:	4621      	mov	r1, r4
 800e79c:	f7f1 fce6 	bl	800016c <__adddf3>
 800e7a0:	4682      	mov	sl, r0
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	4650      	mov	r0, sl
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	b006      	add	sp, #24
 800e7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7b4:	4b24      	ldr	r3, [pc, #144]	; (800e848 <__kernel_sin+0x168>)
 800e7b6:	f7f1 fe8f 	bl	80004d8 <__aeabi_dmul>
 800e7ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	f7f1 fe87 	bl	80004d8 <__aeabi_dmul>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e7d2:	f7f1 fcc9 	bl	8000168 <__aeabi_dsub>
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	463b      	mov	r3, r7
 800e7da:	f7f1 fe7d 	bl	80004d8 <__aeabi_dmul>
 800e7de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7e2:	f7f1 fcc1 	bl	8000168 <__aeabi_dsub>
 800e7e6:	a316      	add	r3, pc, #88	; (adr r3, 800e840 <__kernel_sin+0x160>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	4606      	mov	r6, r0
 800e7ee:	460f      	mov	r7, r1
 800e7f0:	4640      	mov	r0, r8
 800e7f2:	4649      	mov	r1, r9
 800e7f4:	f7f1 fe70 	bl	80004d8 <__aeabi_dmul>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	4630      	mov	r0, r6
 800e7fe:	4639      	mov	r1, r7
 800e800:	f7f1 fcb4 	bl	800016c <__adddf3>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4650      	mov	r0, sl
 800e80a:	4621      	mov	r1, r4
 800e80c:	f7f1 fcac 	bl	8000168 <__aeabi_dsub>
 800e810:	e7c6      	b.n	800e7a0 <__kernel_sin+0xc0>
 800e812:	bf00      	nop
 800e814:	f3af 8000 	nop.w
 800e818:	5acfd57c 	.word	0x5acfd57c
 800e81c:	3de5d93a 	.word	0x3de5d93a
 800e820:	8a2b9ceb 	.word	0x8a2b9ceb
 800e824:	3e5ae5e6 	.word	0x3e5ae5e6
 800e828:	57b1fe7d 	.word	0x57b1fe7d
 800e82c:	3ec71de3 	.word	0x3ec71de3
 800e830:	19c161d5 	.word	0x19c161d5
 800e834:	3f2a01a0 	.word	0x3f2a01a0
 800e838:	1110f8a6 	.word	0x1110f8a6
 800e83c:	3f811111 	.word	0x3f811111
 800e840:	55555549 	.word	0x55555549
 800e844:	3fc55555 	.word	0x3fc55555
 800e848:	3fe00000 	.word	0x3fe00000

0800e84c <fabs>:
 800e84c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e850:	4770      	bx	lr
 800e852:	0000      	movs	r0, r0
 800e854:	0000      	movs	r0, r0
	...

0800e858 <floor>:
 800e858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e85c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800e860:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800e864:	2e13      	cmp	r6, #19
 800e866:	4602      	mov	r2, r0
 800e868:	460b      	mov	r3, r1
 800e86a:	4607      	mov	r7, r0
 800e86c:	460c      	mov	r4, r1
 800e86e:	4605      	mov	r5, r0
 800e870:	dc33      	bgt.n	800e8da <floor+0x82>
 800e872:	2e00      	cmp	r6, #0
 800e874:	da14      	bge.n	800e8a0 <floor+0x48>
 800e876:	a334      	add	r3, pc, #208	; (adr r3, 800e948 <floor+0xf0>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f1 fc76 	bl	800016c <__adddf3>
 800e880:	2200      	movs	r2, #0
 800e882:	2300      	movs	r3, #0
 800e884:	f7f2 f8b8 	bl	80009f8 <__aeabi_dcmpgt>
 800e888:	b138      	cbz	r0, 800e89a <floor+0x42>
 800e88a:	2c00      	cmp	r4, #0
 800e88c:	da58      	bge.n	800e940 <floor+0xe8>
 800e88e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e892:	431d      	orrs	r5, r3
 800e894:	d001      	beq.n	800e89a <floor+0x42>
 800e896:	2500      	movs	r5, #0
 800e898:	4c2d      	ldr	r4, [pc, #180]	; (800e950 <floor+0xf8>)
 800e89a:	4623      	mov	r3, r4
 800e89c:	462f      	mov	r7, r5
 800e89e:	e025      	b.n	800e8ec <floor+0x94>
 800e8a0:	4a2c      	ldr	r2, [pc, #176]	; (800e954 <floor+0xfc>)
 800e8a2:	fa42 f806 	asr.w	r8, r2, r6
 800e8a6:	ea01 0208 	and.w	r2, r1, r8
 800e8aa:	4302      	orrs	r2, r0
 800e8ac:	d01e      	beq.n	800e8ec <floor+0x94>
 800e8ae:	a326      	add	r3, pc, #152	; (adr r3, 800e948 <floor+0xf0>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f7f1 fc5a 	bl	800016c <__adddf3>
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f7f2 f89c 	bl	80009f8 <__aeabi_dcmpgt>
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d0ea      	beq.n	800e89a <floor+0x42>
 800e8c4:	2c00      	cmp	r4, #0
 800e8c6:	bfbe      	ittt	lt
 800e8c8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e8cc:	fa43 f606 	asrlt.w	r6, r3, r6
 800e8d0:	19a4      	addlt	r4, r4, r6
 800e8d2:	2500      	movs	r5, #0
 800e8d4:	ea24 0408 	bic.w	r4, r4, r8
 800e8d8:	e7df      	b.n	800e89a <floor+0x42>
 800e8da:	2e33      	cmp	r6, #51	; 0x33
 800e8dc:	dd0a      	ble.n	800e8f4 <floor+0x9c>
 800e8de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e8e2:	d103      	bne.n	800e8ec <floor+0x94>
 800e8e4:	f7f1 fc42 	bl	800016c <__adddf3>
 800e8e8:	4607      	mov	r7, r0
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4638      	mov	r0, r7
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e8f8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800e8fc:	fa22 f808 	lsr.w	r8, r2, r8
 800e900:	ea18 0f00 	tst.w	r8, r0
 800e904:	d0f2      	beq.n	800e8ec <floor+0x94>
 800e906:	a310      	add	r3, pc, #64	; (adr r3, 800e948 <floor+0xf0>)
 800e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90c:	f7f1 fc2e 	bl	800016c <__adddf3>
 800e910:	2200      	movs	r2, #0
 800e912:	2300      	movs	r3, #0
 800e914:	f7f2 f870 	bl	80009f8 <__aeabi_dcmpgt>
 800e918:	2800      	cmp	r0, #0
 800e91a:	d0be      	beq.n	800e89a <floor+0x42>
 800e91c:	2c00      	cmp	r4, #0
 800e91e:	da02      	bge.n	800e926 <floor+0xce>
 800e920:	2e14      	cmp	r6, #20
 800e922:	d103      	bne.n	800e92c <floor+0xd4>
 800e924:	3401      	adds	r4, #1
 800e926:	ea25 0508 	bic.w	r5, r5, r8
 800e92a:	e7b6      	b.n	800e89a <floor+0x42>
 800e92c:	2301      	movs	r3, #1
 800e92e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e932:	fa03 f606 	lsl.w	r6, r3, r6
 800e936:	4435      	add	r5, r6
 800e938:	42bd      	cmp	r5, r7
 800e93a:	bf38      	it	cc
 800e93c:	18e4      	addcc	r4, r4, r3
 800e93e:	e7f2      	b.n	800e926 <floor+0xce>
 800e940:	2500      	movs	r5, #0
 800e942:	462c      	mov	r4, r5
 800e944:	e7a9      	b.n	800e89a <floor+0x42>
 800e946:	bf00      	nop
 800e948:	8800759c 	.word	0x8800759c
 800e94c:	7e37e43c 	.word	0x7e37e43c
 800e950:	bff00000 	.word	0xbff00000
 800e954:	000fffff 	.word	0x000fffff

0800e958 <scalbn>:
 800e958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800e95e:	4604      	mov	r4, r0
 800e960:	460d      	mov	r5, r1
 800e962:	4617      	mov	r7, r2
 800e964:	460b      	mov	r3, r1
 800e966:	b996      	cbnz	r6, 800e98e <scalbn+0x36>
 800e968:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e96c:	4303      	orrs	r3, r0
 800e96e:	d039      	beq.n	800e9e4 <scalbn+0x8c>
 800e970:	4b33      	ldr	r3, [pc, #204]	; (800ea40 <scalbn+0xe8>)
 800e972:	2200      	movs	r2, #0
 800e974:	f7f1 fdb0 	bl	80004d8 <__aeabi_dmul>
 800e978:	4b32      	ldr	r3, [pc, #200]	; (800ea44 <scalbn+0xec>)
 800e97a:	4604      	mov	r4, r0
 800e97c:	429f      	cmp	r7, r3
 800e97e:	460d      	mov	r5, r1
 800e980:	da0f      	bge.n	800e9a2 <scalbn+0x4a>
 800e982:	a32b      	add	r3, pc, #172	; (adr r3, 800ea30 <scalbn+0xd8>)
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	f7f1 fda6 	bl	80004d8 <__aeabi_dmul>
 800e98c:	e006      	b.n	800e99c <scalbn+0x44>
 800e98e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e992:	4296      	cmp	r6, r2
 800e994:	d10a      	bne.n	800e9ac <scalbn+0x54>
 800e996:	4602      	mov	r2, r0
 800e998:	f7f1 fbe8 	bl	800016c <__adddf3>
 800e99c:	4604      	mov	r4, r0
 800e99e:	460d      	mov	r5, r1
 800e9a0:	e020      	b.n	800e9e4 <scalbn+0x8c>
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e9a8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800e9ac:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800e9b0:	19b9      	adds	r1, r7, r6
 800e9b2:	4291      	cmp	r1, r2
 800e9b4:	dd0e      	ble.n	800e9d4 <scalbn+0x7c>
 800e9b6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800e9ba:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800e9be:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800e9c2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800e9c6:	4820      	ldr	r0, [pc, #128]	; (800ea48 <scalbn+0xf0>)
 800e9c8:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800e9cc:	a31a      	add	r3, pc, #104	; (adr r3, 800ea38 <scalbn+0xe0>)
 800e9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d2:	e7d9      	b.n	800e988 <scalbn+0x30>
 800e9d4:	2900      	cmp	r1, #0
 800e9d6:	dd08      	ble.n	800e9ea <scalbn+0x92>
 800e9d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e9dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e9e0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800e9ee:	da12      	bge.n	800ea16 <scalbn+0xbe>
 800e9f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e9f4:	429f      	cmp	r7, r3
 800e9f6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800e9fa:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800e9fe:	dcdc      	bgt.n	800e9ba <scalbn+0x62>
 800ea00:	a30b      	add	r3, pc, #44	; (adr r3, 800ea30 <scalbn+0xd8>)
 800ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea06:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ea0a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800ea0e:	480f      	ldr	r0, [pc, #60]	; (800ea4c <scalbn+0xf4>)
 800ea10:	f041 011f 	orr.w	r1, r1, #31
 800ea14:	e7b8      	b.n	800e988 <scalbn+0x30>
 800ea16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea1a:	3136      	adds	r1, #54	; 0x36
 800ea1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea20:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800ea24:	4620      	mov	r0, r4
 800ea26:	4629      	mov	r1, r5
 800ea28:	2200      	movs	r2, #0
 800ea2a:	4b09      	ldr	r3, [pc, #36]	; (800ea50 <scalbn+0xf8>)
 800ea2c:	e7ac      	b.n	800e988 <scalbn+0x30>
 800ea2e:	bf00      	nop
 800ea30:	c2f8f359 	.word	0xc2f8f359
 800ea34:	01a56e1f 	.word	0x01a56e1f
 800ea38:	8800759c 	.word	0x8800759c
 800ea3c:	7e37e43c 	.word	0x7e37e43c
 800ea40:	43500000 	.word	0x43500000
 800ea44:	ffff3cb0 	.word	0xffff3cb0
 800ea48:	8800759c 	.word	0x8800759c
 800ea4c:	c2f8f359 	.word	0xc2f8f359
 800ea50:	3c900000 	.word	0x3c900000

0800ea54 <_init>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	bf00      	nop
 800ea58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5a:	bc08      	pop	{r3}
 800ea5c:	469e      	mov	lr, r3
 800ea5e:	4770      	bx	lr

0800ea60 <_fini>:
 800ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea62:	bf00      	nop
 800ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea66:	bc08      	pop	{r3}
 800ea68:	469e      	mov	lr, r3
 800ea6a:	4770      	bx	lr
